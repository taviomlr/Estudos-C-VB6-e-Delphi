VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cCondicaoPagamento"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cCondicaoPagamento
''  Generated by Enterprise Architect
''  Created on:      16-ago-2006 15:07:46
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private mintCodigo                   As Integer
Private mstrDescricao                As String
Private mstrTipoDia                  As String
Private mcurMinimo                   As Currency
Private mcurMaximo                   As Currency
Private mdblPercentComissao          As Double
Private mstrTipoDataInicial          As String
Private msngTaxa                     As Single
Private mintDiasReferencia           As Integer
Private mstrDiaDefinido              As String
Private mstrIpi                      As String
Private mstrDespesaFinanceira        As String
Private mstrIcmsSt                   As String
Private mbooMesAtual                 As Boolean
Private mbooInativa                  As Boolean
Private mbooApenasDiasUteis          As Boolean
Private mbooVendaAVista              As Boolean
Private mbytNumeroParcelas           As Byte
Private mbooIguais                   As Boolean
Private mdblJurosMensal              As Double
Private mobjMatrizParcelas           As cColecaoMatrizParcela
Private mintParcelaIPI               As Integer
Private mintParcelaDespFin           As Integer
Private mintParcelaICMSST            As Integer
Private mdblRestante                 As Double
Private mdblRateioIPI                As Double
Private mdblRateioICMSST             As Double
Private mdblRateioDespFin            As Double
'pt. 00000 - Ivo Sousa (19/01/2009)
Private mintCondicaoPagamentoNFe     As Integer
'pt. 87269 - Dulcino Júnior (13/02/2009)
Private mblnValorIPIDistribuido      As Boolean
Private mblnValorIcmsStDistribuido   As Boolean
Private mblnValorDespesaDistribuido  As Boolean
Private mcurIPIAcumuladoParcelas     As Currency
Private mcurDespesaAcumuladaParcelas As Currency
Private mcurIcmsStAcumuladoParcelas  As Currency
'Pt. 92271 - Moacir Pfau(15/05/2009)
Private mstrTipoOperacao             As String
'Pt. 88817 - Moacir Pfau(05/11/2009)
Private mlngCodigo_formapagamento       As Long

Private Const NomeTabela$ = "[Condições de Pagamento]"

Private Sub Class_Initialize()
    Set mobjMatrizParcelas = New cColecaoMatrizParcela
    mintParcelaIPI = 0
    mintParcelaDespFin = 0
    mintParcelaICMSST = 0
    mdblRestante = 0
    mblnValorIPIDistribuido = False
    mblnValorDespesaDistribuido = False
    mblnValorIcmsStDistribuido = False
    mcurIPIAcumuladoParcelas = 0
    mcurDespesaAcumuladaParcelas = 0
    mcurIcmsStAcumuladoParcelas = 0
End Sub

Public Property Let Codigo(ByVal NewVal As Integer)
    mintCodigo = NewVal
End Property

Public Property Get Codigo() As Integer
    Codigo = mintCodigo
End Property

Public Property Get Descricao() As String
    Descricao = mstrDescricao
End Property

Public Property Let Descricao(ByVal NewVal As String)
    mstrDescricao = NewVal
End Property

Public Property Get despesaFinanceira() As String
    despesaFinanceira = mstrDespesaFinanceira
End Property

Public Property Let despesaFinanceira(ByVal NewVal As String)
    mstrDespesaFinanceira = NewVal
End Property

Public Property Get diasReferencia() As Integer
    diasReferencia = mintDiasReferencia
End Property

Public Property Let diasReferencia(ByVal NewVal As Integer)
    mintDiasReferencia = NewVal
End Property

Public Property Get ipi() As String
    ipi = mstrIpi
End Property

Public Property Let ipi(ByVal NewVal As String)
    mstrIpi = NewVal
End Property

Public Property Get Maximo() As Currency
    Maximo = mcurMaximo
End Property

Public Property Let Maximo(ByVal NewVal As Currency)
    mcurMaximo = NewVal
End Property

Public Property Get numeroParcelas() As Byte
    numeroParcelas = mbytNumeroParcelas
End Property

Public Property Let numeroParcelas(ByVal NewVal As Byte)
    mbytNumeroParcelas = NewVal
End Property

Public Property Get taxa() As Single
    taxa = msngTaxa
End Property

Public Property Let taxa(ByVal NewVal As Single)
    msngTaxa = NewVal
End Property

Public Property Get tipoDataInicial() As String
    tipoDataInicial = mstrTipoDataInicial
End Property

Public Property Let tipoDataInicial(ByVal NewVal As String)
    mstrTipoDataInicial = NewVal
End Property

Public Property Get TipoDia() As String
    TipoDia = mstrTipoDia
End Property

Public Property Let TipoDia(ByVal NewVal As String)
    mstrTipoDia = NewVal
End Property

Public Property Get VendaaVista() As Boolean
    VendaaVista = mbooVendaAVista
End Property

Public Property Let VendaaVista(ByVal NewVal As Boolean)
    mbooVendaAVista = NewVal
End Property

Public Property Get ApenasDiasUteis() As Boolean
    ApenasDiasUteis = mbooApenasDiasUteis
End Property

Public Property Let ApenasDiasUteis(ByVal NewVal As Boolean)
    mbooApenasDiasUteis = NewVal
End Property

Public Property Get iguais() As Boolean
    iguais = mbooIguais
End Property

Public Property Let iguais(ByVal NewVal As Boolean)
    mbooIguais = NewVal
End Property

Public Property Get inativa() As Boolean
    inativa = mbooInativa
End Property

Public Property Let inativa(ByVal NewVal As Boolean)
    mbooInativa = NewVal
End Property

Public Property Get mesAtual() As Boolean
    mesAtual = mbooMesAtual
End Property

Public Property Let mesAtual(ByVal NewVal As Boolean)
    mbooMesAtual = NewVal
End Property

Public Property Get Minimo() As Currency
    Minimo = mcurMinimo
End Property

Public Property Let Minimo(ByVal NewVal As Currency)
    mcurMinimo = NewVal
End Property

Public Property Let percentualComissao(ByVal NewVal As Double)
    mdblPercentComissao = NewVal
End Property

Public Property Get percentualComissao() As Double
    percentualComissao = mdblPercentComissao
End Property

Public Property Get IcmsSt() As String
    IcmsSt = mstrIcmsSt
End Property

Public Property Let IcmsSt(ByVal NewVal As String)
    mstrIcmsSt = NewVal
End Property

Public Property Get DiaDefinido() As String
    DiaDefinido = mstrDiaDefinido
End Property

Public Property Let DiaDefinido(ByVal NewVal As String)
    mstrDiaDefinido = NewVal
End Property

Public Property Get JurosMensal() As Double
    JurosMensal = mdblJurosMensal
End Property

Public Property Let JurosMensal(ByVal NewVal As Double)
    mdblJurosMensal = NewVal
End Property

Public Property Get MatrizParcelas() As cColecaoMatrizParcela
    Set MatrizParcelas = mobjMatrizParcelas
End Property

Public Property Let MatrizParcelas(ByVal NewVal As cColecaoMatrizParcela)
    Set mobjMatrizParcelas = NewVal
End Property

'pt. 00000 - Ivo Sousa (19/01/2009)
Public Property Get CondicaoPagamentoNFe() As Integer
    CondicaoPagamentoNFe = mintCondicaoPagamentoNFe
End Property

Public Property Let CondicaoPagamentoNFe(ByVal NewVal As Integer)
    mintCondicaoPagamentoNFe = NewVal
End Property

'Pt. 92271 - Moacir Pfau(15/05/2009)
Public Property Get TipoOperacao() As String
    TipoOperacao = mstrTipoOperacao
End Property

Public Property Let TipoOperacao(ByVal NewVal As String)
    mstrTipoOperacao = NewVal
End Property

'Pt. 88817 - Moacir Pfau(05/11/2009)
Public Property Get Codigo_formapagamento() As Long
    Codigo_formapagamento = mlngCodigo_formapagamento
End Property

Public Property Let Codigo_formapagamento(ByVal Valor As Long)
    mlngCodigo_formapagamento = Valor
End Property

'Carrega a Condição de Pagamento
Public Function Carregar(intId As Long, Optional strErro As String) As Boolean
    Dim cmd              As IDBSelectCommand
    Dim rdResult         As IDBReader
    Dim objMatrizParcela As cMatrizParcela
    Dim rsResult         As Object
    Dim strSql           As String

On Error GoTo erro_carregando
    Carregar = True
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    Call cmd.Filter.Append("[Código] = @pCodigo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pCodigo", intId, dbFieldTypeInt))
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    With rdResult
        If Not .EOF Then
            mintCodigo = .GetInteger("Código")
            mstrDescricao = .GetString("Descrição")
            mstrTipoDia = .GetString("Tipo de Dia")
            mcurMinimo = .GetValue("Mínimo")
            mcurMaximo = .GetValue("Máximo")
            mdblPercentComissao = .GetDouble("PerCom")
            mstrTipoDataInicial = .GetString("Tipo da Data Inicial")
            msngTaxa = .GetValue("Taxa")
            mintDiasReferencia = .GetInteger("DiasReferencia")
            mstrDiaDefinido = .GetString("diaDefinido")
            mstrIpi = .GetString("IPI")
            mstrDespesaFinanceira = .GetString("Despesa Financeira")
            mstrIcmsSt = .GetString("gera_valor_icms_st")
            mbooInativa = .GetBoolean("Inativa")
            mbooMesAtual = .GetBoolean("Mês Atual")
            mbooVendaAVista = .GetBoolean("VendaAVista")
            mbytNumeroParcelas = .GetByte("Número de Parcelas")
            mbooIguais = .GetBoolean("Iguais")
            mbooApenasDiasUteis = .GetBoolean("Considerar apenas dias úteis")
            mdblJurosMensal = .GetDouble("Taxa")
            mintCondicaoPagamentoNFe = .GetInteger("cond_pagt_nfe")
            'Pt. 92271 - Moacir Pfau(15/05/2009)
            mstrTipoOperacao = .GetString("tipo_operacao")
            'Carrega a coleção de parcelas
            strSql = "SELECT * FROM Parcelas WHERE Condição = " & intId & " ORDER BY Sequencial"
            If AbreRecordset(rsResult, strSql) = WL_OK Then
                'pt. 88407 - Ivo Sousa (88407)
                Set mobjMatrizParcelas = New cColecaoMatrizParcela
                rsResult.MoveFirst
                While Not rsResult.EOF
                    Set objMatrizParcela = New cMatrizParcela
                    Call mobjMatrizParcelas.add(objMatrizParcela.CriarObjeto(rsResult))
                    Set objMatrizParcela = Nothing
                    rsResult.MoveNext
                Wend
            End If
            'Pt. 88817 - Moacir Pfau(05/11/2009)
            mlngCodigo_formapagamento = .GetLong("codigo_formapagamento")
            Carregar = True
        Else
            Carregar = False
        End If
        .CloseReader
    End With
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function
erro_carregando:
    Aplicacao.Disconnect
    strErro = "Erro ao carregar os registros: " & err.Description
    Carregar = False
End Function

Public Function geraParcelas(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long, Optional strVencimentosIntegracao As String) As cColecaoParcela
        
    'Ivo Sousa(23/01/2013) - História: #19181 Desenvolvimento: #19183
    If strVencimentosIntegracao <> Empty Then
        Set geraParcelas = GeraDiaVencimentoIntegracao(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto, strVencimentosIntegracao)
    Else
        Select Case UCase(mstrTipoDia)
            Case UCase("Dias Corridos")
                Set geraParcelas = GeraDiasCorridos(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto)
            Case UCase("Fixo")
                Set geraParcelas = GeraDiaFixo(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto)
            Case UCase("Semanal")
                Set geraParcelas = GeraSemanal(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto)
            Case UCase("Fora Semana")
                Set geraParcelas = GeraForaSemana(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto)
            Case UCase("Fora Quinzena")
                Set geraParcelas = GeraForaQuinzena(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto)
            Case UCase("Fora Dezena")
                Set geraParcelas = GeraForaDezena(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto)
            Case UCase("Fora Mês")
                Set geraParcelas = GeraForaMes(dblValor, datData, intParcela, dblIPI, dblDespFinanceira, dblICMSST, lngCentroCusto)
        End Select
    End If
End Function

Public Function Existe(intId As Integer) As Boolean
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader

On Error GoTo erro_carregando
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    Call cmd.Filter.Append("[Código] = @pCodigo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pCodigo", intId, dbFieldTypeInt))
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    Existe = Not rdResult.EOF
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function

erro_carregando:
    err.Clear
    Existe = False
End Function

Private Function GeraDiaDefinido(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela            As cParcela
    Dim objMatrizParcela   As cMatrizParcela
    Dim intCont            As Integer
    Dim intQtd             As Integer
    Dim datVencimento      As Date
    Dim intMes             As Integer
    Dim intDia             As Integer
    Dim intAno             As Integer
    
    Set GeraDiaDefinido = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            If intParcela = 1 Then
                If mbooMesAtual Then
                    intMes = Month(datData)
                Else
                    intMes = Month(datData) + 1
                End If
                intAno = Year(datData)
                If intMes = 13 Then
                    intAno = intAno + 1
                    intMes = 1
                End If
                If mstrDiaDefinido = "Último" Then
                    intDia = Day(LastDay(CDate("01/" & intMes & "/" & intAno)))
                Else
                    intDia = CInt(Replace(mstrDiaDefinido, "º", ""))
                End If
                datVencimento = CDate(intDia & "/" & intMes & intAno)
            Else
                datVencimento = DateAdd("M", 1, datVencimento)
            End If
            If datVencimento < datData Then
                datVencimento = DateAdd("M", 1, datData)
            End If
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraDiaDefinido.add(Parcela)
            MatrizParcelas.MoveNext
            intCont = intCont + 1
        Wend
    Else
        Set GeraDiaDefinido = Nothing
    End If
End Function

Private Function GeraDiasCorridos(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim datVencimento    As Date
    
    Set GeraDiasCorridos = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            datVencimento = DateAdd("d", objMatrizParcela.Parcela, datData)
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraDiasCorridos.add(Parcela)
            MatrizParcelas.MoveNext
            intCont = intCont + 1
        Wend
    Else
        Set GeraDiasCorridos = Nothing
    End If
End Function

Private Function GeraDiaFixo(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim datVencimento    As Date
    Dim intMes           As Integer
    Dim intDia           As Integer
    Dim intAno           As Integer
    
    Set GeraDiaFixo = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            intDia = objMatrizParcela.Parcela
            If intParcela = 1 Then
                If mbooMesAtual Then
                    intMes = Month(datData)
                    If Day(datData) > intDia Then
                        intMes = intMes + 1
                    End If
                Else
                    intMes = Month(datData) + 1
                End If
                intAno = Year(datData)
                If intMes = 13 Then
                    intAno = intAno + 1
                    intMes = 1
                End If
                If intDia = 0 Then
                    intDia = 1
                End If
                If intDia = 31 And Not EData(intDia & "/" & intMes & "/" & intAno) Then
                    intDia = Day(LastDay(CDate("01/" & intMes & "/" & intAno)))
                End If
                datVencimento = CDate(intDia & "/" & intMes & "/" & intAno)
            Else
                datVencimento = intDia & Right(datVencimento, 8)
                datVencimento = DateAdd("M", 1, datVencimento)
            End If
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraDiaFixo.add(Parcela)
            intCont = intCont + 1
            MatrizParcelas.MoveNext
        Wend
    Else
        Set GeraDiaFixo = Nothing
    End If
End Function

Private Function GeraSemanal(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim datVencimento    As Date
    Dim intDia           As Integer
    
    Set GeraSemanal = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            intDia = objMatrizParcela.Parcela
            If intParcela = 1 Then
                datVencimento = DatadaSemana(datData, intDia, True, intParcela)
            Else
                datVencimento = DatadaSemana(datVencimento, intDia, True, intParcela)
            End If
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraSemanal.add(Parcela)
            MatrizParcelas.MoveNext
            'intParcela = intParcela + 1
        Wend
    Else
        Set GeraSemanal = Nothing
    End If
End Function

Private Function GeraForaSemana(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim datVencimento    As Date
    Dim intDia           As Integer
    
    Set GeraForaSemana = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            intDia = objMatrizParcela.Parcela
            If intParcela = 1 Then
                datVencimento = ForaSemana(datData, intDia)
            Else
                datVencimento = ForaSemana(datVencimento, intDia)
            End If
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraForaSemana.add(Parcela)
            MatrizParcelas.MoveNext
            intCont = intCont + 1
        Wend
    Else
        Set GeraForaSemana = Nothing
    End If
End Function

Private Function GeraForaQuinzena(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim datVencimento    As Date
    Dim intMes           As Integer
    Dim intDia           As Integer
    Dim intAno           As Integer
    
    Set GeraForaQuinzena = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            intDia = objMatrizParcela.Parcela
            intMes = Month(datData)
            intAno = Year(datData)
            If Not EData(datVencimento) Then
                If Day(datData) <= 15 Then
                    datVencimento = DateAdd("D", intDia, CDate("15/" & intMes & "/" & intAno))
                Else
                    datVencimento = DateAdd("D", intDia, LastDay(datData))
                End If
            Else
                datVencimento = DateAdd("D", intDia, datVencimento)
            End If
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraForaQuinzena.add(Parcela)
            MatrizParcelas.MoveNext
            intCont = intCont + 1
        Wend
    Else
        Set GeraForaQuinzena = Nothing
    End If
End Function

Private Function GeraForaDezena(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim datVencimento    As Date
    Dim intMes           As Integer
    Dim intDia           As Integer
    Dim intAno           As Integer
    
    Set GeraForaDezena = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            intDia = objMatrizParcela.Parcela
            intMes = Month(datData)
            intAno = Year(datData)
            If Not EData(datVencimento) Then
                If Day(datData) <= 10 Then
                    datVencimento = DateAdd("D", intDia, CDate("10/" & intMes & "/" & intAno))
                ElseIf Day(datData) <= 20 Then
                    datVencimento = DateAdd("D", intDia, CDate("20/" & intMes & "/" & intAno))
                Else
                    datVencimento = DateAdd("D", intDia, LastDay(datData))
                End If
            Else
                datVencimento = DateAdd("D", intDia, datVencimento)
            End If
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraForaDezena.add(Parcela)
            MatrizParcelas.MoveNext
            intCont = intCont + 1
        Wend
    Else
        Set GeraForaDezena = Nothing
    End If
End Function

Private Function GeraForaMes(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim datVencimento    As Date
    Dim intMes           As Integer
    Dim intDia           As Integer
    Dim intAno           As Integer
    
    Set GeraForaMes = New cColecaoParcela
    intCont = 1
    Call MatrizParcelas.MoveFirst
    intQtd = MatrizParcelas.Count
    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            intDia = objMatrizParcela.Parcela
            intMes = Month(datData)
            intAno = Year(datData)
            If Not EData(datVencimento) Then
                datData = DateAdd("M", 1, CDate("01/" & intMes & "/" & intAno))
            End If
            datVencimento = DateAdd("D", (intDia - 1), datData)
            'Retorna a data correta caso o usuario tenha optado por utilizar somente dias uteis
            datVencimento = ValidaDiasUteis(datVencimento)
            Parcela.vencimento = datVencimento
            Call GeraForaMes.add(Parcela)
            MatrizParcelas.MoveNext
            intCont = intCont + 1
        Wend
    Else
        Set GeraForaMes = Nothing
    End If
End Function

Private Function ValidaDiasUteis(datVencimento As Date) As Date
    Dim intDiasUteis As Integer
    
    If mbooApenasDiasUteis Then
        intDiasUteis = NumeroDiasUteisNaoUteis(datVencimento, 0)
        ValidaDiasUteis = DateAdd("d", intDiasUteis, datVencimento)
    Else
        ValidaDiasUteis = datVencimento
    End If
End Function

Private Function CalculaParcelas(intCont As Integer, dblValor As Double, dblIPI As Double, dblDespFinanceira As Double, dblICMSST As Double, ByRef objMatrizParcela As cMatrizParcela, ByRef objParcela As cParcela) As Double
    Dim dblValorSemImpostos As Double
    
    If intCont < MatrizParcelas.Count Then
        dblValorSemImpostos = Round(dblValor * (objMatrizParcela.Porcentagem / 100), 2)
    Else
        dblValorSemImpostos = mdblRestante
    End If
    mdblRestante = mdblRestante - dblValorSemImpostos
    
    objParcela.Valor = dblValorSemImpostos
    'IPI
    If intCont = mintParcelaIPI Then
        objParcela.Valor = objParcela.Valor + dblIPI
        objParcela.ValorIpi = dblIPI
    Else
        'pt. 87269 - Dulcino Júnior (17/02/2008)
        If mblnValorIPIDistribuido Then
            If intCont = MatrizParcelas.Count Then
                objParcela.ValorIpi = Round(dblIPI - mcurIPIAcumuladoParcelas, 2)
            Else
                objParcela.ValorIpi = Round(dblIPI / MatrizParcelas.Count, 2)
            End If
            mcurIPIAcumuladoParcelas = mcurIPIAcumuladoParcelas + objParcela.ValorIpi
        End If
    End If
    
    'Despesas Finaceiras
    If intCont = mintParcelaDespFin Then
        objParcela.Valor = objParcela.Valor + dblDespFinanceira
        objParcela.ValorDespesasFinanceiras = dblDespFinanceira
    Else
        'pt. 87269 - Dulcino Júnior (17/02/2008)
        If mblnValorDespesaDistribuido Then
            If intCont = MatrizParcelas.Count Then
                objParcela.ValorDespesasFinanceiras = Round(dblDespFinanceira - mcurDespesaAcumuladaParcelas, 2)
            Else
                objParcela.ValorDespesasFinanceiras = Round(dblDespFinanceira / MatrizParcelas.Count, 2)
            End If
            mcurDespesaAcumuladaParcelas = mcurDespesaAcumuladaParcelas + objParcela.ValorDespesasFinanceiras
        End If
    End If
    
    'ICMS ST
    If intCont = mintParcelaICMSST Then
        objParcela.Valor = objParcela.Valor + dblICMSST
        objParcela.ValorIcmsSubstituicao = dblICMSST
     Else
        'pt. 87269 - Dulcino Júnior (17/02/2008)
        If mblnValorIcmsStDistribuido Then
            If intCont = MatrizParcelas.Count Then
                objParcela.ValorIcmsSubstituicao = Round(dblICMSST - mcurIcmsStAcumuladoParcelas, 2)
            Else
                objParcela.ValorIcmsSubstituicao = Round(dblICMSST / MatrizParcelas.Count, 2)
            End If
            mcurIcmsStAcumuladoParcelas = mcurIcmsStAcumuladoParcelas + objParcela.ValorIcmsSubstituicao
        End If
     End If
End Function

Private Function GetParcelasDistribuicaoImpostos(intQtdParcelas As Integer, Optional ByRef dblValor As Double, Optional ByRef dblIPI As Double, Optional ByRef dblDespFinanceiras As Double, Optional ByRef dblICMSST As Double) As Integer
    'IPI
    mblnValorIPIDistribuido = False
    Select Case mstrIpi
        Case "Primeira"
            mintParcelaIPI = 1
        Case "Última"
            mintParcelaIPI = intQtdParcelas
        Case Else
            mblnValorIPIDistribuido = True
            mintParcelaIPI = 0
            dblValor = dblValor + dblIPI
    End Select
    'Despesas Financeiras
    mblnValorDespesaDistribuido = False
    Select Case mstrDespesaFinanceira
        Case "Primeira"
            mintParcelaDespFin = 1
        Case "Última"
            mintParcelaDespFin = intQtdParcelas
        Case Else
            mblnValorDespesaDistribuido = True
            mintParcelaDespFin = 0
            dblValor = dblValor + dblDespFinanceiras
    End Select
    'ICMS ST
    mblnValorIcmsStDistribuido = False
    Select Case mstrIcmsSt
        Case "P"
            mintParcelaICMSST = 1
        Case "U"
            mintParcelaICMSST = intQtdParcelas
        Case Else
            mblnValorIcmsStDistribuido = True
            mintParcelaICMSST = 0
            dblValor = dblValor + dblICMSST
    End Select
End Function

'Ivo Sousa(23/01/2013) - História: #19181 Desenvolvimento: #19183
Private Function GeraDiaVencimentoIntegracao(dblValor As Double, datData As Date, Optional intParcela As Integer, Optional dblIPI As Double, Optional dblDespFinanceira As Double, Optional dblICMSST As Double, Optional lngCentroCusto As Long = 0, Optional strVencimentoParcelas) As cColecaoParcela
    Dim Parcela          As cParcela
    Dim objMatrizParcela As cMatrizParcela
    Dim intCont          As Integer
    Dim intQtd           As Integer
    Dim strVencimentos() As String
    
On Error GoTo err_Handler
    strVencimentos = Split(strVencimentoParcelas, ";")
    Set GeraDiaVencimentoIntegracao = New cColecaoParcela
    intCont = 1
    intQtd = UBound(strVencimentos)

    If Not IsNothing(MatrizParcelas) Then
        Call GetParcelasDistribuicaoImpostos(intQtd, dblValor, dblIPI, dblDespFinanceira, dblICMSST)
        mdblRestante = dblValor
        While Not MatrizParcelas.EOF
            intParcela = intParcela + 1
            Set Parcela = New cParcela
            Set objMatrizParcela = MatrizParcelas.CurrentObject
            Parcela.Parcela = intParcela
            Parcela.CentroCusto = lngCentroCusto
            'Calcula o total das parcelas
            Call CalculaParcelas(intCont, dblValor, dblIPI, dblDespFinanceira, dblICMSST, objMatrizParcela, Parcela)
            Parcela.vencimento = CDate(strVencimentos(intCont - 1))
            Call GeraDiaVencimentoIntegracao.add(Parcela)
            intCont = intCont + 1
            MatrizParcelas.MoveNext
        Wend
    Else
        Set GeraDiaVencimentoIntegracao = Nothing
    End If
    Exit Function
err_Handler:
    Set GeraDiaVencimentoIntegracao = Nothing
End Function

