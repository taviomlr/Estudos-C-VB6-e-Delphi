VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "clsPagForCNAB240BancoBrasil"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''                                                            ''
''  Implementation of the  Class clsPagForCNAB240BancoBrasil  ''
''  Generated by Enterprise Architect                         ''
''  Created on:      21-out-2008                              ''
''  Original author: Ivo Sousa                                ''
''                                                            ''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

Private mlngBanco       As Long
Private mlngCamara      As Long
Private mlngAgencia     As Long
Private mstrDVAgencia   As String
Private mlngConta       As Long
Private mstrDVConta     As String
Private mstrDVAgConta   As String
Private mlngCodArquivo  As Long
Private mcolErrosLote   As New Collection
Private mcolDocumentos  As New Collection
Private mintContLotes   As Integer
Private mobjArquivo     As cArquivoTexto
Private mintSeqLote     As Integer
Private mblnBaixa       As Boolean

Public Property Let Banco(ByVal NewVal As Long)
    mlngBanco = NewVal
End Property

Public Property Let Camara(ByVal NewVal As Long)
    mlngCamara = NewVal
End Property

Public Property Let Agencia(ByVal NewVal As Long)
    mlngAgencia = NewVal
End Property

Public Property Let DVAgencia(ByVal NewVal As String)
    mstrDVAgencia = NewVal
End Property

Public Property Let conta(ByVal NewVal As Long)
    mlngConta = NewVal
End Property

Public Property Let DVConta(ByVal NewVal As String)
    mstrDVConta = NewVal
End Property

Public Property Let DVAgConta(ByVal NewVal As String)
    mstrDVAgConta = NewVal
End Property

Public Property Get ColErrosLote()
    Set ColErrosLote = mcolErrosLote
End Property

Public Property Get ColDocumentos()
    Set ColDocumentos = mcolDocumentos
End Property

Public Property Let objArquivo(ByVal NewVal As cArquivoTexto)
    Set mobjArquivo = NewVal
End Property

Public Property Let Baixa(ByVal NewVal As Boolean)
    mblnBaixa = NewVal
End Property

Public Function ValidaArquivo(ByRef strErro As String) As Boolean
    Dim intIndex As Integer
    Dim intTipoRegistro As Integer
    Dim strLinha As String
    
    mblnBaixa = False
    
    For intIndex = 1 To mobjArquivo.TotalLinhas
        strLinha = mobjArquivo.getLinha(intIndex)
        If mlngCamara = 237 Then
            intTipoRegistro = StrToInt(Mid(strLinha, 1, 1))
        Else
            intTipoRegistro = StrToInt(Mid(strLinha, 8, 1))
        End If
        
        If intTipoRegistro = 0 Or intTipoRegistro = 1 Then
            Select Case intTipoRegistro
                'Header do Arquivo
                Case 0
                    If mlngCamara = 237 Then
                        mblnBaixa = StrToInt(Mid(strLinha, 68, 1)) = 2
                        If Not ValidaHeaderArquivoBradesco(strErro, mobjArquivo.getLinha(1)) Then
                            ValidaArquivo = False
                            Exit Function
                        End If
                    Else
                        If Not ValidaHeaderArquivo(strErro, strLinha) Then
                            ValidaArquivo = False
                            Exit Function
                        End If
                    End If
                'Header do Lote
                Case 1
                    If mlngCamara = 237 Then
                        mintSeqLote = 1
                        While StrToInt(Mid(mobjArquivo.getLinha(intIndex), 1, 1)) = 1
                            Call ArmazenaRegistro(intIndex)
                            mintSeqLote = mintSeqLote + 1
                            intIndex = intIndex + 1
                        Wend
                    Else
                        If ValidaHeaderLote(strErro, strLinha) Then
                            intIndex = intIndex + 1
                            mintSeqLote = 1
                            While StrToInt(Mid(mobjArquivo.getLinha(intIndex), 8, 1)) = 3
                                With mobjArquivo 'Demanda 222036 - Autor Yuji - Mapeamento do segmento J para o Itaú no retorno
                                    If Mid(.getLinha(intIndex), 14, 1) = "A" Or _
                                    (mlngCamara = 341 And Mid(.getLinha(intIndex), 14, 1) = "J" And _
                                    IsNumeric(Mid(.getLinha(intIndex), 92, 40))) Then
                                        Call ArmazenaRegistro(intIndex)
                                        mintSeqLote = mintSeqLote + 1
                                    End If
                                    intIndex = intIndex + 1
                                End With
                            Wend
                        End If
                    End If
            End Select
        End If
    Next

    If mcolDocumentos.Count > 0 Then
        ValidaArquivo = True
    End If
End Function

Private Function ValidaHeaderArquivo(ByRef strErro As String, strLinha As String) As Boolean
    
On Error GoTo ErroHeaderArquivo
    'Câmara
    If strToLng(Left(strLinha, 3)) <> mlngCamara Then
        strErro = "A câmara do arquivo não corresponde à que foi informada na tela."
        Exit Function
    End If
    'Empresa
    If Mid(strLinha, 73, 30) <> formatCampoStr(EmpresaUsuaria.Razao, 30) Then
        strErro = "O nome da Empresa que consta no arquivo não corresponde à empresa usuária do sistema."
        Exit Function
    End If
    'CNPJ
    If Mid(strLinha, 19, 14) <> formatCampoStr(limpaDOC(EmpresaUsuaria.CNPJ), 14) Then
        strErro = "O CNPJ que consta no arquivo não corresponde ao da empresa usuária do sistema."
        Exit Function
    End If
    'Agência
    If strToLng(Mid(strLinha, 53, 5)) <> mlngAgencia Then
        strErro = "O número da agência do arquivo não corresponde ao que foi informado na tela."
        Exit Function
    End If
    'DV Agência
    If Mid(strLinha, 58, 1) <> mstrDVAgencia Then
        strErro = "O dígito verificador da agência do arquivo não corresponde ao que foi informado na tela."
        Exit Function
    End If
    'Conta
    If strToLng(Mid(strLinha, 59, 12)) <> mlngConta Then
        strErro = "A conta do arquivo não corresponde à que foi informada na tela."
        Exit Function
    End If
    'DV Conta
    If Mid(strLinha, 71, 1) <> mstrDVConta Then
        strErro = "O dígito verificador da conta do arquivo não corresponde ao que foi informado na tela."
        Exit Function
    End If
    'DV Ag/Conta
    If Len(mstrDVAgConta) > 0 Then
        If Mid(strLinha, 72, 1) <> mstrDVAgConta Then
            strErro = "O dígito verificador da conta do arquivo não corresponde ao que foi informado na tela."
            Exit Function
        End If
    End If

    'Busca o código do arquivo de remessa.
    mlngCodArquivo = Mid(strLinha, 158, 6)
    ValidaHeaderArquivo = True
    Exit Function
    
ErroHeaderArquivo:
    strErro = err.Description
End Function

Private Function ValidaHeaderLote(ByRef strErro As String, strLinha As String) As Boolean
    Dim strOcorrPrinc As String
    Dim strOcorr1     As String
    Dim strOcorr2     As String
    Dim strOcorr3     As String
    Dim strOcorr4     As String
    
On Error GoTo ErroHeaderLote
    strOcorrPrinc = Mid(strLinha, 231, 10)
    If Left(strOcorrPrinc, 2) <> "00" Then
        strOcorr1 = GetFieldValue("desc_ocorrencia_retorno", "FFICamaraOcorrenciasRetorno", "cd_ocorrencia_retorno = '" & Mid(strOcorrPrinc, 3, 2) & "'", , "")
        strOcorr2 = GetFieldValue("desc_ocorrencia_retorno", "FFICamaraOcorrenciasRetorno", "cd_ocorrencia_retorno = '" & Mid(strOcorrPrinc, 5, 2) & "'", , "")
        strOcorr3 = GetFieldValue("desc_ocorrencia_retorno", "FFICamaraOcorrenciasRetorno", "cd_ocorrencia_retorno = '" & Mid(strOcorrPrinc, 7, 2) & "'", , "")
        strOcorr4 = GetFieldValue("desc_ocorrencia_retorno", "FFICamaraOcorrenciasRetorno", "cd_ocorrencia_retorno = '" & Mid(strOcorrPrinc, 9, 2) & "'", , "")
        Call mcolErrosLote.add(Mid(strLinha, 4, 4) & ": " & vbNewLine & IIf(Trim(strOcorr1) <> "", " - " & strOcorr1, "") & vbNewLine & IIf(Trim(strOcorr2) <> "", " - " & strOcorr2, "") & vbNewLine & IIf(Trim(strOcorr3) <> "", " - " & strOcorr3, "") & vbNewLine & IIf(Trim(strOcorr4) <> "", " - " & strOcorr4, ""))
    End If
    mintContLotes = mintContLotes + 1
    ValidaHeaderLote = True
    Exit Function
ErroHeaderLote:
    strErro = err.Description
End Function

Private Sub ArmazenaRegistro(intIndex As Integer)
    Dim strLinha        As String
    Dim strTipo         As String
    Dim lngNumeroLote   As Long
    Dim strData         As String
    Dim datLancamento   As Date
    Dim dblValor        As Double
    'Informativo = "I" | Baixa = "B"
    Dim strBaixa        As String
    Dim lngNrDocumento  As Long
    Dim intParcela      As Integer
    ReDim strLoteAux(4) As String
    Dim bItauSegmentoJ As Boolean 'Demanda 222036 - Autor Yuji - Mapeamento do segmento J para o Itaú
    
    strLinha = mobjArquivo.getLinha(intIndex)
    
    bItauSegmentoJ = (mlngCamara = 341 And Mid(strLinha, 14, 1) = "J")
    
    If mlngCamara = 237 Then
        strLoteAux = Split(Trim(Mid(strLinha, 120, 16)), "/")
        lngNumeroLote = strToLng(strLoteAux(0))
        mintSeqLote = StrToInt(strLoteAux(1))
        mlngCodArquivo = strToLng(strLoteAux(2))
        strData = Mid(strLinha, 166, 8)
        datLancamento = CDate(Right(strData, 2) & "/" & Mid(strData, 5, 2) & "/" & Left(strData, 4))
        dblValor = Mid(strLinha, 195, 8) & "," & Mid(strLinha, 203, 2)
    Else
        lngNumeroLote = strToLng(Mid(strLinha, 4, 4))
        strData = Mid(strLinha, IIf(bItauSegmentoJ, 145, 155), 8)
        datLancamento = CDate(Left(strData, 2) & "/" & Mid(strData, 3, 2) & "/" & Right(strData, 4))
        dblValor = Mid(strLinha, IIf(bItauSegmentoJ, 153, 163), 13) & "," & Mid(strLinha, IIf(bItauSegmentoJ, 166, 176), 2)
    End If
    
    Call mcolDocumentos.add(mlngCodArquivo & ";" & lngNumeroLote & ";" & mintSeqLote & ";" & datLancamento & ";" & dblValor & ";" & IIf(mblnBaixa, "Baixa", "Agendado"))
End Sub

Public Function ValidaHeaderArquivoBradesco(ByRef strErro As String, strLinha As String) As Boolean
    Dim objBanco As clsBanco
                
On Error GoTo ErroHeaderArquivo

    If mobjCache Is Nothing Then
        Set mobjCache = New clsCache
    End If
    
    Set objBanco = mobjCache.GetCacheBanco(mlngBanco)
        
    'CNPJ
    If Len(objBanco.CPFCNPJCedente) > 11 Then
        If Mid(strLinha, 12, 15) <> limpaDOC(objBanco.CPFCNPJCedente) Then
            strErro = "O CNPJ que consta no arquivo não corresponde ao da empresa usuária do sistema."
            Exit Function
        End If
    Else
        If Mid(strLinha, 11, 9) & Mid(strLinha, 24, 2) <> limpaDOC(objBanco.CPFCNPJCedente) Then
            strErro = "O CPF que consta no arquivo não corresponde ao da empresa informada no banco."
            Exit Function
        End If
    End If
    'Código do Cedente
    If Mid(strLinha, 2, 8) <> formatCampoInt(objBanco.CodCedente, 8) Then
        strErro = "O Código do Cedente do arquivo não corresponde ao que foi informado no Banco."
        Exit Function
    End If

    'Busca o código do arquivo de remessa.
    'mlngCodArquivo = Mid(strLinha, 158, 6)
    ValidaHeaderArquivoBradesco = True
    Exit Function
    
ErroHeaderArquivo:
    strErro = err.Description
End Function

