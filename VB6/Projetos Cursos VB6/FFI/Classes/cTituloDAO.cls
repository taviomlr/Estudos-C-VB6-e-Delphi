VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cTituloDAO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cTituloDAO
''  Generated by Enterprise Architect
''  Created on:      28-ago-2006 18:41:26
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private mlngNumeroConhecimento As Long
Private mstrTipoConhecimento As String
Private mstrPagRec As String
Private NomeTabela As String
'pt. 82395 - Dulcino Júnior
Private mlngOperacaoContabil As Long
'pt. 86013 - Ivo Sousa(20/05/2008)
Private mlngTransportadora As Long
Private mlngSeqConhecimento As Long
'pt xpto
'Private mlngNumeroConhecimentoNew As Long

Private Sub Class_Initialize()
    NomeTabela = "FreteSaidaDuplicata"
    mstrPagRec = "R"
End Sub

Public Property Let numeroConhecimento(ByVal NewVal As Long)
        mlngNumeroConhecimento = NewVal
End Property

Public Property Get numeroConhecimento() As Long
        numeroConhecimento = mlngNumeroConhecimento
End Property

'Public Property Let numeroConhecimentoNew(ByVal NewVal As Long)
'        mlngNumeroConhecimentoNew = NewVal
'End Property
'
'Public Property Get numeroConhecimentoNew() As Long
'        numeroConhecimentoNew = mlngNumeroConhecimentoNew
'End Property

Public Property Let tipoConhecimento(ByVal NewVal As String)
        mstrTipoConhecimento = NewVal
End Property

Public Property Get tipoConhecimento() As String
        tipoConhecimento = mstrTipoConhecimento
End Property

Public Property Get Tabela() As String
    Tabela = NomeTabela
End Property

Public Property Let Tabela(ByVal NewVal As String)
    NomeTabela = NewVal
End Property

Public Property Get PagRec() As String
    PagRec = mstrPagRec
End Property

Public Property Let PagRec(ByVal NewVal As String)
    mstrPagRec = NewVal
End Property

Public Property Get OperacaoContabil() As Long
    OperacaoContabil = mlngOperacaoContabil
End Property

Public Property Let OperacaoContabil(ByVal NewVal As Long)
    mlngOperacaoContabil = NewVal
End Property

Public Property Get Transportadora() As Long
    Transportadora = mlngTransportadora
End Property

Public Property Let Transportadora(ByVal NewVal As Long)
    mlngTransportadora = NewVal
End Property

Public Property Get SeqConhecimento() As Long
    SeqConhecimento = mlngSeqConhecimento
End Property

Public Property Let SeqConhecimento(ByVal NewVal As Long)
    mlngSeqConhecimento = NewVal
End Property

Public Function persistir(ByVal objTitulo As cTitulo, ByVal objAplicacao As IApplication) As Boolean
    Dim cmd As IDBInsertCommand
    Dim objDuplicata As CDuplicata
    Dim intDiasLiberacao As Integer
    Dim datLiberacao As Date
    
On Error GoTo erro_persistindo
    persistir = True
    With objTitulo
        .parcelas.MoveFirst
        While Not .parcelas.EOF
            Set objDuplicata = New CDuplicata
            objDuplicata.tipo = objTitulo.tipo
            objDuplicata.Empresa = .Empresa
            objDuplicata.Nota = .Nota
            objDuplicata.NossoNumero = .NossoNumero
            objDuplicata.Emissao = .Emissao
            objDuplicata.Descricao = .Descricao
            objDuplicata.Controle = .Controle
            objDuplicata.Banco = .Banco
            objDuplicata.Carteira = .Carteira
            objDuplicata.conta = .conta
            objDuplicata.Centro = .CentroCusto
            objDuplicata.ValorOriginal = .parcelas.CurrentObject.valor
            objDuplicata.vencimento = .parcelas.CurrentObject.vencimento
            'pt. 88523 - Ivo Sousa (24/09/2008)
            If UCase(mstrPagRec) = "R" Then
                If .Banco > 0 Then
                    intDiasLiberacao = GetFieldValue("[Dias para Liberação]", "Bancos", "Banco = " & .Banco, , 0)
                    datLiberacao = .parcelas.CurrentObject.vencimento + intDiasLiberacao
                    Select Case calendario.PermiteLancamento(datLiberacao, , False)
                        Case "A"
                            objDuplicata.Liberacao = datLiberacao
                        Case Else
                            objDuplicata.Liberacao = datLiberacao + NumeroDiasUteisNaoUteis(datLiberacao, 0)
                    End Select
                Else
                    objDuplicata.Liberacao = .parcelas.CurrentObject.vencimento
                End If
            Else
                objDuplicata.Liberacao = .parcelas.CurrentObject.vencimento
            End If
            objDuplicata.Parcela = .parcelas.CurrentObject.Parcela
            objDuplicata.PagRec = mstrPagRec
            objDuplicata.situacao = .situacao
            'pt. 82395 - Dulcino Júnior
            objDuplicata.OperacaoContabil = mlngOperacaoContabil
            If Not objDuplicata.persistir Then
                GoTo erro_persistindo
            Else
                Set cmd = objAplicacao.CreateInsertCommand
                cmd.Table = NomeTabela
                Call cmd.AddValue("nr_conhecimento", "@pNrConhecimento")
                Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngNumeroConhecimento, dbFieldTypeLong))
                Call cmd.AddValue("tp_registro", "@pTpRegistro")
                Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistro", mstrTipoConhecimento, dbFieldTypeString, 20))
                Call cmd.AddValue("pagrec", "@pPagRec")
                Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", objDuplicata.PagRec, dbFieldTypeString, 1))
                Call cmd.AddValue("nota", "@pNota")
                Call cmd.Parameters.add(cmd.CreateParameter("@pNota", mlngNumeroConhecimento, dbFieldTypeLong))
                Call cmd.AddValue("empresa", "@pEmpresa")
                Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", .Empresa, dbFieldTypeString, 15))
                Call cmd.AddValue("tipo", "@pTipo")
                Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", objDuplicata.tipo, dbFieldTypeString, 30))
                Call cmd.AddValue("parcela", "@pParcela")
                Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", objDuplicata.Parcela, dbFieldTypeInt))
                Call cmd.AddValue("cd_condicaopagamento", "@pCondicao")
                Call cmd.Parameters.add(cmd.CreateParameter("@pCondicao", .CondicaoPagamento.Codigo, dbFieldTypeInt))
                Call cmd.AddValue("cd_transportadora", "@pTransportadora")
                Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", mlngTransportadora, dbFieldTypeLong))
                If UCase(mstrPagRec) = "R" Then
                    Call cmd.AddValue("seq_conhecimento", "@pSeqConhecimento")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", mlngSeqConhecimento, dbFieldTypeLong))
                End If
                Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
                Call .parcelas.MoveNext(False)
            End If
        Wend
    End With
    
    Exit Function
erro_persistindo:
    persistir = False
    err.Clear
End Function

Public Function Excluir(ByVal objTitulo As cTitulo, ByVal objAplicacao As IApplication, Optional ByVal strOrigem As String) As Boolean
    Dim objDuplicata As CDuplicata
    Dim objParcela As cParcela
    Dim booPag As Boolean
    Dim cmd As IDBDeleteCommand
On Error GoTo erro_excluindo
    If podeExcluir(objTitulo, objAplicacao) Then
        Excluir = True
        If objTitulo.parcelas Is Nothing Then
            Exit Function
        End If
        With objTitulo
            Set objDuplicata = New CDuplicata
            booPag = UCase(mstrPagRec) = "P"
            .parcelas.MoveFirst
            While Not .parcelas.EOF
                Set objParcela = .parcelas.CurrentObject
                If objDuplicata.Excluir(booPag, mlngNumeroConhecimento, .Empresa, mstrTipoConhecimento, objParcela.Parcela, strOrigem) Then
                    Set cmd = objAplicacao.CreateDeleteCommand
                    cmd.Table = NomeTabela
                    Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngNumeroConhecimento, dbFieldTypeLong))
                    Call cmd.Filter.Append("tp_registro = @pTpRegistro")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistro", mstrTipoConhecimento, dbFieldTypeString, 20))
                    Call cmd.Filter.Append("pagrec = @pPagRec")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", mstrPagRec, dbFieldTypeString, 1))
                    Call cmd.Filter.Append("nota = @pNota")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", mlngNumeroConhecimento, dbFieldTypeLong))
                    Call cmd.Filter.Append("empresa = @pEmpresa")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", .Empresa, dbFieldTypeString, 15))
                    Call cmd.Filter.Append("tipo = @pTipo")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", mstrTipoConhecimento, dbFieldTypeString, 20))
                    Call cmd.Filter.Append("parcela = @pParcela")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", objParcela.Parcela, dbFieldTypeInt))
                    Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
                    Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", mlngTransportadora, dbFieldTypeLong))
                    If UCase(mstrPagRec) = "R" Then
                        Call cmd.Filter.Append("seq_conhecimento = @pSeqConhecimento")
                        Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", mlngSeqConhecimento, dbFieldTypeLong))
                    End If
                    Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
                    Call .parcelas.MoveNext(False)
                Else
                    GoTo erro_excluindo
                End If
            Wend
        End With
    Else
        Excluir = False
    End If
    Exit Function
erro_excluindo:
    err.Clear
    Excluir = False
End Function

Private Function podeExcluir(ByVal objTitulo As cTitulo, ByRef objAplicacao As IApplication) As Boolean
    Dim objDuplicata As CDuplicata
    Dim objParcela As cParcela
    Dim booPag As Boolean
On Error GoTo erro_verificando
    podeExcluir = True
    booPag = (mstrPagRec = "P")
    If objTitulo.parcelas Is Nothing Then
        Exit Function
    End If
    With objTitulo
        Set objDuplicata = New CDuplicata
        .parcelas.MoveFirst
        While Not .parcelas.EOF
            Set objParcela = .parcelas.CurrentObject
            If objDuplicata.isQuitada(booPag, mlngNumeroConhecimento, .Empresa, .tipo, objParcela.Parcela) Or objDuplicata.isNormal(False, mlngNumeroConhecimento, .Empresa, .tipo, objParcela.Parcela) Then
                GoTo erro_verificando
            End If
            Call .parcelas.MoveNext(False)
        Wend
    End With
    Exit Function
erro_verificando:
    podeExcluir = False
    err.Clear
End Function

Public Function carrega(Optional lngTranportadora As Long) As cTitulo
Dim rdResult As IDBReader
Dim cmd As IDBSelectCommand
Dim booPag As Boolean
On Error GoTo erro_carregando
    Set carrega = New cTitulo
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngNumeroConhecimento, dbFieldTypeLong))
    Call cmd.Filter.Append("tp_registro = @pTpRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistro", mstrTipoConhecimento, dbFieldTypeString, 20))
    If UCase(mstrPagRec) = "R" Then
        Call cmd.Filter.Append("seq_conhecimento = @pSeqConhecimento")
        Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", mlngSeqConhecimento, dbFieldTypeLong))
    End If
    'pt. 86013 - Ivo Sousa(20/05/2008)
    If lngTranportadora > 0 Then
        Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", lngTranportadora, dbFieldTypeLong))
    End If
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        Set carrega = carrega.CriarObjeto(rdResult)
    End If
    Aplicacao.Disconnect
    Exit Function
erro_carregando:
    err.Clear
    Set carrega = New cTitulo
End Function

Public Function AtualizaNumeroConhecimeto(ByVal lngNumeroConhecimento As Long, ByVal strTipoConhecimento As String, ByVal lngTranportadora As Long, ByVal lngNumeroConhecimentoNovo As Long, objApp As IApplication) As Boolean
    Dim cmd As IDBUpdateCommand
    Dim rdResult As IDBReader
    'Dim bolAtualizaConhecimento As Boolean
    
On Error GoTo erro_atualizando
    Set cmd = objApp.CreateUpdateCommand
    cmd.Table = NomeTabela
       
    'Filtros
       
    Call cmd.Filter.Append("nr_conhecimento = @pNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", lngNumeroConhecimento, dbFieldTypeLong))
    
    Call cmd.Filter.Append("tp_registro = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipoConhecimento, dbFieldTypeString, 20))
    
    Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", lngTranportadora, dbFieldTypeLong))
 
    'Novo Número
    
    Call cmd.AddValue("nr_conhecimento", "@pNovoNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNovoNumero", lngNumeroConhecimentoNovo, dbFieldTypeLong))
        
    Call cmd.AddValue("nota", "@pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNumeroConhecimentoNovo, dbFieldTypeLong))
        
    AtualizaNumeroConhecimeto = objApp.ExecuteUpdate(objApp.GetInternalAuthorization, cmd)
    Exit Function

erro_atualizando:
    AtualizaNumeroConhecimeto = False
End Function

Public Function podeAlterar(ByVal objTitulo As cTitulo) As Boolean
    Aplicacao.Connect
    podeAlterar = podeExcluir(objTitulo, Aplicacao)
    Aplicacao.Disconnect
End Function

Public Function Alterar(ByVal objTitulo As cTitulo, ByRef objAplicacao, Optional lngNumeroConhecimentoOld As Long) As Boolean
    Dim objParcela As cParcela
    Dim objDuplicata As New CDuplicata
    Dim booPag As Boolean
    Dim booCarregouDuplicata As Boolean
    
On Error GoTo erro_alterando
    With objTitulo
        .parcelas.MoveFirst
        Alterar = True
        booPag = (mstrPagRec = "P")
        While Not .parcelas.EOF
            Set objParcela = .parcelas.CurrentObject
            
            If lngNumeroConhecimentoOld <> 0 Then
                booCarregouDuplicata = objDuplicata.Carregar(mstrPagRec, lngNumeroConhecimentoOld, .Empresa, mstrTipoConhecimento, objParcela.Parcela)
                objDuplicata.Nota = mlngNumeroConhecimento
            Else
                booCarregouDuplicata = objDuplicata.Carregar(mstrPagRec, mlngNumeroConhecimento, .Empresa, mstrTipoConhecimento, objParcela.Parcela)
            End If
            
            'If objDuplicata.Carregar(mstrPagRec, mlngNumeroConhecimento, .Empresa, mstrTipoConhecimento, objParcela.Parcela) Then
            If booCarregouDuplicata Then
                objDuplicata.Banco = .Banco
                objDuplicata.conta = .conta
                objDuplicata.Descricao = .Descricao
                objDuplicata.Centro = .CentroCusto
                objDuplicata.Controle = .Controle
                objDuplicata.Carteira = .Carteira
                'pt. 82395 - Dulcino Júnior
                objDuplicata.OperacaoContabil = mlngOperacaoContabil
                If Not objDuplicata.Alterar(booPag, mlngNumeroConhecimento, .Empresa, mstrTipoConhecimento, objParcela.Parcela, lngNumeroConhecimentoOld) Then
                    GoTo erro_alterando
                End If
            Else
                GoTo erro_alterando
            End If
            Call .parcelas.MoveNext(False)
        Wend
    End With
    Exit Function
erro_alterando:
    err.Clear
    Aplicacao.RollbackTransaction
    Alterar = False
End Function
