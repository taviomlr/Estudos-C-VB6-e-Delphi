VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "CDuplicata"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class CDuplicata
''  Generated by Enterprise Architect
''  Created on:      17-ago-2006 10:06:54
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private mstrPagRec As String
Private mlngNota As Double
Private mstrEmpresa As String
Private mstrTipo As String
Private mintParcela As Integer
Private mstrDescricao As String
Private mdatEmissao As Date
Private mdatVencimento As Date
Private mdatPagamento As Date
Private mdatLiberacao As Date
Private mcurValorOriginal As Currency
Private mcurAcrescimo As Currency
Private mcurAbatimento As Currency
Private mlngBanco As Long
Private mlngConta As Long
Private mlngCentro As Long
Private mlngCheque As Long
Private mstrMoeda As String
Private mcurValorMoeda As Currency
Private mstrControle As Variant
Private mstrSituacao As String
Private mstrEnviada As String
Private mbooMarcacao As Boolean
Private mlngBordero As Long
Private msngComissao As Single
Private mstrObservacao As String
Private mdatIntegracaoFatoGerador As Date
Private mdatIntegracaoFatoPagamento As Date
Private mstrLinhaDigitavelImprimivel As String
Private mstrUsuario As String
Private mdatAlteracao As Date
Private mbooConciliado As Boolean
Private mstrCarteira As String
'Projeto: #4350 - História: #4336 - Desenvolvimento: #5286 - Ivo Sousa(26/02/2013)
Private mstrSeqNossoNumero As String
Private mcurValorMoraDiaria As Currency
Private mcurPercentualMoraDiaria As Currency
Private mcurValorDescontoPontualidade As Currency
Private mcurPercentualJuros As Currency
Private mcurValorJuros As Currency
Private mlngCodigoProjeto As Long
Private mlngCodigoTipoTitulo As Long
Private mlngChequeBanco As Long
Private mstrChequeAgencia As String
Private mstrChequeEmitente As String
Private mstrChequeContaCorrente As String
Private mcurPercentualMulta As Currency
Private mcurValorMulta As Currency
Private mstrCodigoBarras As String
Private mstrNossoNumero As String
Private mstrAgenciaCedente As String
Private mstrLocalPagamento As String
Private mstrInstrucoes As String
Private mstrMensagem As String
Private mlngOperacaoContabil As Long
Private mlngOperacaoBaixa As Long
Private mlngTransportadora As Long
Private Const NomeTabela As String = "Duplicatas"

Public Property Get Abatimento() As Currency
        Abatimento = mcurAbatimento
End Property

Public Property Let Abatimento(ByVal NewVal As Currency)
        mcurAbatimento = NewVal
End Property

Public Property Get Acrescimo() As Currency
        Acrescimo = mcurAcrescimo
End Property

Public Property Let Acrescimo(ByVal NewVal As Currency)
        mcurAcrescimo = NewVal
End Property

Public Property Let Alteracao(ByVal NewVal As Date)
        mdatAlteracao = NewVal
End Property

Public Property Get Alteracao() As Date
        Alteracao = mdatAlteracao
End Property

Public Property Let Banco(ByVal NewVal As Long)
        mlngBanco = NewVal
End Property

Public Property Get Banco() As Long
        Banco = mlngBanco
End Property

Public Property Let Bordero(ByVal NewVal As Long)
        mlngBordero = NewVal
End Property

Public Property Get Bordero() As Long
        Bordero = mlngBordero
End Property

Public Property Let Carteira(ByVal NewVal As String)
        mstrCarteira = NewVal
End Property

Public Property Get Carteira() As String
        Carteira = mstrCarteira
End Property

Public Property Get Centro() As Long
        Centro = mlngCentro
End Property

Public Property Let Centro(ByVal NewVal As Long)
        mlngCentro = NewVal
End Property

Public Property Let Cheque(ByVal NewVal As Long)
        mlngCheque = NewVal
End Property

Public Property Get Cheque() As Long
        Cheque = mlngCheque
End Property

Public Property Let chequeAgencia(ByVal NewVal As String)
        mstrChequeAgencia = NewVal
End Property

Public Property Get chequeAgencia() As String
        chequeAgencia = mstrChequeAgencia
End Property

Public Property Get chequeBanco() As Long
        chequeBanco = mlngChequeBanco
End Property

Public Property Let chequeBanco(ByVal NewVal As Long)
        mlngChequeBanco = NewVal
End Property

Public Property Get chequeContaCorrente() As String
        chequeContaCorrente = mstrChequeContaCorrente
End Property

Public Property Let chequeContaCorrente(ByVal NewVal As String)
        mstrChequeContaCorrente = NewVal
End Property

Public Property Let chequeEmitente(ByVal NewVal As String)
        mstrChequeEmitente = NewVal
End Property

Public Property Get chequeEmitente() As String
        chequeEmitente = mstrChequeEmitente
End Property

Public Property Get CodigoBarras() As String
        CodigoBarras = mstrCodigoBarras
End Property

Public Property Let CodigoBarras(ByVal NewVal As String)
        mstrCodigoBarras = NewVal
End Property

Public Property Get codigoProjeto() As Long
        codigoProjeto = mlngCodigoProjeto
End Property

Public Property Let codigoProjeto(ByVal NewVal As Long)
        mlngCodigoProjeto = NewVal
End Property

Public Property Let codigoTipoTitulo(ByVal NewVal As Long)
        mlngCodigoTipoTitulo = NewVal
End Property

Public Property Get codigoTipoTitulo() As Long
        codigoTipoTitulo = mlngCodigoTipoTitulo
End Property

Public Property Let Comissao(ByVal NewVal As Single)
        msngComissao = NewVal
End Property

Public Property Get Comissao() As Single
        Comissao = msngComissao
End Property

Public Property Let Conciliado(ByVal NewVal As Boolean)
        mbooConciliado = NewVal
End Property

Public Property Get Conciliado() As Boolean
        Conciliado = mbooConciliado
End Property

Public Property Get conta() As Long
        conta = mlngConta
End Property

Public Property Let conta(ByVal NewVal As Long)
        mlngConta = NewVal
End Property

Public Property Get Controle() As Variant
        Controle = mstrControle
End Property

Public Property Let Controle(ByVal NewVal As Variant)
        mstrControle = NewVal
End Property

Public Property Get Descricao() As String
        Descricao = mstrDescricao
End Property

Public Property Let Descricao(ByVal NewVal As String)
        mstrDescricao = NewVal
End Property

Public Property Get Emissao() As Date
        Emissao = mdatEmissao
End Property

Public Property Let Emissao(ByVal NewVal As Date)
        mdatEmissao = NewVal
End Property

Public Property Let Empresa(ByVal NewVal As String)
        mstrEmpresa = NewVal
End Property

Public Property Get Empresa() As String
        Empresa = mstrEmpresa
End Property

Public Property Let enviada(ByVal NewVal As String)
        mstrEnviada = NewVal
End Property

Public Property Get enviada() As String
        enviada = mstrEnviada
End Property

Public Property Get integracaoFatoGerador() As Date
        integracaoFatoGerador = mdatIntegracaoFatoGerador
End Property

Public Property Let integracaoFatoGerador(ByVal NewVal As Date)
        mdatIntegracaoFatoGerador = NewVal
End Property

Public Property Let integracaoFatoPagamento(ByVal NewVal As Date)
        mdatIntegracaoFatoPagamento = NewVal
End Property

Public Property Get integracaoFatoPagamento() As Date
        integracaoFatoPagamento = mdatIntegracaoFatoPagamento
End Property

Public Property Let Liberacao(ByVal NewVal As Date)
        mdatLiberacao = NewVal
End Property

Public Property Get Liberacao() As Date
        Liberacao = mdatLiberacao
End Property

Public Property Let linhaDigitavelImprimivel(ByVal NewVal As String)
        mstrLinhaDigitavelImprimivel = NewVal
End Property

Public Property Get linhaDigitavelImprimivel() As String
        linhaDigitavelImprimivel = mstrLinhaDigitavelImprimivel
End Property

Public Property Get Marcacao() As Boolean
        Marcacao = mbooMarcacao
End Property

Public Property Let Marcacao(ByVal NewVal As Boolean)
    mbooMarcacao = NewVal
End Property

Public Property Let Moeda(ByVal NewVal As String)
    mstrMoeda = NewVal
End Property

Public Property Get Moeda() As String
    Moeda = mstrMoeda
End Property

'Projeto: #4350 - História: #4336 - Desenvolvimento: #5286 - Ivo Sousa(26/02/2013)
Public Property Let sequencialNossoNumero(ByVal NewVal As String)
    mstrSeqNossoNumero = NewVal
End Property

Public Property Get sequencialNossoNumero() As String
    sequencialNossoNumero = mstrSeqNossoNumero
End Property

Public Property Get Nota() As Double
    Nota = mlngNota
End Property

Public Property Let Nota(ByVal NewVal As Double)
    mlngNota = NewVal
End Property

Public Property Let Observacao(ByVal NewVal As String)
    mstrObservacao = NewVal
End Property

Public Property Get Observacao() As String
    Observacao = mstrObservacao
End Property

Public Property Let Pagamento(ByVal NewVal As Date)
        mdatPagamento = NewVal
End Property

Public Property Get Pagamento() As Date
        Pagamento = mdatPagamento
End Property

Public Property Get PagRec() As String
        PagRec = mstrPagRec
End Property

Public Property Let PagRec(ByVal NewVal As String)
        mstrPagRec = NewVal
End Property

Public Property Get Parcela() As Integer
        Parcela = mintParcela
End Property

Public Property Let Parcela(ByVal NewVal As Integer)
        mintParcela = NewVal
End Property

Public Property Get percentualJuros() As Currency
        percentualJuros = mcurPercentualJuros
End Property

Public Property Let percentualJuros(ByVal NewVal As Currency)
        mcurPercentualJuros = NewVal
End Property

Public Property Get percentualMoraDiaria() As Currency
        percentualMoraDiaria = mcurPercentualMoraDiaria
End Property

Public Property Let percentualMoraDiaria(ByVal NewVal As Currency)
        mcurPercentualMoraDiaria = NewVal
End Property

Public Property Get percentualMulta() As Currency
        percentualMulta = mcurPercentualMulta
End Property

Public Property Let percentualMulta(ByVal NewVal As Currency)
        mcurPercentualMulta = NewVal
End Property

Public Property Let Situacao(ByVal NewVal As String)
        mstrSituacao = NewVal
End Property

Public Property Get Situacao() As String
        Situacao = mstrSituacao
End Property

Public Property Let Transportadora(ByVal NewVal As Long)
        mlngTransportadora = NewVal
End Property

Public Property Get Transportadora() As Long
        Transportadora = mlngTransportadora
End Property

Public Property Let Tipo(ByVal NewVal As String)
    Dim DAOMatriz As New cMatrizContabilizacaoDAO
    Dim matriz    As cMatrizContabilizacao
    
    mstrTipo = NewVal
    'pt. 82037 - Dulcino Júnior
    Set matriz = DAOMatriz.Carregar(NewVal)
    If Not matriz Is Nothing Then
        If mstrPagRec = "P" Then
            mlngOperacaoContabil = matriz.duplicatasPagar
        Else
            mlngOperacaoContabil = matriz.duplicatasReceber
        End If
    End If
    Set matriz = Nothing
    Set DAOMatriz = Nothing
End Property

Public Property Get Tipo() As String
        Tipo = mstrTipo
End Property

Public Property Get usuario() As String
        usuario = mstrUsuario
End Property

Public Property Let usuario(ByVal NewVal As String)
        mstrUsuario = NewVal
End Property

Public Property Get valorDescontoPontualidade() As Currency
        valorDescontoPontualidade = mcurValorDescontoPontualidade
End Property

Public Property Let valorDescontoPontualidade(ByVal NewVal As Currency)
        mcurValorDescontoPontualidade = NewVal
End Property

Public Property Let valorJuros(ByVal NewVal As Currency)
        mcurValorJuros = NewVal
End Property

Public Property Get valorJuros() As Currency
        valorJuros = mcurValorJuros
End Property

Public Property Get valorMoeda() As Currency
        valorMoeda = mcurValorMoeda
End Property

Public Property Let valorMoeda(ByVal NewVal As Currency)
        mcurValorMoeda = NewVal
End Property

Public Property Let valorMoraDiaria(ByVal NewVal As Currency)
        mcurValorMoraDiaria = NewVal
End Property

Public Property Get valorMoraDiaria() As Currency
        valorMoraDiaria = mcurValorMoraDiaria
End Property

Public Property Let valorMulta(ByVal NewVal As Currency)
        mcurValorMulta = NewVal
End Property

Public Property Get valorMulta() As Currency
        valorMulta = mcurValorMulta
End Property

Public Property Get ValorOriginal() As Currency
        ValorOriginal = mcurValorOriginal
End Property

Public Property Let ValorOriginal(ByVal NewVal As Currency)
        mcurValorOriginal = NewVal
End Property

Public Property Get Vencimento() As Date
        Vencimento = mdatVencimento
End Property

Public Property Let Vencimento(ByVal NewVal As Date)
        mdatVencimento = NewVal
End Property

Public Property Get NossoNumero() As String
        NossoNumero = mstrNossoNumero
End Property

Public Property Let NossoNumero(ByVal NewVal As String)
        mstrNossoNumero = NewVal
End Property

Public Property Get agenciaCedente() As String
        agenciaCedente = mstrAgenciaCedente
End Property

Public Property Let agenciaCedente(ByVal NewVal As String)
        mstrAgenciaCedente = NewVal
End Property

Public Property Get localPagamento() As String
        localPagamento = mstrLocalPagamento
End Property

Public Property Let localPagamento(ByVal NewVal As String)
        mstrLocalPagamento = NewVal
End Property

Public Property Get instrucoes() As String
        instrucoes = mstrInstrucoes
End Property

Public Property Let instrucoes(ByVal NewVal As String)
        mstrInstrucoes = NewVal
End Property

Public Property Get MsgErro() As String
        MsgErro = mstrMensagem
End Property

Public Property Get OperacaoContabil() As Long
    OperacaoContabil = mlngOperacaoContabil
End Property

Public Property Let OperacaoContabil(ByVal NewVal As Long)
    mlngOperacaoContabil = NewVal
End Property

'Metodo equivalente ao metodo construtor da classe
Public Sub Class_Initialize()
    mstrPagRec = "P"
    mlngNota = 0
    mstrTipo = "Fatura"
    mintParcela = 0
    mdatEmissao = Date
    mdatVencimento = Date
    mdatLiberacao = Date
    mstrSituacao = "Normal"
    mbooMarcacao = False
    mdatAlteracao = Date
    mbooConciliado = False
End Sub

Public Function persistir() As Boolean
    Dim cmd As IDBInsertCommand
On Error GoTo erro_persistindo
    persistir = True
    If Not existeKIF Then Exit Function
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateInsertCommand
    cmd.Table = NomeTabela
    Call cmd.AddValue("PagRec", "@pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", mstrPagRec, dbFieldTypeString, 1))
    Call cmd.AddValue("Nota", "@pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", mlngNota, dbFieldTypeDouble))
    Call cmd.AddValue("Empresa", "@pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", mstrEmpresa, dbFieldTypeString, 15))
    Call cmd.AddValue("Tipo", "@pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", mstrTipo, dbFieldTypeString, 30))
    Call PrepareCommand(cmd, False)
    Call Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd)
    Aplicacao.Disconnect
    Set cmd = Nothing
    Exit Function
erro_persistindo:
    err.Clear
    persistir = False
End Function

Public Function Carregar(ByVal strPagRec As String, ByVal lngNota As Long, ByVal strEmpresa As String, ByVal strTipo As String, ByVal intParcela As Integer) As Boolean
Dim cmd As IDBSelectCommand
Dim rdResult As IDBReader
On Error GoTo erro_carregando
    'carregar = True
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString, 1))
    Call cmd.Filter.Append("Nota = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeLong))
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString, 15))
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString, 30))
    Call cmd.Filter.Append("Parcela = @pParcela")
    Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", intParcela, dbFieldTypeInt))
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    With rdResult
        If Not .EOF Then
            mstrPagRec = .GetString("pagrec")
            mlngNota = .GetDouble("Nota")
            mstrEmpresa = .GetString("Empresa")
            mstrTipo = .GetString("Tipo")
            mintParcela = .GetInteger("Parcela")
            mdatEmissao = .GetDate("Emissão")
            mdatVencimento = .GetDate("Vencimento")
            mdatLiberacao = .GetDate("Liberação")
            mdatPagamento = .GetDate("Pagamento")
            mcurValorOriginal = CCur(.GetDouble("Valor Original"))
            mstrMoeda = .GetString("Moeda")
            mstrUsuario = .GetString("Usuário")
            mdatAlteracao = .GetDate("Alteração")
            mbooMarcacao = .GetBoolean("Marcação")
            mstrDescricao = .GetString("Descrição")
            mcurAcrescimo = CCur(.GetDouble("Acréscimo"))
            mcurAbatimento = CCur(.GetDouble("Abatimento"))
            mlngBanco = .GetLong("Banco")
            mlngConta = .GetLong("Conta")
            mlngCentro = .GetLong("Centro")
            mlngCheque = .GetLong("Cheque")
            mcurValorMoeda = CCur(.GetDouble("Valor da Moeda"))
            mstrControle = .GetString("Controle")
            mstrSituacao = .GetString("Situação")
            mlngBordero = .GetLong("Borderô")
            msngComissao = .GetValue("Comissão")
            mstrObservacao = .GetString("Obs")
            mdatIntegracaoFatoGerador = .GetDate("Data Integração Fato Gerador")
            mdatIntegracaoFatoPagamento = .GetDate("Data Integração Fato Pagamento")
            mstrLinhaDigitavelImprimivel = .GetString("LINDIG")
            mbooConciliado = .GetBoolean("Conciliado")
            mstrCarteira = .GetString("Carteira")
            mstrSeqNossoNumero = .GetString("SeqNossoNumero")
            mcurValorMoraDiaria = CCur(.GetDouble("VlrMrD"))
            mcurPercentualMoraDiaria = CCur(.GetDouble("PerMrD"))
            mcurValorDescontoPontualidade = CCur(.GetDouble("VlrDsP"))
            mcurPercentualJuros = CCur(.GetDouble("PerJur"))
            mcurValorJuros = CCur(.GetDouble("VlrJur"))
            mlngCodigoProjeto = .GetLong("CODPRJ")
            mlngCodigoTipoTitulo = .GetLong("CODFPG")
            mlngChequeBanco = .GetLong("CheBan")
            mstrChequeAgencia = .GetString("CheAge")
            mstrChequeEmitente = .GetString("CheEmi")
            mstrChequeContaCorrente = .GetString("CheCco")
            mcurPercentualMulta = CCur(.GetDouble("PerMul"))
            mcurValorMulta = CCur(.GetDouble("VlrMul"))
            mstrCodigoBarras = .GetString("CODBAR")
            mstrNossoNumero = .GetString("NOSNUM")
            mstrAgenciaCedente = .GetString("AGECCE")
            mstrLocalPagamento = .GetString("LOCPAG")
            mstrInstrucoes = .GetString("INSTRU")
            mlngOperacaoContabil = .GetLong("cd_operacao_contabil")
            Carregar = True
        End If
    End With
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function
erro_carregando:
    err.Clear
    Carregar = False
End Function

Public Function alterar(ByVal booPagamento As Boolean, ByVal lngNota As Long, ByVal strEmpresa As String, ByVal strTipo As String, ByVal intParcela As Integer, Optional lngNumeroConhecimentoOld As Long) As Boolean
    Dim cmd As IDBUpdateCommand
On Error GoTo erro_alterando
    alterar = True
    If Not existeKIF Then Exit Function
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateUpdateCommand
    Call cmd.Filter.Append("PagRec = @pPagRec")
    If booPagamento Then
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "P", dbFieldTypeString, 1))
    Else
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "R", dbFieldTypeString, 1))
    End If
    cmd.Table = NomeTabela
    Call cmd.Filter.Append("Nota = @pCriterioNota")

    If lngNumeroConhecimentoOld <> 0 Then
        Call cmd.Parameters.add(cmd.CreateParameter("@pCriterioNota", lngNumeroConhecimentoOld, dbFieldTypeLong))
    Else
        Call cmd.Parameters.add(cmd.CreateParameter("@pCriterioNota", lngNota, dbFieldTypeLong))
    End If
    Call cmd.Filter.Append("Empresa = @pEmpresaCriterio")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresaCriterio", strEmpresa, dbFieldTypeString, 15))
    Call cmd.Filter.Append("Tipo = @pTipoCriterio")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipoCriterio", strTipo, dbFieldTypeString, 30))
    Call cmd.Filter.Append("Parcela = @pParcCriterio")
    Call cmd.Parameters.add(cmd.CreateParameter("@pParcCriterio", intParcela, dbFieldTypeInt))
    Call PrepareCommand(cmd, True)
    
    If lngNumeroConhecimentoOld <> 0 Then
        Call cmd.AddValue("Nota", "@pNota")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeLong))
    Else
        Call cmd.AddValue("Nota", "@pNota")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNumeroConhecimentoOld, dbFieldTypeLong))
    End If
    
    Call Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd)
    Aplicacao.Disconnect
    Exit Function
erro_alterando:
    err.Clear
    alterar = False
End Function

'Demanda 131996 - Davi Brito - 22/07/2016
Public Function TemRemessa(strTabela As String, lngNota As Double, ByVal strEmpresa As String, ByVal strPagRec As String, ByVal strTipo As String, ByVal dtVencimento As Date) As Boolean
    Dim cmd            As IDBSelectCommand
    Dim rdResult       As IDBReader

On Error GoTo erro_consultando

    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    
    cmd.Table.TableName = strTabela

    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString))
    
    If LCase(strTabela) = "lançamentos" Then
        Call cmd.Filter.Append("Código = @pCod")
        
    Else
        Call cmd.Filter.Append("Nota = @pCod")
    End If
    
    Call cmd.Parameters.add(cmd.CreateParameter("@pCod", lngNota, dbFieldTypeDouble))

    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString))

    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString))

    Call cmd.Filter.Append("Liberação <> @pLib")
    Call cmd.Parameters.add(cmd.CreateParameter("@pLib", DB_NULL.dbNull, dbFieldTypeDate))

    Call cmd.Filter.Append("Vencimento = @pDtVen")
    Call cmd.Parameters.add(cmd.CreateParameter("@pDtVen", dtVencimento, dbFieldTypeDate))

    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)

    If Not rdResult.EOF Then
        TemRemessa = rdResult.GetValue("remessa")
    Else
        TemRemessa = False
    End If

    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    TemRemessa = False
    Aplicacao.Disconnect
End Function

'Projeto: #4350 - História: #4345 - Desenvolvimento#5762 - João Henrique(13/03/2013)
Public Function AlterarDuplicata(ByVal booPagamento As Boolean, ByVal lngNota As Long, ByVal strEmpresa As String, ByVal strTipo As String, ByVal intParcela As Integer) As Boolean
    Dim cmd As IDBUpdateCommand
On Error GoTo erro_alterando
    AlterarDuplicata = True
    If Not existeKIF Then Exit Function
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateUpdateCommand
    Call cmd.Filter.Append("PagRec = @pPagRec")
    If booPagamento Then
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "P", dbFieldTypeString, 1))
    Else
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "R", dbFieldTypeString, 1))
    End If
    cmd.Table = NomeTabela
    
    Call cmd.Filter.Append("Nota = @pCriterioNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pCriterioNota", lngNota, dbFieldTypeLong))
    
    Call cmd.Filter.Append("Tipo = @pTipoCriterio")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipoCriterio", strTipo, dbFieldTypeString, 30))
    
    Call cmd.Filter.Append("Parcela = @pParcCriterio")
    Call cmd.Parameters.add(cmd.CreateParameter("@pParcCriterio", intParcela, dbFieldTypeInt))
    
    'Mauricio - 09/04/2015 - Projeto:#64679 Desenvolvimento:#73674
    Call cmd.Filter.Append("PAGAMENTO IS NULL")
    'Fim Mauricio - 09/04/2015
    
        
    Call cmd.AddValue("Empresa", "@pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString, 15))
    
    Call cmd.AddValue("Nota", "@pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeLong))
    
    'Projeto: #35566 - História: # - Desenvolvimento#43993 -  Vinicius Alexandre Elyseu (06/08/2014)
    Call cmd.AddValue("integracao_bi", "@pIntegracaoBI")
    Call cmd.Parameters.add(cmd.CreateParameter("@pIntegracaoBI", 0, dbFieldTypeLong))
    
    Call PrepareCommand(cmd, True)
    
    AlterarDuplicata = (Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd) = 1)
    
    Aplicacao.Disconnect
    Exit Function
erro_alterando:
    err.Clear
    AlterarDuplicata = False
End Function


Public Sub PrepareCommand(ByRef cmd As Object, blnAlteracao As Boolean)
    With cmd
        If Not blnAlteracao Then
            Call .AddValue("Parcela", "@pParcela")
            Call .Parameters.add(.CreateParameter("@pParcela", mintParcela, dbFieldTypeInt))
        End If
        Call .AddValue("Emissão", "@pEmissao")
        Call .Parameters.add(.CreateParameter("@pEmissao", mdatEmissao, dbFieldTypeDate))
        Call .AddValue("Vencimento", "@pVencimento")
        Call .Parameters.add(.CreateParameter("@pVencimento", mdatVencimento, dbFieldTypeDate))
        Call .AddValue("Liberação", "@pLiberacao")
        Call .Parameters.add(.CreateParameter("@pLiberacao", mdatLiberacao, dbFieldTypeDate))
        Call .AddValue("[Valor Original]", "@pValorOriginal")
        Call .Parameters.add(.CreateParameter("@pValorOriginal", mcurValorOriginal, dbFieldTypeDouble))
        Call .AddValue("Moeda", "@pMoeda")
        Call .Parameters.add(.CreateParameter("@pMoeda", mstrMoeda, dbFieldTypeString, 10))
        Call .AddValue("Usuário", "@pUsuario")
        Call .Parameters.add(.CreateParameter("@pUsuario", UserName, dbFieldTypeString, 20))
        Call .AddValue("Alteração", "@pAlteracao")
        Call .Parameters.add(.CreateParameter("@pAlteracao", Date, dbFieldTypeDate))
        Call .AddValue("Marcação", "@pMarcacao")
        Call .Parameters.add(.CreateParameter("@pMarcacao", mbooMarcacao, dbFieldTypeBool))
        If mstrDescricao <> "" Then
            Call .AddValue("Descrição", "@pDescricao")
            Call .Parameters.add(.CreateParameter("@pDescricao", mstrDescricao, dbFieldTypeString, 80))
        End If
        If mcurAcrescimo > 0 Then
            Call .AddValue("Acréscimo", "@pAcrescimo")
            Call .Parameters.add(.CreateParameter("@pAcrescimo", mcurAcrescimo, dbFieldTypeDouble))
        End If
        If mcurAbatimento > 0 Then
            Call .AddValue("Abatimento", "@pAbatimento")
            Call .Parameters.add(.CreateParameter("@pAbatimento", mcurAbatimento, dbFieldTypeDouble))
        End If
        If Banco > 0 Then
            Call .AddValue("Banco", "@pBanco")
            Call .Parameters.add(.CreateParameter("@pBanco", mlngBanco, dbFieldTypeLong))
        End If
        If mlngConta > 0 Then
            Call .AddValue("Conta", "@pConta")
            Call .Parameters.add(.CreateParameter("@pConta", mlngConta, dbFieldTypeLong))
        End If
        If mlngCentro > 0 Then
            Call .AddValue("Centro", "@pCentro")
            Call .Parameters.add(.CreateParameter("@pCentro", mlngCentro, dbFieldTypeLong))
        End If
        If mlngCheque > 0 Then
            Call .AddValue("Cheque", "@pCheque")
            Call .Parameters.add(.CreateParameter("@pCheque", mlngCheque, dbFieldTypeLong))
        End If
        If mcurValorMoeda > 0 Then
            Call .AddValue("Valor da Moeda", "@pValorMoeda")
            Call .Parameters.add(.CreateParameter("@pValorMoeda", mcurValorMoeda, dbFieldTypeDouble))
        End If
        If mstrControle <> "" Then
            Call .AddValue("Controle", "@pControle")
            Call .Parameters.add(.CreateParameter("@pControle", mstrControle, dbFieldTypeString, 18))
        End If
        If mstrSituacao <> "" Then
            Call .AddValue("Situação", "@pSituacao")
            Call .Parameters.add(.CreateParameter("@pSituacao", mstrSituacao, dbFieldTypeString, 30))
        End If
        If mlngBordero > 0 Then
            Call .AddValue("Borderô", "@pBordero")
            Call .Parameters.add(.CreateParameter("@pBordero", mlngBordero, dbFieldTypeLong))
        End If
        If msngComissao > 0 Then
            Call .AddValue("Comissão", "@pComissao")
            Call .Parameters.add(.CreateParameter("@pComissao", msngComissao, dbFieldTypeDecimal))
        End If
        If mstrObservacao <> "" Then
            Call .AddValue("Obs", "@pObs")
            Call .Parameters.add(.CreateParameter("@pObs", mstrObservacao, dbFieldTypeString))
        End If
        If mdatIntegracaoFatoGerador <> Null Then
            Call .AddValue("Data Integração Fato Gerador", "@pDATIFG")
            Call .Parameters.add(.CreateParameter("@pDATIFG", mdatIntegracaoFatoGerador, dbFieldTypeDate))
        End If
        If mdatIntegracaoFatoPagamento <> Null Then
            Call .AddValue("Data Integração Fato Pagamento", "@pDATIFP")
            Call .Parameters.add(.CreateParameter("@pDATIFP", mdatIntegracaoFatoPagamento, dbFieldTypeDate))
        End If
        If mstrLinhaDigitavelImprimivel <> "" Then
            Call .AddValue("LINDIG", "@pLINDIG")
            Call .Parameters.add(.CreateParameter("@pLINDIG", mstrLinhaDigitavelImprimivel, dbFieldTypeString, 54))
        End If
        Call .AddValue("Conciliado", "@pConciliado")
        Call .Parameters.add(.CreateParameter("@pConciliado", mbooConciliado, dbFieldTypeBool))
        If mstrCarteira <> "" Then
            Call .AddValue("Carteira", "@pCarteira")
            Call .Parameters.add(.CreateParameter("@pCarteira", mstrCarteira, dbFieldTypeString, 3))
        End If
        'Projeto: #4350 - História: #4336 - Desenvolvimento: #5286 - Ivo Sousa(26/02/2013)
        If mstrSeqNossoNumero <> "0" And mstrSeqNossoNumero <> Empty Then
            Call .AddValue("SeqNossoNumero", "@pSeqNosNum")
            Call .Parameters.add(.CreateParameter("@pSeNosNum", mstrSeqNossoNumero, dbFieldTypeString, 40))
        End If
        If mcurValorMoraDiaria > 0 Then
            Call .AddValue("VlrMrD", "@pVlrMrd")
            Call .Parameters.add(.CreateParameter("@pVlrMrd", mcurValorMoraDiaria, dbFieldTypeDouble))
        End If
        If mcurPercentualMoraDiaria > 0 Then
            Call .AddValue("PerMrD", "@pPerMrD")
            Call .Parameters.add(.CreateParameter("@pPerMrD", mcurPercentualMoraDiaria, dbFieldTypeDouble))
        End If
        If mcurValorDescontoPontualidade > 0 Then
            Call .AddValue("VlrDsP", "@pVlrDsP")
            Call .Parameters.add(.CreateParameter("@pVlrDsP", mcurValorDescontoPontualidade, dbFieldTypeDouble))
        End If
        If mcurPercentualJuros > 0 Then
            Call .AddValue("PerJur", "@pPerJur")
            Call .Parameters.add(.CreateParameter("@pPerJur", mcurPercentualJuros, dbFieldTypeDouble))
        End If
        If mcurValorJuros > 0 Then
            Call .AddValue("VlrJur", "@pVlrJur")
            Call .Parameters.add(.CreateParameter("@pVlrJur", mcurValorJuros, dbFieldTypeDouble))
        End If
        If mlngCodigoProjeto > 0 Then
            Call .AddValue("CODPRJ", "@pCODPRJ")
            Call .Parameters.add(.CreateParameter("@pCODPRJ", mlngCodigoProjeto, dbFieldTypeLong))
        End If
        If mlngCodigoTipoTitulo > 0 Then
            Call .AddValue("CODFPG", "@pCODFPG")
            Call .Parameters.add(.CreateParameter("@pCODFPG", mlngCodigoTipoTitulo, dbFieldTypeLong))
        End If
        If mlngChequeBanco > 0 Then
            Call .AddValue("CheBan", "@pCheBan")
            Call .Parameters.add(.CreateParameter("@pCheBan", mlngChequeBanco, dbFieldTypeLong))
        End If
        If mstrChequeAgencia <> "" Then
            Call .AddValue("CheAge", "@pCheAge")
            Call .Parameters.add(.CreateParameter("@pCheAge", mstrChequeAgencia, dbFieldTypeString, 10))
        End If
        If mstrChequeEmitente <> "" Then
            Call .AddValue("CheEmi", "@pCheEmi")
            Call .Parameters.add(.CreateParameter("@pCheEmi", mstrChequeEmitente, dbFieldTypeString, 60))
        End If
        If mstrChequeContaCorrente <> "" Then
            Call .AddValue("CheCco", "@pCheCco")
            Call .Parameters.add(.CreateParameter("@pCheCco", mstrChequeContaCorrente, dbFieldTypeString, 20))
        End If
        If mcurPercentualMulta > 0 Then
            Call .AddValue("PerMul", "@pPerMul")
            Call .Parameters.add(.CreateParameter("@pPerMul", mcurPercentualMulta, dbFieldTypeDouble))
        End If
        If mcurValorMulta > 0 Then
            Call .AddValue("VlrMul", "@pVlrMul")
            Call .Parameters.add(.CreateParameter("@pVlrMul", mcurValorMulta, dbFieldTypeDouble))
        End If
        If mstrCodigoBarras <> "" Then
            Call .AddValue("CODBAR", "@pCODBAR")
            Call .Parameters.add(.CreateParameter("@pCODBAR", mstrCodigoBarras, dbFieldTypeString, 44))
        End If
        If mstrNossoNumero <> "" Then
            Call .AddValue("NOSNUM", "@pNOSNUM")
            Call .Parameters.add(.CreateParameter("@pNOSNUM", mstrNossoNumero, dbFieldTypeString, 20))
        End If
        If mstrAgenciaCedente <> "" Then
            Call .AddValue("AGECCE", "@pAGECCE")
            Call .Parameters.add(.CreateParameter("@pAGECCE", mstrAgenciaCedente, dbFieldTypeString, 20))
        End If
        If mstrLocalPagamento <> "" Then
            Call .AddValue("LOCPAG", "@pLOCPAG")
            Call .Parameters.add(.CreateParameter("@pLOCPAG", mstrLocalPagamento, dbFieldTypeString, 100))
        End If
        If mstrInstrucoes <> "" Then
            Call .AddValue("INSTRU", "@pINSTRU")
            Call .Parameters.add(.CreateParameter("@pINSTRU", mstrInstrucoes, dbFieldTypeString, 255))
        End If
        Call .AddValue("cd_operacao_contabil", "@pOperacaoContabil")
        Call .Parameters.add(.CreateParameter("@pOperacaoContabil", mlngOperacaoContabil, dbFieldTypeLong))
    End With
End Sub

Public Function isQuitada(ByVal booPagamento As Boolean, ByVal lngNota As Long, ByVal strEmpresa As String, ByVal strTipo As String, ByVal intParcela As Integer) As Boolean
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
On Error GoTo erro_consultando
    If Not existeKIF Then isQuitada = False: Exit Function
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    Call cmd.Filter.Append("PagRec = @pPagRec")
    If booPagamento Then
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "P", dbFieldTypeString, 1))
    Else
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "R", dbFieldTypeString, 1))
    End If
    Call cmd.Filter.Append("Nota = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeLong))
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString, 15))
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString, 30))
    Call cmd.Filter.Append("Parcela = @pParcela")
    Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", intParcela, dbFieldTypeInt))
    Call cmd.Filter.Append("Pagamento <> @pPagamento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagamento", DB_NULL.dbNull, dbFieldTypeDate))
    
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    isQuitada = Not rdResult.EOF
    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    isQuitada = False
End Function

Public Function Excluir(ByVal booPagamento As Boolean, ByVal lngNota As Long, ByVal strEmpresa As String, ByVal strTipo As String, ByVal intParcela As Integer, Optional ByVal strOrigem As String) As Boolean
    Dim cmd As IDBDeleteCommand
    Dim strPagRec As String
On Error GoTo erro_excluindo
    Excluir = True
    If Not existeKIF Then Exit Function
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateDeleteCommand
    cmd.Table = NomeTabela
    Call cmd.Filter.Append("PagRec = @pPagRec")
    If booPagamento Then
        strPagRec = "P"
    Else
        strPagRec = "R"
    End If
    
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString, 1))
    Call cmd.Filter.Append("Nota = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeLong))
    'Vinicius Elyseu(24/09/2015) - Projeto: #0 - História: #0 - Demanda: #91545
    If strOrigem = "CTe" Then
        Call cmd.Filter.Append("Empresa = @pEmpresa")
        Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString, 15))
    End If
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString, 20))
    Call cmd.Filter.Append("Parcela = @pParcela")
    Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", intParcela, dbFieldTypeInt))
    Call cmd.Filter.Append("Pagamento = @pPagamento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagamento", DB_NULL.dbNull, dbFieldTypeDate))
    
    If Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd) > 0 Then
        Call GravarHistoricoDuplicata(strPagRec, strTipo, strEmpresa, lngNota, intParcela)
        Excluir = True
    Else
        Excluir = False
        mstrMensagem = "A duplicata esta quitada. Para exclui-la é nescessário que a mesma esteja em aberto."
    End If
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function
erro_excluindo:
    err.Clear
    mstrMensagem = "Ocorreu um erro ao tentar excluir a duplicata."
    Excluir = False
End Function

Public Function quitar(Optional datData As Date = Empty) As Boolean
    Dim cmd As IDBUpdateCommand

On Error GoTo erro_quitando
    If Not existeKIF Then
        quitar = True
        Exit Function
    End If
    If datData = Empty Then
        datData = Date
    End If
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateUpdateCommand
    cmd.Table = NomeTabela
    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", mstrPagRec, dbFieldTypeString, 1))
    Call cmd.Filter.Append("Nota = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", mlngNota, dbFieldTypeDouble))
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", mstrEmpresa, dbFieldTypeString, 15))
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", mstrTipo, dbFieldTypeString, 30))
    Call cmd.Filter.Append("Parcela = @pParcela")
    Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", mintParcela, dbFieldTypeInt))
    Call cmd.AddValue("Pagamento", "@pPagamento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagamento", datData, dbFieldTypeDate))
    If Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd) > 0 Then
        quitar = True
    Else
        quitar = False
    End If
    Aplicacao.Disconnect
    Exit Function
erro_quitando:
    err.Clear
    quitar = False
End Function

Private Function existeKIF() As Boolean
    existeKIF = True
End Function

Public Function isNormal(ByVal booPagamento As Boolean, ByVal lngNota As Long, ByVal strEmpresa As String, ByVal strTipo As String, ByVal intParcela As Integer) As Boolean
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
On Error GoTo erro_consultando
    If Not existeKIF Then isNormal = False: Exit Function
    Aplicacao.Connect
    
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    
    Call cmd.Filter.Append("PagRec = @pPagRec")
    If booPagamento Then
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "P", dbFieldTypeString, 1))
    Else
        Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", "R", dbFieldTypeString, 1))
    End If
    
    Call cmd.Filter.Append("Nota = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeLong))
    
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString, 15))
    
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString, 30))
    
    Call cmd.Filter.Append("Parcela = @pParcela")
    Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", intParcela, dbFieldTypeInt))
    
    Call cmd.Filter.Append("Situação <> @pSituacao")
    Call cmd.Parameters.add(cmd.CreateParameter("@pSituacao", "Normal", dbFieldTypeString))
    
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    isNormal = Not rdResult.EOF
    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    isNormal = False
End Function

Public Sub AtualizarValorMoraDiaria()
    Dim sSql As String
    If gTipoDB = Access Then
        sSql = ""
        sSql = sSql & "UPDATE Duplicatas D "
        sSql = sSql & "INNER JOIN "
        sSql = sSql & "Bancos B "
        sSql = sSql & "ON "
        sSql = sSql & "D.Banco = B.Banco "
        sSql = sSql & "SET "
        sSql = sSql & "D.VLRMRD = CCUR( ( (D.[VALOR ORIGINAL] * B.MORA)/100 ) / 30 ) "
        ExecuteSQL sSql
    Else
        sSql = "UPDATE Duplicatas SET Duplicatas.VLRMRD =  ( (Duplicatas.[VALOR ORIGINAL] * Bancos.MORA)/100 ) / 30  FROM Duplicatas INNER JOIN Bancos ON Duplicatas.Banco = Bancos.Banco"
        ExecuteSQL sSql
    End If
End Sub

Public Function SelecionaBordero(Codigo As Long, PagRec As String) As String
    #If FOXSQL Then
        SelecionaBordero = wsprintf("SELECT Nota, Parcela, Empresa, [Emissão], Vencimento, " & _
                        "CONVERT(varchar,CAST(([Valor Original] + [Acréscimo] - Abatimento) AS MONEY),1), 'D' as Origem " & _
                        "FROM Duplicatas WHERE [Borderô] = %l AND PagRec = '%s'", Codigo, PagRec)
    #Else
        SelecionaBordero = wsprintf("SELECT Nota, Parcela, Empresa, [Emissão], Vencimento, " & _
                        "FORMAT([Valor Original] + [Acréscimo] - Abatimento, \'#,##0.00\'), 'D' as Origem " & _
                        "FROM Duplicatas WHERE [Borderô] = %l AND PagRec = '%s'", Codigo, PagRec)
    #End If
End Function

Public Function GravarHistoricoDuplicata(strPagRec As String, strTpRegistro As String, strEmpresa As String, lngNumDuplic As Long, intNumParcela As Integer) As Boolean
    Dim cmd         As IDBInsertCommand
    Dim booExcluido As Boolean
    
On Error GoTo erro_inserindo
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateInsertCommand
    With cmd
        .Table = "FFIDuplicHistorico"
        
        Call .AddValue("[id_seq]", "@pIdSequencial")
        Call .Parameters.add(.CreateParameter("@pIdSequencial", ProximoNumero("id_seq", "FFIDuplicHistorico", NUL)))
        
        Call .AddValue("[enterprise_id]", "@pEnterpriseId")
        Call .Parameters.add(.CreateParameter("@pEnterpriseId", EnterpriseID, dbFieldTypeInt))
        
        Call .AddValue("[cd_estabelecimento]", "@pCdEstabelecimento")
        Call .Parameters.add(.CreateParameter("@pCdEstabelecimento", CdEstabelecimento, dbFieldTypeString))
        
        Call .AddValue("[pagRec]", "@pPagRec")
        Call .Parameters.add(.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString))
        
        Call .AddValue("[tp_registro]", "@pTipoRegistro")
        Call .Parameters.add(.CreateParameter("@pTipoRegistro", strTpRegistro, dbFieldTypeString))
        
        Call .AddValue("[empresa]", "@pEmpresa")
        Call .Parameters.add(.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString))
        
        Call .AddValue("[nr_duplic]", "@pNumDuplic")
        'Projeto: 49396 - Desenv.: 49585 - Ueder Budni (16/09/2014)
        Call .Parameters.add(.CreateParameter("@pNumDuplic", lngNumDuplic, dbFieldTypeLong))
        
        Call .AddValue("[nr_parcela]", "@pNumParcela")
        Call .Parameters.add(.CreateParameter("@pNumParcela", intNumParcela, dbFieldTypeInt))
        
        Call .AddValue("[usuario]", "@pUsuario")
        Call .Parameters.add(.CreateParameter("@pUsuario", UserName, dbFieldTypeString))
        
        Call .AddValue("[dataHora]", "@pDataHora")
        Call .Parameters.add(.CreateParameter("@pDataHora", Now, dbFieldTypeDateTime))
        
        Call .AddValue("[integracao_bi]", "@pIntegracaoBI")
        Call .Parameters.add(.CreateParameter("@pIntegracaoBI", 0, dbFieldTypeInt))
       
    End With
    
    booExcluido = CBool(Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd) = CLng(1))
    
    GravarHistoricoDuplicata = booExcluido
    Aplicacao.Disconnect
    Exit Function
erro_inserindo:
    Call Throw(err)
    Aplicacao.Disconnect
End Function

' 16/11/2018 - D. 234270 - H. 188711 - Yuji F. - Correção da assinatura do método, deve esperar um Double ao invés de Long
Public Function ValorSemRateio(ByVal strTabela As String, ByVal dblNota As Double, ByVal strEmpresa As String, ByVal strPagRec As String, ByVal strTipo As String, ByVal dtVencimento As Date) As Currency
    Dim cmd            As IDBSelectCommand
    Dim rdResult       As IDBReader
    Dim dblValorTotal  As Double
On Error GoTo erro_consultando
    
    If Not existeKIF Then ValorSemRateio = False: Exit Function
    
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = strTabela
    
    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString))
    
    If strTabela = "Lançamentos" Then
        Call cmd.Filter.Append("Código = @pCod")
    Else
        Call cmd.Filter.Append("Nota = @pCod")
    End If
    
    ' 16/11/2018 - D. 234270 - H. 188711 - Yuji F. - Ajuste do tipo de variável
    Call cmd.Parameters.add(cmd.CreateParameter("@pCod", dblNota, dbFieldTypeDouble))
    
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString))
    
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString))
    
    Call cmd.Filter.Append("Vencimento = @pDtVenc")
    Call cmd.Parameters.add(cmd.CreateParameter("@pDtVenc", dtVencimento, dbFieldTypeDate))
    
    Call cmd.Filter.Append("Liberação <> @pLiberacao")
    Call cmd.Parameters.add(cmd.CreateParameter("@pLiberacao", DB_NULL.dbNull, dbFieldTypeDate))
    
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    
    Do While Not rdResult.EOF
        dblValorTotal = dblValorTotal + rdResult.GetValue("Valor Original")
        rdResult.MoveNext
    Loop
    
    ValorSemRateio = dblValorTotal
    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    ValorSemRateio = 0
    Aplicacao.Disconnect
End Function


Public Function ConciliaDuplicLanc(ByVal blnconcilia As Boolean, ByVal strBanco As String, ByVal strTabela As String, ByVal strSeqExtrato As String, ByVal strPagRec As String, ByVal lngNota As Double, ByVal strEmpresa As String, ByVal strTipo As String, ByVal lngParcela As Long, ByVal strDtaLiberacao As String, ByVal blnSemRateio As Boolean, ByVal intExtrato As Integer) As Boolean
    Dim cmd            As IDBUpdateCommand
    Dim rdResult       As IDBReader
    Dim strCodigo      As String
    'Projeto: 100340 - Desenv.: 145973 - Ueder Budni (13/10/2016)
    Dim objLogLancDup   As New clsLogLancamentosDuplicatas
    
On Error GoTo erro_alterando

    If Not existeKIF Then Exit Function
    
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateUpdateCommand
    cmd.Table = strTabela
    
    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString))
    
    strCodigo = IIf(strTabela = "Duplicatas", "Nota", "Código")
    
    Call cmd.Filter.Append(strCodigo & " = @pCodigo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pCodigo", lngNota, dbFieldTypeDouble))
    
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString))
    
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString))
    
    If Not blnSemRateio Then
        Call cmd.Filter.Append("Parcela = @pParcela")
        Call cmd.Parameters.add(cmd.CreateParameter("@pParcela", lngParcela, dbFieldTypeLong))
    Else
        Call cmd.Filter.Append("Liberação = @pLiberacao")
        Call cmd.Parameters.add(cmd.CreateParameter("@pLiberacao", strDtaLiberacao, dbFieldTypeDateTime))
    End If
    
    Call cmd.AddValue("Conciliado", "@pConciliado")
    Call cmd.Parameters.add(cmd.CreateParameter("@pConciliado", blnconcilia, dbFieldTypeBool))
    
    Call cmd.AddValue("conciliacao_banco", "@pConcBanco")
    Call cmd.Parameters.add(cmd.CreateParameter("@pConcBanco", strBanco, dbFieldTypeString))
    
    Call cmd.AddValue("conciliacao_extrato", "@pConcExtrato")
    Call cmd.Parameters.add(cmd.CreateParameter("@pConcExtrato", intExtrato, dbFieldTypeInt))
    
    Call cmd.AddValue("conciliacao_sequencial_extrato", "@pSeqExt")
    Call cmd.Parameters.add(cmd.CreateParameter("@pSeqExt", IIf(blnconcilia, strSeqExtrato, "0"), dbFieldTypeString))
   
    ConciliaDuplicLanc = Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd)
    'Projeto: 100340 - Desenv.: 145973 - Ueder Budni (13/10/2016)
    If ConciliaDuplicLanc Then
        With objLogLancDup
            Call .SetKey(strPagRec, lngNota, strEmpresa, strTipo, lngParcela, IIf(strTabela = "Duplicatas", Duplicata, Lancamento))
            Call .InsertMsg("Campo Conciliado foi " & IIf(blnconcilia = True, "marcado", "desmarcado") & " através da rotina Conciliação Bancária Automática.")
        End With
    End If
    Set objLogLancDup = Nothing
                        
    Aplicacao.Disconnect
    Exit Function

erro_alterando:
    err.Clear
    ConciliaDuplicLanc = False
    Aplicacao.Disconnect
End Function

Public Function TemConciliacaoExtrato(ByVal lngNota As Double, ByVal strEmpresa As String, ByVal strPagRec As String, ByVal strTipo As String, ByVal dtVencimento As Date) As Boolean
    Dim cmd            As IDBSelectCommand
    Dim rdResult       As IDBReader
On Error GoTo erro_consultando
    
    If Not existeKIF Then TemConciliacaoExtrato = False: Exit Function
    
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = "Lançamentos"
    
    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString))
    
    Call cmd.Filter.Append("Código = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeDouble))
    
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString))
    
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString))
    
    Call cmd.Filter.Append("Liberação <> @pLib")
    Call cmd.Parameters.add(cmd.CreateParameter("@pLib", DB_NULL.dbNull, dbFieldTypeDate))
    
    Call cmd.Filter.Append("Vencimento = @pDtVen")
    Call cmd.Parameters.add(cmd.CreateParameter("@pDtVen", dtVencimento, dbFieldTypeDate))
    
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    
    If Not rdResult.EOF Then
        TemConciliacaoExtrato = IIf(rdResult.GetValue("conciliacao_extrato") > 0, True, False)
    End If
    
    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    TemConciliacaoExtrato = False
    Aplicacao.Disconnect
End Function

Public Function RetornaExtratoConciliado(ByVal strTabela As String, ByVal lngNota As String, ByVal strEmpresa As String, ByVal strPagRec As String, ByVal strTipo As String) As Integer
    Dim cmd            As IDBSelectCommand
    Dim rdResult       As IDBReader
On Error GoTo erro_consultando
        
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = strTabela
    
    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString))
    
    Call cmd.Filter.Append("Código = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", lngNota, dbFieldTypeString))
    
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString))
    
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString))
    
    Call cmd.Filter.Append("Liberação <> @pLib")
    Call cmd.Parameters.add(cmd.CreateParameter("@pLib", DB_NULL.dbNull, dbFieldTypeDate))
        
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    
    If Not rdResult.EOF Then
        RetornaExtratoConciliado = IIf(rdResult.GetValue("conciliacao_extrato") = 0, "0", rdResult.GetValue("conciliacao_extrato"))
    End If
    
    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    RetornaExtratoConciliado = 0
    Aplicacao.Disconnect
End Function

Public Function RetornaSequencialExtratoConciliado(ByVal strTabela As String, ByVal lngNota As String, ByVal strEmpresa As String, ByVal strPagRec As String, ByVal strTipo As String) As String
    Dim cmd            As IDBSelectCommand
    Dim rdResult       As IDBReader
On Error GoTo erro_consultando
        
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = "Lançamentos"
    
    Call cmd.Filter.Append("PagRec = @pPagRec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pPagRec", strPagRec, dbFieldTypeString))
    
    Call cmd.Filter.Append("Código = @pNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNota", CStr(lngNota), dbFieldTypeString))
    
    Call cmd.Filter.Append("Empresa = @pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", strEmpresa, dbFieldTypeString))
    
    Call cmd.Filter.Append("Tipo = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString))
        
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    
    If Not rdResult.EOF Then
        RetornaSequencialExtratoConciliado = IIf(rdResult.GetValue("conciliacao_sequencial_extrato") = 0, "0", rdResult.GetValue("conciliacao_sequencial_extrato"))
    End If
    
    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    RetornaSequencialExtratoConciliado = "0"
    Aplicacao.Disconnect
End Function

