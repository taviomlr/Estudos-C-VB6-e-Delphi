VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cFreteMercadoriaReceber"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cFreteMercadoriaReceber
''  Generated by Enterprise Architect
''  Created on:      23-ago-2006 10:10:03
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private mstrNaturezaCarga       As String
Private mdblQuantidade          As Double
Private mstrUnidade             As String
Private mstrEspecie             As String
Private mdblPeso                As Double
Private mlngNotaFiscal          As Long
Private mdatDataNota            As Date
Private mdblValorCarga          As Double
Private mintSequencial          As Integer
Private mlngPINNotaFiscal       As Long
Private mstrChaveAcesso         As String
Private mstrNrRomaneio          As String
Private mstrSerieNF             As String
'Ivo Sousa (03/05/2012) - Correções para versão 1.04 do CT-e
'Projeto: #7373 - História: #4211 - Desenvolvimento: #8237 - Ivo Sousa(22/05/2013)
Private mstrModeloNF            As String
Private mcurBaseICMS            As Currency
Private mcurValorICMS           As Currency
Private mcurBaseICMSST          As Currency
Private mcurValorICMSST         As Currency
Private mcurTotalMercadorias    As Currency
Private mstrCFOP                As String

Public Property Get dataNota() As Date
        dataNota = mdatDataNota
End Property

Public Property Let dataNota(ByVal NewVal As Date)
        mdatDataNota = NewVal
End Property

Public Property Get Especie() As String
        Especie = mstrEspecie
End Property

Public Property Let Especie(ByVal NewVal As String)
        mstrEspecie = NewVal
End Property

Public Property Get naturezaCarga() As String
        naturezaCarga = mstrNaturezaCarga
End Property

Public Property Let naturezaCarga(ByVal NewVal As String)
        mstrNaturezaCarga = NewVal
End Property

Public Property Let NotaFiscal(ByVal NewVal As Long)
        mlngNotaFiscal = NewVal
End Property

Public Property Get NotaFiscal() As Long
        NotaFiscal = mlngNotaFiscal
End Property

Public Property Get Peso() As Double
        Peso = mdblPeso
End Property

Public Property Let Peso(ByVal NewVal As Double)
        mdblPeso = NewVal
End Property

Public Property Get Quantidade() As Double
        Quantidade = mdblQuantidade
End Property

Public Property Let Quantidade(ByVal NewVal As Double)
        mdblQuantidade = NewVal
End Property

Public Property Get Unidade() As String
        Unidade = mstrUnidade
End Property

Public Property Let Unidade(ByVal NewVal As String)
        mstrUnidade = NewVal
End Property

Public Property Get valorCarga() As Double
        valorCarga = mdblValorCarga
End Property

Public Property Let valorCarga(ByVal NewVal As Double)
        mdblValorCarga = NewVal
End Property

Public Property Get sequencial() As Integer
    sequencial = mintSequencial
End Property

Public Property Let sequencial(ByVal NewVal As Integer)
    mintSequencial = NewVal
End Property

'----------------------------------------Inicio da Alteração--------------------------------------
Public Property Get PINNotaFiscal() As Long
    PINNotaFiscal = mlngPINNotaFiscal
End Property

Public Property Let PINNotaFiscal(ByVal NewVal As Long)
    mlngPINNotaFiscal = NewVal
End Property

Public Property Get ChaveAcesso() As String
    ChaveAcesso = mstrChaveAcesso
End Property

Public Property Let ChaveAcesso(ByVal NewVal As String)
    mstrChaveAcesso = NewVal
End Property

Public Property Get NrRomaneio() As String
    NrRomaneio = mstrNrRomaneio
End Property

Public Property Let NrRomaneio(ByVal NewVal As String)
    mstrNrRomaneio = NewVal
End Property

Public Property Get SerieNF() As String
    SerieNF = mstrSerieNF
End Property

Public Property Let SerieNF(ByVal NewVal As String)
    mstrSerieNF = NewVal
End Property

'Ivo Sousa (03/05/2012) - Correções para versão 1.04 do CT-e
'Projeto: #7373 - História: #4211 - Desenvolvimento: #8237 - Ivo Sousa(22/05/2013)
Public Property Get ModeloNF() As String
    ModeloNF = mstrModeloNF
End Property

Public Property Let ModeloNF(ByVal NewVal As String)
    mstrModeloNF = NewVal
End Property

Public Property Get BaseICMS() As Currency
    BaseICMS = mcurBaseICMS
End Property

Public Property Let BaseICMS(ByVal NewVal As Currency)
    mcurBaseICMS = NewVal
End Property

Public Property Get ValorICMS() As Currency
    ValorICMS = mcurValorICMS
End Property

Public Property Let ValorICMS(ByVal NewVal As Currency)
    mcurValorICMS = NewVal
End Property

Public Property Get BaseICMSST() As Currency
    BaseICMSST = mcurBaseICMSST
End Property

Public Property Let BaseICMSST(ByVal NewVal As Currency)
    mcurBaseICMSST = NewVal
End Property

Public Property Get ValorICMSST() As Currency
    ValorICMSST = mcurValorICMSST
End Property

Public Property Let ValorICMSST(ByVal NewVal As Currency)
    mcurValorICMSST = NewVal
End Property

Public Property Get TotalMercadorias() As Currency
    TotalMercadorias = mcurTotalMercadorias
End Property

Public Property Let TotalMercadorias(ByVal NewVal As Currency)
    mcurTotalMercadorias = NewVal
End Property

Public Property Get CFOP() As String
    CFOP = mstrCFOP
End Property

Public Property Let CFOP(ByVal NewVal As String)
    mstrCFOP = NewVal
End Property

Public Function equals(obj As Object) As Boolean
    Dim booIgual As Boolean
    Dim newObj As cFreteMercadoriaReceber
    
    Set newObj = obj
    booIgual = (newObj.naturezaCarga = mstrNaturezaCarga)
    booIgual = booIgual And (newObj.Quantidade = mdblQuantidade)
    booIgual = booIgual And (newObj.NotaFiscal = mlngNotaFiscal)
    equals = booIgual
End Function

Public Function CriarObjeto(rd As IDBReader) As cFreteMercadoriaReceber
    With rd
        mintSequencial = .GetInteger("id_item")
        mstrNaturezaCarga = .GetString("carga")
        mdblQuantidade = .GetDouble("qt_quantidade")
        mstrUnidade = .GetString("unidade")
        mstrEspecie = .GetString("especie")
        mdblPeso = .GetDouble("peso")
        mlngNotaFiscal = .GetLong("nr_nota")
        mdatDataNota = .GetDate("dt_nota")
        mdblValorCarga = .GetDouble("vl_carga")
        'pt. CT-e - Ivo Sousa (30/06/2010)
        mlngPINNotaFiscal = .GetLong("pin_nota_fiscal")
        mstrChaveAcesso = .GetString("chave_acesso")
        mstrNrRomaneio = .GetString("nr_romaneio")
        mstrSerieNF = .GetString("serie_nf")
        'Ivo Sousa (03/05/2012) - Correções para versão 1.04 do CT-e
        'Projeto: #7373 - História: #4211 - Desenvolvimento: #8237 - Ivo Sousa(22/05/2013)
        mstrModeloNF = .GetString("modelo")
        mcurBaseICMS = .GetCurrency("base_icms")
        mcurValorICMS = .GetCurrency("valor_icms")
        mcurBaseICMSST = .GetCurrency("base_icms_st")
        mcurValorICMSST = .GetCurrency("valor_icms_st")
        mcurTotalMercadorias = .GetCurrency("total_mercadorias")
        mstrCFOP = .GetString("cfop")
        Set CriarObjeto = Me
    End With
End Function

'Data.......: 14/02/2007
'Descrição..: Metodo utilizado para gerar o registro referente a integração do conhecimento na EBSInt.
'Parametros.: [String] Tipo de registro que será gerado na integração.
'             [Long] Número do conhecimento de frete a ser exportado.
'             [Integer] Número referente ao código do cfop.
'             [Long] Código da transportadora do conhecimento de frete.
'             [Integer] Código do tipo de documento que está sendo exportado.
'Retorno....: [cNotaSaidaConhecimento] Objeto que deve ser utilizado para exportar o arquivo.
Public Function Exportar(strTipoRegistro As String, lngNumeroNota As Long, intCodCfop As Integer, lngTransp As Long, intTipoDoc As Integer) As cNotaSaidaConhecimento
    Set Exportar = New cNotaSaidaConhecimento
    With Exportar
        .TipoRegistro = strTipoRegistro
        .NumeroNota = lngNumeroNota
        .codigoCfop = intCodCfop
        .codigoTransp = lngTransp
        .TipoDocumento = intTipoDoc
        .NumeroNotaCarga = mlngNotaFiscal
        .ModeloCarga = 1
        .EmissaoCarga = mdatDataNota
        .ValorNota = CCur(mdblValorCarga)
    End With
End Function
