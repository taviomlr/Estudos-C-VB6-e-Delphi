VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cFreteReceberDAO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

''  Implementation of the  Class cFreteReceberDAO
''  Generated by Enterprise Architect
''  Created on:      28-ago-2006 12:06:56
''  Original author: Dulcino Júnior

'Projeto: 100340 - Desenv.: - Ueder Budni (12/07/2017)
Private Const TABELA_TRANSM_CTE = "FVFTransmissaoCTe"

Private Const NomeTabela$ = "FreteSaida"
Private mintNrGravacoes As Integer
Private mstrErro As String

Public Function lastCodigo(strTipoGlobal As String) As Long
    Dim cmd                     As IDBSelectCommand
    Dim rdResult                As IDBReader
    Dim objControleSeqCTe       As clsControleSeqCTe
    Dim objControleSeqCTeADO    As New clsControleSeqCTeADO
    
On Error GoTo err_Handler
    Aplicacao.Connect
    Set objControleSeqCTeADO.App = Aplicacao
    Set objControleSeqCTe = objControleSeqCTeADO.carregaRegistro(strTipoGlobal)
    If Not objControleSeqCTe Is Nothing Then
        lastCodigo = objControleSeqCTe.NrConhecimentoAtual + 1
    Else
        Set cmd = Aplicacao.CreateSelectCommand
        With cmd
            .Table.TableName = NomeTabela
            cmd.SelectClause = "MAX(nr_conhecimento) AS lastCod"
            Call .Filter.Append("tp_registro = @pTpRegistro")
            Call .Parameters.add(.CreateParameter("@pTpRegistro", strTipoGlobal, dbFieldTypeString))
        End With
        Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
        If Not rdResult.EOF Then
            lastCodigo = rdResult.GetLong("lastCod") + 1
        Else
            lastCodigo = 1
        End If
        rdResult.CloseReader
        Set rdResult = Nothing
        Set cmd = Nothing
    End If
    Aplicacao.Disconnect
    Exit Function
err_Handler:
    Aplicacao.Disconnect
End Function

Public Function lastSequencial() As Long
    Dim cmd                     As IDBSelectCommand
    Dim rdResult                As IDBReader
    Dim objControleSeqCTe       As clsControleSeqCTe
    Dim objControleSeqCTeADO    As New clsControleSeqCTeADO
    
On Error GoTo err_Handler
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    With cmd
        .Table.TableName = NomeTabela
        cmd.SelectClause = "MAX(seq_conhecimento) AS lastCod"
    End With
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        lastSequencial = rdResult.GetLong("lastCod") + 1
    Else
        lastSequencial = 1
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function
err_Handler:
    Aplicacao.Disconnect
End Function

Public Function persistir(ByVal objFreteSaida As cFreteReceber, ByRef objAplicacao As IApplication, Optional dtDataEntrada As Date) As Boolean
    Dim cmd As IDBInsertCommand
    Dim DAOMercadorias As New cFreteMercadoriaReceberDAO
    Dim DAOMotoristas As New cMotoristaFreteReceberDAO
    Dim daoTitulo As New cTituloDAO
    Dim objCTeItensInfQuantidadeDAO As New clsCTeItensInfQuantidadeDAO
    Dim strTipoData As String
    Dim lngSeqConhecimento As Long
    Dim objCTeInfSeguroDAO As New clsCTeInformacoesSeguroDAO
    
On Error GoTo erroPersistindo
    
    If Not objFreteSaida Is Nothing Then
        Set cmd = objAplicacao.CreateInsertCommand
        persistir = True
        cmd.Table = NomeTabela
        
        Call cmd.AddValue("nr_conhecimento", "@pNumero")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", objFreteSaida.numeroConhecimento, dbFieldTypeLong))
        
        Call cmd.AddValue("tp_registro", "@pTipoRegistro")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTipoRegistro", objFreteSaida.TipoRegistro, dbFieldTypeString, 20))
        
        Call cmd.AddValue("seq_conhecimento", "@pSeqConhecimento")
        Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", objFreteSaida.SeqConhecimento, dbFieldTypeLong))
        
        Call prepareCommand(cmd, objFreteSaida)
                
        Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
        
        With DAOMercadorias
            .codigoFrete = objFreteSaida.numeroConhecimento
            .tipoFrete = objFreteSaida.TipoRegistro
            .SeqConhecimento = objFreteSaida.SeqConhecimento
        End With
                
        With DAOMotoristas
            .numeroConhecimento = objFreteSaida.numeroConhecimento
            .tipoConhecimento = objFreteSaida.TipoRegistro
            .SeqConhecimento = objFreteSaida.SeqConhecimento
        End With
        
        With daoTitulo
            .numeroConhecimento = objFreteSaida.numeroConhecimento
            .tipoConhecimento = objFreteSaida.TipoRegistro
            .OperacaoContabil = objFreteSaida.OperacaoContabil
            .Transportadora = objFreteSaida.codigoTransportadora
            .SeqConhecimento = objFreteSaida.SeqConhecimento
        End With
        
        With objCTeItensInfQuantidadeDAO
            .NrConhecimento = objFreteSaida.numeroConhecimento
            .TpRegistro = objFreteSaida.TipoRegistro
            .SeqConhecimento = objFreteSaida.SeqConhecimento
            .setAplicacao = objAplicacao
        End With
                         
        'Projeto: #7373 - História: #7973 - Desenvolvimento: #7976 - Ivo Sousa(15/05/2013)
        With objCTeInfSeguroDAO
            .NrConhecimento = objFreteSaida.numeroConhecimento
            .TpRegistro = objFreteSaida.TipoRegistro
            .SeqConhecimento = objFreteSaida.SeqConhecimento
            .setAplicacao = objAplicacao
        End With
        
        With objFreteSaida
            .mercadorias.MoveFirst
            While Not .mercadorias.EOF
                If DAOMercadorias.persistir(.mercadorias.CurrentObject, objAplicacao) Then
                    .mercadorias.MoveNext
                Else
                    GoTo erroPersistindo
                End If
            Wend
            .motoristas.MoveFirst
            While Not .motoristas.EOF
                If DAOMotoristas.persistir(.motoristas.CurrentObject, objAplicacao) Then
                    Call .motoristas.MoveNext(False)
                Else
                    GoTo erroPersistindo
                End If
            Wend
            'pt. 86678 - Ivo Sousa(26/05/2008)
            If ValidaDatasDiasUteis(0, dtDataEntrada, , , False, strTipoData, , ID_MODULO_FINANCEIRO) Or strTipoData <> "X" Then
                .Titulo.Nota = daoTitulo.numeroConhecimento
                If Not daoTitulo.persistir(.Titulo, objAplicacao) Then
                    GoTo erroPersistindo
                End If
            Else
                MsgBox "Não foi possivel gerar as Duplicatas." & vbCrLf & _
                "O Modulo Financeiro está com o movimento conferido para a data informada.", vbOKOnly + vbInformation, NomeModulo
            End If
            
            'pt. 95345 - Ivo Sousa (12/09/2010)
            If Not .InformacoesCarga.ColItensInfQtd Is Nothing Then
                If .InformacoesCarga.ColItensInfQtd.Count > 0 Then
                    If Not objCTeItensInfQuantidadeDAO.persistirItens(.InformacoesCarga.ColItensInfQtd, objAplicacao) Then
                        GoTo erroPersistindo
                    End If
                End If
            End If
            
            'Projeto: #7373 - História: #7973 - Desenvolvimento: #7976 - Ivo Sousa(15/05/2013)
            If Not .InformacoesSeguro Is Nothing Then
                If Not objCTeInfSeguroDAO.persistirItens(.InformacoesSeguro, objAplicacao) Then
                    GoTo erroPersistindo
                End If
            End If
        End With
        persistir = True
    Else
        GoTo erroPersistindo
    End If
    Exit Function
    
erroPersistindo:
    'História 15197 - Tarefa 15198 - Ivo Sousa (19/07/2012)
    If Err.Number = -2147220499 Then
        If mintNrGravacoes <= 4 Then
            mintNrGravacoes = mintNrGravacoes + 1
            Call Sleep(2000)
            objFreteSaida.SeqConhecimento = lastSequencial
            Call Sleep(3000)
            objFreteSaida.numeroConhecimento = lastCodigo(objFreteSaida.TipoRegistro)
            'MsgBox "Controle Sequencial: " & objFreteSaida.SeqConhecimento & " - Número Conhecimento: " & objFreteSaida.numeroConhecimento
            Call persistir(objFreteSaida, objAplicacao, dtDataEntrada)
        Else
            Err.Clear
            persistir = False
        End If
    Else
        Err.Clear
        persistir = False
    End If
End Function

Public Function Atualizar(objFreteSaida As cFreteReceber, objAplicacao As IApplication, Optional dtDataEmissao As Date) As Boolean
    Dim objFrete As cFreteReceber
    
    If objFreteSaida.PermiteAlteracao Then
        Set objFrete = Carregar(objFreteSaida.numeroConhecimento, , objFreteSaida.SeqConhecimento)
        If Excluir(objFrete, objAplicacao, dtDataEmissao) Then
            Atualizar = persistir(objFreteSaida, Aplicacao, dtDataEmissao)
        Else
            Atualizar = False
        End If
    Else
        'Altera apenas Banco, Centro, CC, Descricao
        Dim daoTitulo As New cTituloDAO
        Dim DAOMotorista As New cMotoristaFreteReceberDAO
        Dim booErro As Boolean
        
        booErro = False
        DAOMotorista.numeroConhecimento = objFreteSaida.numeroConhecimento
        DAOMotorista.tipoConhecimento = objFreteSaida.TipoRegistro

        daoTitulo.numeroConhecimento = objFreteSaida.numeroConhecimento
        daoTitulo.tipoConhecimento = objFreteSaida.TipoRegistro
        'pt. 82395 - Dulcino Júnior
        daoTitulo.OperacaoContabil = objFreteSaida.OperacaoContabil
        
        If Not daoTitulo.Alterar(objFreteSaida.Titulo, objAplicacao) Then
            booErro = True
        Else
            Set objFrete = Carregar(objFreteSaida.numeroConhecimento, , objFreteSaida.SeqConhecimento)
            'Apaga os motoristas cadastrados
            With objFrete.motoristas
                .MoveFirst
                While Not .EOF
                    If Not DAOMotorista.Excluir(.CurrentObject, objAplicacao) Then
                        booErro = True
                        Exit Function
                    End If
                    Call .MoveNext(False)
                Wend
                Set objFrete = Nothing
            End With
            'Recria os motoristas
            With objFreteSaida.motoristas
                .MoveFirst
                While Not .EOF
                    If Not DAOMotorista.persistir(.CurrentObject, objAplicacao) Then
                        booErro = True
                        Exit Function
                    End If
                    Call .MoveNext(False)
                Wend
            End With
            Dim cmd As IDBUpdateCommand
            
            Set cmd = objAplicacao.CreateUpdateCommand
            cmd.Table = NomeTabela
            Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
            With objFreteSaida
                Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", .numeroConhecimento, dbFieldTypeInt))
                Call cmd.AddValue("endereco_entrega", "@pEnderecoEntrega")
                
                Call cmd.Parameters.add(cmd.CreateParameter("@pEnderecoEntrega", .Entrega.Endereco, dbFieldTypeString, 60))
                Call cmd.AddValue("cidade_entrega", "@pCidadeEntrega")
                
                Call cmd.Parameters.add(cmd.CreateParameter("@pCidadeEntrega", .Entrega.Cidade, dbFieldTypeString, 20))
                Call cmd.AddValue("uf_entrega", "@pUfEntrega")
                
                Call cmd.Parameters.add(cmd.CreateParameter("@pUfEntrega", .Entrega.uf.Sigla, dbFieldTypeString, 2))
                Call cmd.AddValue("endereco_coleta", "@pEnderecoColeta")
                
                Call cmd.Parameters.add(cmd.CreateParameter("@pEnderecoColeta", .coleta.Endereco, dbFieldTypeString, 60))
                Call cmd.AddValue("cidade_coleta", "@pCidadeColeta")
                
                Call cmd.Parameters.add(cmd.CreateParameter("@pCidadeColeta", .coleta.Cidade, dbFieldTypeString, 20))
                Call cmd.AddValue("uf_coleta", "@pUfColeta")
                
                Call cmd.Parameters.add(cmd.CreateParameter("@pUfColeta", .coleta.uf.Sigla, dbFieldTypeString, 2))
                Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
            End With
        End If
        Atualizar = Not booErro
    End If
End Function

Public Function existir(ByVal mintNumero As Integer) As Boolean
    existir = False
End Function

Public Function Carregar(ByVal mlngNumero As Long, Optional lngTranportadora As Long, Optional lngSeqConhecimento As Long) As cFreteReceber
    Dim objFrete                    As New cFreteReceber
    Dim cmd                         As IDBSelectCommand
    Dim rdResult                    As IDBReader
    Dim mercadoriaDAO               As New cFreteMercadoriaReceberDAO
    Dim motoristaDAO                As New cMotoristaFreteReceberDAO
    Dim tituloDAO                   As New cTituloDAO
    Dim objCTeItensInfQuantidadeDAO As New clsCTeItensInfQuantidadeDAO
    Dim objTransmissaoCTe           As New clsTransmissaoCTe
    Dim objCTeInfSeguroDAO          As New clsCTeInformacoesSeguroDAO
    Dim strErro                     As String
    
    
On Error GoTo erro_carregando
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    
    Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngNumero, dbFieldTypeLong))
    
    If lngSeqConhecimento > 0 Then
        Call cmd.Filter.Append("seq_conhecimento = @pSeqConhecimento")
        Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", lngSeqConhecimento, dbFieldTypeLong))
    End If

    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        Set Carregar = objFrete.CriarObjeto(rdResult)
        
        With mercadoriaDAO
            .codigoFrete = Carregar.numeroConhecimento
            .tipoFrete = Carregar.TipoRegistro
            .SeqConhecimento = Carregar.SeqConhecimento
            Carregar.mercadorias = .carregar_lista
        End With
        
        With motoristaDAO
            .numeroConhecimento = Carregar.numeroConhecimento
            .tipoConhecimento = Carregar.TipoRegistro
            .SeqConhecimento = Carregar.SeqConhecimento
            Carregar.motoristas = .carregar_lista
        End With
                       
        With tituloDAO
            .numeroConhecimento = Carregar.numeroConhecimento
            .tipoConhecimento = Carregar.TipoRegistro
            .Transportadora = Carregar.codigoTransportadora
            .SeqConhecimento = Carregar.SeqConhecimento
            Carregar.Titulo = .carrega()
        End With
                    
        With objCTeItensInfQuantidadeDAO
            .NrConhecimento = Carregar.numeroConhecimento
            .TpRegistro = Carregar.TipoRegistro
            .SeqConhecimento = Carregar.SeqConhecimento
            .setAplicacao = Aplicacao
            Set Carregar.InformacoesCarga.ColItensInfQtd = .consultarRegistros
        End With
                
        Carregar.PermiteAlteracao = tituloDAO.podeAlterar(Carregar.Titulo)
                
        With objTransmissaoCTe
            .objAplicacao = Aplicacao
            .NrConhecimento = Carregar.numeroConhecimento
            .TpRegistro = Carregar.TipoRegistro
            .CdEstabelecimento = CdEstabelecimento
            .EnterpriseID = EnterpriseID
            .SeqConhecimento = Carregar.SeqConhecimento
            .OrigemCte = CTeSaida
            If Not .CarregaCTe(strErro) Then
                objTransmissaoCTe.NrConhecimento = 0
            End If
        End With
        
        'Projeto: #7373 - História: #7973 - Desenvolvimento: #7976 - Ivo Sousa(15/05/2013)
        With objCTeInfSeguroDAO
            .NrConhecimento = Carregar.numeroConhecimento
            .TpRegistro = Carregar.TipoRegistro
            .SeqConhecimento = Carregar.SeqConhecimento
            .setAplicacao = Aplicacao
            Carregar.InformacoesSeguro = .consultarRegistros
        End With
        
        'Projeto: 1222 - História: #9972 - Ivo Sousa (12/04/2012)
        'Carregar.PermiteAlteracao = Carregar.PermiteAlteracao And (objTransmissaoCTe.NrStatus <> 4 Or objTransmissaoCTe.NrConhecimento = 0)
        Carregar.PermiteAlteracao = Carregar.PermiteAlteracao And objTransmissaoCTe.NrStatus <> 2
        
        Carregar.motoristas.MoveFirst
        If Not Carregar.Titulo.parcelas Is Nothing Then
            Carregar.Titulo.parcelas.MoveFirst
        End If
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function

erro_carregando:
    Err.Clear
    Aplicacao.Disconnect
    Set Carregar = Nothing
End Function

Private Sub prepareCommand(ByRef cmd As Object, ByRef objFreteSaida As cFreteReceber)
    With cmd
        Call .AddValue("dt_emissao", "@pDataEmissao")
        Call .Parameters.add(.CreateParameter("@pDataEmissao", objFreteSaida.Emissao, dbFieldTypeDate))
        
        Call .AddValue("cd_remetente", "@pRemetente")
        Call .Parameters.add(.CreateParameter("@pRemetente", objFreteSaida.codigoRemetente, dbFieldTypeString, 15))
        
        Call .AddValue("cd_destinatario", "@pDestinatario")
        Call .Parameters.add(.CreateParameter("@pDestinatario", objFreteSaida.codigoDestinatario, dbFieldTypeString, 15))
        
        If objFreteSaida.codigoConsignatario <> "" Then
            Call .AddValue("cd_consignatario", "@pConsignatario")
            Call .Parameters.add(.CreateParameter("@pConsignatario", objFreteSaida.codigoConsignatario, dbFieldTypeString, 15))
        End If
        
        If objFreteSaida.codigoRedespacho > 0 Then
            Call .AddValue("cd_redespacho", "@pRedespacho")
            Call .Parameters.add(.CreateParameter("@pRedespacho", objFreteSaida.codigoRedespacho, dbFieldTypeLong))
        End If
        Call .AddValue("cd_cfop", "@pCfop")
        Call .Parameters.add(.CreateParameter("@pCfop", objFreteSaida.codigoCfop, dbFieldTypeString, 4))
        
        If objFreteSaida.codigoCfopVar <> "" Then
            Call .AddValue("cd_cfopvar", "@pVar")
            Call .Parameters.add(.CreateParameter("@pVar", objFreteSaida.codigoCfopVar, dbFieldTypeString, 1))
        End If
        
        
        Call .AddValue("distancia", "@pDistancia")
        Call .Parameters.add(.CreateParameter("@pDistancia", objFreteSaida.distancia, dbFieldTypeDouble))
        
        Call .AddValue("tp_frete", "@pTipoFrete")
        Call .Parameters.add(.CreateParameter("@pTipoFrete", objFreteSaida.tipoFrete, dbFieldTypeString, 1))
        
        Call .AddValue("qt_produtos", "@pQuantidadeProdutos")
        Call .Parameters.add(.CreateParameter("@pQuantidadeProdutos", objFreteSaida.quantidadeProdutos, dbFieldTypeDouble))
        
        Call .AddValue("pr_tarifa", "@pPercTarifa")
        Call .Parameters.add(.CreateParameter("@pPercTarifa", objFreteSaida.porcentagemTarifa, dbFieldTypeDouble))
        
        Call .AddValue("vl_pedagio", "@pVlPedagio")
        Call .Parameters.add(.CreateParameter("@pVlPedagio", objFreteSaida.valorPedagio, dbFieldTypeDouble))
        
        Call .AddValue("vl_seguro", "@pVlSeguro")
        Call .Parameters.add(.CreateParameter("@pVlSeguro", objFreteSaida.ValorSeguro, dbFieldTypeDouble))
        
        Call .AddValue("vl_outros", "@pVlOutros")
        Call .Parameters.add(.CreateParameter("@pVlOutros", objFreteSaida.ValorOutros, dbFieldTypeDouble))
        
        Call .AddValue("vl_acrescimo", "@pVlAcrescimo")
        Call .Parameters.add(.CreateParameter("@pVlAcrescimo", objFreteSaida.valorAcrescimo, dbFieldTypeDouble))
        
        Call .AddValue("vl_desconto", "@pVlDesconto")
        Call .Parameters.add(.CreateParameter("@pVlDesconto", objFreteSaida.ValorDesconto, dbFieldTypeDouble))
        
        Call .AddValue("vl_isentas", "@pVlIsentas")
        Call .Parameters.add(.CreateParameter("@pVlIsentas", objFreteSaida.valorIsentas, dbFieldTypeDouble))
        
        Call .AddValue("vl_conhecimento", "@pVlConhecimento")
        Call .Parameters.add(.CreateParameter("@pVlConhecimento", objFreteSaida.valorConhecimento, dbFieldTypeDouble))
        
        Call .AddValue("vl_base_icms", "@pVlBaseIcms")
        Call .Parameters.add(.CreateParameter("@pVlBaseIcms", objFreteSaida.valorBaseICMS, dbFieldTypeDouble))
        
        Call .AddValue("pr_icms", "@pPrIcms")
        Call .Parameters.add(.CreateParameter("@pPrIcms", objFreteSaida.porcentagemICMS, dbFieldTypeDouble))
        
        Call .AddValue("vl_icms", "@pVlIcms")
        Call .Parameters.add(.CreateParameter("@pVlIcms", objFreteSaida.ValorICMS, dbFieldTypeDouble))
        
        Call .AddValue("endereco_entrega", "@pEnderecoEntrega")
        Call .Parameters.add(.CreateParameter("@pEnderecoEntrega", objFreteSaida.Entrega.Endereco, dbFieldTypeString, 60))
        
        Call .AddValue("cidade_entrega", "@pCidadeEntrega")
        Call .Parameters.add(.CreateParameter("@pCidadeEntrega", objFreteSaida.Entrega.Cidade, dbFieldTypeString, 30))
        
        Call .AddValue("uf_entrega", "@pUfEntrega")
        Call .Parameters.add(.CreateParameter("@pUfEntrega", objFreteSaida.Entrega.uf.Sigla, dbFieldTypeString, 2))
        
        'pt. 95345 - Ivo Sousa (09/07/2010)
        Call .AddValue("numero_entrega", "@pNrEntrega")
        Call .Parameters.add(.CreateParameter("@pNrEntrega", objFreteSaida.Entrega.Numero, dbFieldTypeLong))
        
        'pt. 95345 - Ivo Sousa (09/07/2010)
        Call .AddValue("bairro_entrega", "@pBairroEntrega")
        Call .Parameters.add(.CreateParameter("@pBairroEntrega", objFreteSaida.Entrega.Bairro, dbFieldTypeString))
        
        Call .AddValue("endereco_coleta", "@pEnderecoColeta")
        Call .Parameters.add(.CreateParameter("@pEnderecoColeta", objFreteSaida.coleta.Endereco, dbFieldTypeString, 60))
        
        Call .AddValue("cidade_coleta", "@pCidadeColeta")
        Call .Parameters.add(.CreateParameter("@pCidadeColeta", objFreteSaida.coleta.Cidade, dbFieldTypeString, 30))
        
        Call .AddValue("uf_coleta", "@pUfColeta")
        Call .Parameters.add(.CreateParameter("@pUfColeta", objFreteSaida.coleta.uf.Sigla, dbFieldTypeString, 2))
        
        'pt. 95345 - Ivo Sousa (09/07/2010)
        Call .AddValue("numero_coleta", "@pNrColeta")
        Call .Parameters.add(.CreateParameter("@pNrColeta", objFreteSaida.coleta.Numero, dbFieldTypeLong))
        
        'pt. 95345 - Ivo Sousa (09/07/2010)
        Call .AddValue("bairro_coleta", "@pBairroColeta")
        Call .Parameters.add(.CreateParameter("@pBairroColeta", objFreteSaida.coleta.Bairro, dbFieldTypeString))
        
        Call .AddValue("situacao", "@pSituacao")
        Call .Parameters.add(.CreateParameter("@pSituacao", objFreteSaida.situacao, dbFieldTypeString, 1))
        
        If objFreteSaida.Obs <> "" Then
            Call .AddValue("obs", "@pObs")
            Call .Parameters.add(.CreateParameter("@pObs", objFreteSaida.Obs, dbFieldTypeString, 250))
        End If
        
        Call .AddValue("vl_frete", "@pVlFrete")
        Call .Parameters.add(.CreateParameter("@pVlFrete", objFreteSaida.ValorFrete, dbFieldTypeDouble))
        
        Call .AddValue("cd_operacao_contabil", "@pOperacaoContabil")
        Call .Parameters.add(.CreateParameter("@pOperacaoContabil", objFreteSaida.OperacaoContabil, dbFieldTypeLong))
        
        'pt. 92345 - Ivo Sousa (16/04/2009)
        Call .AddValue("centro_custo", "@pCentroCusto")
        Call .Parameters.add(.CreateParameter("@pCentroCusto", objFreteSaida.CentroCusto, dbFieldTypeLong))
        
        Call .AddValue("conta_financeira", "@pContaFinanceira")
        Call .Parameters.add(.CreateParameter("@pContaFinanceira", objFreteSaida.ContaFinanceira, dbFieldTypeLong))
        
        'pt. 95345 - Ivo Sousa (09/07/2010)
        Call .AddValue("tipo_cte", "@pTipoCTe")
        Call .Parameters.add(.CreateParameter("@pTipoCTe", objFreteSaida.TipoCTe, dbFieldTypeString))
        
        Call .AddValue("tipo_servico", "@pTipoServico")
        Call .Parameters.add(.CreateParameter("@pTipoServico", objFreteSaida.TipoServico, dbFieldTypeString))
        
        Call .AddValue("retira", "@pRetira")
        Call .Parameters.add(.CreateParameter("@pRetira", objFreteSaida.Retira, dbFieldTypeBool))
        
        Call .AddValue("cst_icms", "@pCstIcms")
        Call .Parameters.add(.CreateParameter("@pCstIcms", objFreteSaida.SitTributariaICMS, dbFieldTypeString))

        'Informações complementares da Carga
        Call .AddValue("produto_predominante", "@pProdutoPredominante")
        Call .Parameters.add(.CreateParameter("@pProdutoPredominante", objFreteSaida.InformacoesCarga.ProdutoPredominante, dbFieldTypeString))
        
        Call .AddValue("outras_caracteristicas", "@pOutrasCaracteristicas")
        Call .Parameters.add(.CreateParameter("@pOutrasCaracteristicas", objFreteSaida.InformacoesCarga.OutrasCaracteristicas, dbFieldTypeString))
        
        'Projeto: 200959 - Desenv.: - Ueder Budni (29/11/2017)
        Call .AddValue("vl_carga_efeito_averb", "@pVlCargaEfAverb")
        Call .Parameters.add(.CreateParameter("@pVlCargaEfAverb", objFreteSaida.InformacoesCarga.ValorDaCargaParaEfeitoAverbacao, dbFieldTypeDecimal))
                
        Call .AddValue("RNTRC", "@pRNTRC")
        Call .Parameters.add(.CreateParameter("@pRNTRC", objFreteSaida.InformacoesCarga.RNTRC, dbFieldTypeString))
        
        Call .AddValue("data_prevista", "@pDataPrevista")
        Call .Parameters.add(.CreateParameter("@pDataPrevista", objFreteSaida.InformacoesCarga.DataPrevista, dbFieldTypeDate))
                
        Call .AddValue("Lotado", "@pLotado")
        Call .Parameters.add(.CreateParameter("@pLotado", objFreteSaida.InformacoesCarga.Lotado, dbFieldTypeBool))
        
        Call .AddValue("motivo_cancelamento", "@pMotivoCancelamento")
        Call .Parameters.add(.CreateParameter("@pMotivoCancelamento", objFreteSaida.MotivoCanc, dbFieldTypeString))
        
        Call .AddValue("user_canc", "@pUserCanc")
        Call .Parameters.add(.CreateParameter("@pUserCanc", objFreteSaida.UserCanc, dbFieldTypeString))
        
        Call .AddValue("date_canc", "@pDateCanc")
        Call .Parameters.add(.CreateParameter("@pDateCanc", objFreteSaida.DateCanc, dbFieldTypeDate))
        
        Call .AddValue("xml_geracao", "@pXmlGeracao")
        Call .Parameters.add(.CreateParameter("@pXmlGeracao", objFreteSaida.XMLGeracao, dbFieldTypeString))
        
        'Projeto: #8153 - História: #8398 - Desenvolvimento#8402 - Moacir Pfau(03/06/2013)
        Call .AddValue("total_ibpt", "@pTotal_ibpt")
        Call .Parameters.add(.CreateParameter("@pTotal_ibpt", objFreteSaida.Total_ibpt, dbFieldTypeDouble))
        
        Call .AddValue("pr_ibpt", "@pPr_ibpt")
        Call .Parameters.add(.CreateParameter("@pPr_ibpt", objFreteSaida.pr_ibpt, dbFieldTypeDouble))
        
        Call .AddValue("versao_ibpt", "@pVers_ibpt")
        Call .Parameters.add(.CreateParameter("@pVers_ibpt", objFreteSaida.Versao_IBPT, dbFieldTypeString))
        
        Call .AddValue("cd_servico", "@pCd_servico")
        Call .Parameters.add(.CreateParameter("@pCd_servico", objFreteSaida.Cd_servico, dbFieldTypeLong))
        
        'Projeto: #11743 - História: #(Item não planejado) - Desenvolvimento: #0 - Ivo Sousa(19/09/2013)
        Call cmd.AddValue("aliq_icms_st_ctrc", "@pAliqIcmsSTCtrc")
        Call cmd.Parameters.add(cmd.CreateParameter("@pAliqIcmsSTCtrc", objFreteSaida.AliquotaICMSSTCTRC, dbFieldTypeInt))

        Call cmd.AddValue("mva_icms_st_ctrc", "@pMvaIcmsSTCtrc")
        Call cmd.Parameters.add(cmd.CreateParameter("@pMvaIcmsSTCtrc", objFreteSaida.MVAICMSSTCTRC, dbFieldTypeDouble))

        Call cmd.AddValue("base_icms_st_ctrc", "@pBaseIcmsSTCtrc")
        Call cmd.Parameters.add(cmd.CreateParameter("@pBaseIcmsSTCtrc", objFreteSaida.BaseICMSSTCTRC, dbFieldTypeDouble))

        Call cmd.AddValue("valor_icms_st_ctrc", "@pValorIcmsSTCtrc")
        Call cmd.Parameters.add(cmd.CreateParameter("@pValorIcmsSTCtrc", objFreteSaida.ValorICMSSTCTRC, dbFieldTypeDouble))
        
        'Projeto: - Desenv.: - Ueder Budni (29/05/2017)
        Call cmd.AddValue("perc_red_aliq", "@pPercRedAliq")
        Call cmd.Parameters.add(cmd.CreateParameter("@pPercRedAliq", objFreteSaida.PercRedAliq, dbFieldTypeDouble))
        
        Call cmd.AddValue("perc_red_base", "@pPercRedBase")
        Call cmd.Parameters.add(cmd.CreateParameter("@pPercRedBase", objFreteSaida.PercRedBase, dbFieldTypeDouble))
        
        Call cmd.AddValue("vl_base_icms_reduzida", "@pVlBaseICMSReduzida")
        Call cmd.Parameters.add(cmd.CreateParameter("@pVlBaseICMSReduzida", objFreteSaida.BaseICMSReduzida, dbFieldTypeDouble))
        
        Call cmd.AddValue("vl_icms_diferido", "@pVlICMSDiferido")
        Call cmd.Parameters.add(cmd.CreateParameter("@pVlICMSDiferido", objFreteSaida.ValorICMSDiferido, dbFieldTypeDouble))
        
        ' 23/01/2020 - HyperCube: INC-9528 - Yuji F. - Possibilitando que a alteração dos impostos seja exibida corretamente
        Call cmd.AddValue("imposto_manual", "@pImpostoManual")
        Call cmd.Parameters.add(cmd.CreateParameter("@pImpostoManual", objFreteSaida.ImpostoManual, dbFieldTypeBool))
        
    End With
End Sub

Public Function Excluir(ByVal objFreteSaida As cFreteReceber, ByRef objAplicacao As IApplication, Optional dtDataEmissao As Date) As Boolean
    Dim DAODuplicata As New cTituloDAO
    Dim DAOMercadoria As New cFreteMercadoriaReceberDAO
    Dim DAOMotorista As New cMotoristaFreteReceberDAO
    Dim cmd As IDBDeleteCommand
    Dim strTipoData As String
    Dim objCTeItensInfQuantidadeDAO As New clsCTeItensInfQuantidadeDAO
    Dim objCTeInfSeguroDAO          As New clsCTeInformacoesSeguroDAO
    
On Error GoTo erro_excluindo
    Excluir = True
    Set DAODuplicata = New cTituloDAO
    With objFreteSaida
        
        'Exclui todas as duplicatas do titulo
        DAODuplicata.numeroConhecimento = objFreteSaida.numeroConhecimento
        DAODuplicata.tipoConhecimento = objFreteSaida.TipoRegistro
        DAODuplicata.Transportadora = objFreteSaida.codigoTransportadora
        DAODuplicata.SeqConhecimento = objFreteSaida.SeqConhecimento
        If Not DAODuplicata.Excluir(.Titulo, objAplicacao) Then
            GoTo erro_excluindo
        End If
        Set DAODuplicata = Nothing
        
        DAOMotorista.numeroConhecimento = objFreteSaida.numeroConhecimento
        DAOMotorista.tipoConhecimento = objFreteSaida.TipoRegistro
        DAOMotorista.SeqConhecimento = objFreteSaida.SeqConhecimento
        .motoristas.MoveFirst
        'Exclui todos os motoristas do conhecimento
        While Not .motoristas.EOF
            If Not DAOMotorista.Excluir(.motoristas.CurrentObject, objAplicacao) Then
                GoTo erro_excluindo
            Else
                Call .motoristas.MoveNext(False)
            End If
        Wend
        Set DAOMotorista = Nothing
        
        .mercadorias.MoveFirst
        'Exclui todas as mercadorias do conhecimento
        DAOMercadoria.codigoFrete = objFreteSaida.numeroConhecimento
        DAOMercadoria.tipoFrete = objFreteSaida.TipoRegistro
        DAOMercadoria.SeqConhecimento = objFreteSaida.SeqConhecimento
        While Not .mercadorias.EOF
            If Not DAOMercadoria.Excluir(.mercadorias.CurrentObject, objAplicacao) Then
                GoTo erro_excluindo
            Else
                .mercadorias.MoveNext
            End If
        Wend
        Set DAOMercadoria = Nothing
       
        'pt. 95345 - Ivo Sousa (12/09/2010)
        With objCTeItensInfQuantidadeDAO
            .NrConhecimento = objFreteSaida.numeroConhecimento
            .TpRegistro = objFreteSaida.TipoRegistro
            .SeqConhecimento = objFreteSaida.SeqConhecimento
            If Not .deletarRegistros(objAplicacao) Then
                GoTo erro_excluindo
            End If
        End With
        Set objCTeItensInfQuantidadeDAO = Nothing
        
        'Projeto: #7373 - História: #7973 - Desenvolvimento: #7976 - Ivo Sousa(15/05/2013)
        With objCTeInfSeguroDAO
            .NrConhecimento = objFreteSaida.numeroConhecimento
            .TpRegistro = objFreteSaida.TipoRegistro
            .SeqConhecimento = objFreteSaida.SeqConhecimento
            If Not .deletarRegistros(objAplicacao) Then
                GoTo erro_excluindo
            End If
        End With
        Set objCTeInfSeguroDAO = Nothing
        
       'Exclui as informações do frete
        Set cmd = objAplicacao.CreateDeleteCommand
        cmd.Table = NomeTabela
        Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", .numeroConhecimento, dbFieldTypeLong))
        Call cmd.Filter.Append("tp_registro = @pTpConhecimento")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTpConhecimento", .TipoRegistro, dbFieldTypeString, 20))
        Call cmd.Filter.Append("seq_conhecimento = @pSeqConhecimento")
        Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", .SeqConhecimento, dbFieldTypeLong))
        Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
        Set cmd = Nothing
    End With
    Exit Function

erro_excluindo:
    Err.Clear
    Excluir = False
End Function

Public Function TransmiteCTe(strTipoGlobal As String) As Boolean
    Dim objControleSeqCTe As New clsControleSeqCTe
    Dim objControleSeqCTeADO As New clsControleSeqCTeADO
    
On Error GoTo err_Handler
    Aplicacao.Connect
    Set objControleSeqCTeADO.App = Aplicacao
    Set objControleSeqCTe = objControleSeqCTeADO.carregaRegistro(strTipoGlobal)
    If Not objControleSeqCTe Is Nothing Then
        TransmiteCTe = objControleSeqCTe.UtilizaCTe
    End If
    Aplicacao.Disconnect
    Exit Function
err_Handler:
    Aplicacao.Disconnect
End Function

Public Function CriarFilaTransmissao(ByVal objConhecimento As cFreteReceber, objAplicacao As IApplication) As Boolean
    Dim objTransmissaoCTe As New clsTransmissaoCTe
    Dim strErro As String
    
On Error GoTo err_Handler
    With objTransmissaoCTe
        .objAplicacao = objAplicacao
        .SeqConhecimento = objConhecimento.SeqConhecimento
        .EnterpriseID = EnterpriseID
        .CdEstabelecimento = CdEstabelecimento
        .OrigemCte = CTeSaida
        .NrConhecimento = objConhecimento.numeroConhecimento
        .TpRegistro = objConhecimento.TipoRegistro
        .Remetente = objConhecimento.codigoRemetente
        .Destinatario = objConhecimento.codigoDestinatario
        .dataEmissao = objConhecimento.Emissao
        CriarFilaTransmissao = .CriarFilaTransmissao(objConhecimento, CTeSaida, strErro)
    End With
    Exit Function
    
err_Handler:
    Call MsgBox("Ocorreu um erro ao gerar a fila de trasnmissão: " & Err.Description, vbExclamation, NomeModulo)
End Function

Public Function AtualizarControleSeq(ByVal objConhecimento As cFreteReceber, objApp As IApplication) As Boolean
    Dim objControleSeqCTe       As New clsControleSeqCTe
    Dim objControleSeqCTeADO    As New clsControleSeqCTeADO
    
On Error GoTo err_Handler
        
    'Projeto: 1222 - História: #9972 - Ivo Sousa (23/04/2012)
    Set objControleSeqCTeADO.App = objApp
    Set objControleSeqCTe = objControleSeqCTeADO.carregaRegistro(objConhecimento.TipoRegistro)
    If Not objControleSeqCTe Is Nothing Then
        objControleSeqCTe.NrConhecimentoAtual = objConhecimento.numeroConhecimento
        AtualizarControleSeq = objControleSeqCTeADO.PersistiRegistro(objControleSeqCTe)
    Else
        AtualizarControleSeq = True
    End If
    Exit Function
err_Handler:
    AtualizarControleSeq = False
End Function

'Projeto: 100340 - Desenv.: 173908 - Ueder Budni (12/07/2017)
Public Function CarregarTodos(ByVal strTpReg As String, ByVal strEmpresa As String, ByVal lngCTeIni As Long, ByVal lngCTeFin As Integer, ByVal dteEmissaoIni As Date, ByVal dteEmissaoFin As Date, ByVal strChaveAcesso As String) As Collection
    Dim cmd         As IDBSelectCommand
    Dim rdResult    As IDBReader
    Dim objAux      As cFreteReceber
    Dim oJoin       As CDBJoin
    
On Error GoTo err_Handler
    mstrErro = Empty
    Set cmd = Aplicacao.CreateSelectCommand
    With cmd
        .Table.TableName = NomeTabela
        .SelectClause = NomeTabela & ".*"
        
        Set oJoin = New CDBJoin
        oJoin.init
        With oJoin
            .JoinType = dbJoinTypeInner
            .LeftTable.TableName = NomeTabela
            .RightTable.TableName = TABELA_TRANSM_CTE
            Call .AddJoinField("nr_conhecimento", "nr_conhecimento")
            Call .AddJoinField("tp_registro", "tp_registro")
        End With
        
        Call .AddJoin(oJoin)
        
        If strTpReg <> Empty Then
            Call .Filter.Append("tp_registro = @pTpReg")
            Call .Parameters.add(.CreateParameter("@pTpReg", strTpReg, dbFieldTypeString))
        End If
        
        If lngCTeIni > 0 Then
            Call .Filter.Append("nr_conhecimento >= @pNrCTeIni")
            Call .Parameters.add(.CreateParameter("@pNrCTeIni", lngCTeIni, dbFieldTypeLong))
        End If
            
        If lngCTeFin > 0 Then
            Call .Filter.Append("nr_conhecimento <= @pNrCTeFin")
            Call .Parameters.add(.CreateParameter("@pNrCTeFin", lngCTeFin, dbFieldTypeLong))
        End If
            
        If dteEmissaoIni <> "00:00:00" Then
            Call .Filter.Append("dt_emissao >= @pDtIni")
            Call .Parameters.add(.CreateParameter("@pDtIni", dteEmissaoIni, dbFieldTypeDate))
        End If
            
        If dteEmissaoFin <> "00:00:00" Then
            Call .Filter.Append("dt_emissao <= @pDtFin")
            Call .Parameters.add(.CreateParameter("@pDtFin", dteEmissaoFin, dbFieldTypeDate))
        End If
       
        If strEmpresa <> Empty Then
            Call .Filter.Append("cd_destinatario = @pDest")
            Call .Parameters.add(.CreateParameter("@pDest", strEmpresa, dbFieldTypeString))
        End If
            
        If strChaveAcesso <> Empty Then
            Call .Filter.Append("chave_acesso = @pChave")
            Call .Parameters.add(.CreateParameter("@pDest", strChaveAcesso, dbFieldTypeString))
        End If
        
        Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    End With
    
    If Not rdResult Is Nothing Then
        Set CarregarTodos = New Collection
        While Not rdResult.EOF
            Set objAux = New cFreteReceber
            Set objAux = objAux.CriarObjeto(rdResult)
            
            CarregarTodos.add objAux
            Set objAux = Nothing
            rdResult.MoveNext
        Wend
    End If
    
    Set cmd = Nothing
    Set rdResult = Nothing
    Exit Function
    
err_Handler:
    mstrErro = "Erro ao Buscar lista de CTe: " & Err.Description
    If Not objLog Is Nothing Then
        objLog.AddLog mstrErro
        objLog.AddLog "Ultima consulta executada: " & Aplicacao.GetSQL
    End If
    
    Set rdResult = Nothing
    Set CarregarTodos = Nothing
    Set cmd = Nothing
End Function
