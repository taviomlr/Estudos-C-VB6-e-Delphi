VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cFretePagarDAO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cFretePagarDAO
''  Generated by Enterprise Architect
''  Created on:      15-set-2006 16:46:38
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private Const NomeTabela$ = "FreteEntrada"
Private mintNrGravacoes As Integer
Private bGeraDup As Boolean

Public Property Get GeraDup() As Boolean
    GeraDup = bGeraDup
End Property

Public Property Let GeraDup(ByVal NewVal As Boolean)
    bGeraDup = NewVal
End Property

Public Function persistir(ByVal obj As cFretePagar, ByVal objAplicacao As IApplication, Optional dtDataEntrada As Date) As Boolean
    Dim cmd As IDBInsertCommand
    Dim objNotasFiscaisDAO As New cFretePagarNotaFiscalDAO
    Dim objTituloDAO As New cTituloDAO
    Dim strTipoData As String
    'Dim lngNumeroConhecimento As Long
    
On Error GoTo erro_persistindo
    
    'If obj.numeroConhecimentoOld <> 0 Then
    '    lngNumeroConhecimento = obj.numeroConhecimentoOld
    'Else
    '    lngNumeroConhecimento = obj.numeroConhecimento
    'End If
    
    Set cmd = objAplicacao.CreateInsertCommand
    persistir = True
    cmd.Table = NomeTabela
    
    Call cmd.AddValue("nr_conhecimento", "@pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", obj.numeroConhecimento, dbFieldTypeLong))
    'Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", lngNumeroConhecimento, dbFieldTypeLong))
    
    Call cmd.AddValue("tp_registro", "@pTipoRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipoRegistro", obj.TipoRegistro, dbFieldTypeString, 20))
    
    Call cmd.AddValue("cd_transportadora", "@pTransportadora")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", obj.codigoTransportadora, dbFieldTypeLong))
    
    Call prepareCommand(cmd, obj)
    
    Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
    
    objNotasFiscaisDAO.numeroConhecimento = obj.numeroConhecimento
    'objNotasFiscaisDAO.numeroConhecimento = lngNumeroConhecimento
    objNotasFiscaisDAO.tipoConhecimento = obj.TipoRegistro
    
    If obj.notasFiscais.Count > 0 Then
        If Not objNotasFiscaisDAO.persistir(obj.notasFiscais, objAplicacao) Then
            persistir = False
            Exit Function
        End If
    End If
    
    Set objNotasFiscaisDAO = Nothing
    
    If bGeraDup Then
        objTituloDAO.numeroConhecimento = obj.numeroConhecimento
        'objTituloDAO.numeroConhecimento = lngNumeroConhecimento
        
        objTituloDAO.tipoConhecimento = obj.TipoRegistro
        objTituloDAO.PagRec = "P"
        'pt. 82395 - Dulcino Júnior
        objTituloDAO.OperacaoContabil = obj.OperacaoContabil
        'pt. 86013 - Ivo Sousa(20/05/2008)
        objTituloDAO.Transportadora = obj.codigoTransportadora
        objTituloDAO.Tabela = "FreteEntradaDuplicata"
        'pt. 86678 - Ivo Sousa(26/05/2008)
        If ValidaDatasDiasUteis(0, dtDataEntrada, , , False, strTipoData, , ID_MODULO_FINANCEIRO) Or strTipoData <> "X" Then
            If Not objTituloDAO.persistir(obj.Titulo, objAplicacao) Then
                persistir = False
                Exit Function
            End If
        Else
            MsgBox "Não foi possivel gerar as Duplicatas." & vbCrLf & _
            "O Modulo Financeiro esta com o movimento conferido para a data de entrada informada.", vbOKOnly + vbInformation, NomeModulo
        End If
    End If
    Set objTituloDAO = Nothing
    Set cmd = Nothing
    Exit Function
    
erro_persistindo:
    'História 15197 - Tarefa 15198 - Ivo Sousa (19/07/2012)
'    If err.Number = -2147220499 Then
'        If mintNrGravacoes <= 4 Then
'            mintNrGravacoes = mintNrGravacoes + 1
'            Call Sleep(2000)
'            obj.numeroConhecimento = lastCodigo
'            Call persistir(obj, objAplicacao, dtDataEntrada)
'        Else
'            err.clear
'            persistir = False
'        End If
'    Else
'        err.clear
        persistir = False
'    End If
End Function

Public Function existir(ByVal lngCodigo As Long, Optional lngTranportadora As Long, Optional strTipoRegistro) As Boolean
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    Call cmd.Filter.Append("nr_conhecimento = @pNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", lngCodigo, dbFieldTypeLong))
    'pt. 86013 - Ivo Sousa(15/05/2008)
    If lngTranportadora > 0 Then
        Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", lngTranportadora, dbFieldTypeLong))
    End If
    'Projeto: 1222 - História: #9972 - Ivo Sousa (13/04/2012)
    Call cmd.Filter.Append("tp_registro = @pTipoRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipoRegistro", strTipoRegistro, dbFieldTypeString))
    
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    existir = Not rdResult.EOF
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
End Function

Public Function Carregar(ByVal lngCodigo As Long, ByVal strTipoRegistro As String, Optional lngTranportadora As Long) As cFretePagar
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    Dim Frete As New cFretePagar

On Error GoTo erro_carregando
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    
    Call cmd.Filter.Append("nr_conhecimento = @pNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", lngCodigo, dbFieldTypeLong))
    
    'Projeto: 1222 - História: #9972 - Ivo Sousa (12/04/2012)
    Call cmd.Filter.Append("tp_registro = @pTpRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistro", strTipoRegistro, dbFieldTypeString))
    
    'pt. 86013 - Ivo Sousa(15/05/2008)
    If lngTranportadora > 0 Then
        Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", lngTranportadora, dbFieldTypeLong))
    End If
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        Set Carregar = Frete.CriarObjeto(rdResult)
    End If
    Carregar.notasFiscais.Transportadora = Carregar.codigoTransportadora
    Carregar.notasFiscais.MoveFirst
    'Vinicius Elyseu(29/11/2015) - Projeto: #0 - História: #0 - Desenv: #100391
    If Carregar.notasFiscais.Count > 0 Then
        Carregar.notasFiscais.registroEntrada = Carregar.notasFiscais.CurrentObject.entrada
    End If
    Aplicacao.Disconnect
    Exit Function
erro_carregando:
    Set Carregar = Nothing
End Function

Public Function lastCodigo() As Long
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    cmd.SelectClause = "MAX(nr_conhecimento) AS lastCod"
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        lastCodigo = rdResult.GetLong("lastCod") + 1
    Else
        lastCodigo = 1
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
End Function

Public Function Atualizar(ByVal obj As cFretePagar, ByVal objAplicacao As IApplication, Optional dtDataEntrada As Date) As Boolean
    Dim objFrete As cFretePagar
    Dim booErro As Boolean
    
On Error GoTo erro_atualizando
    
    'Projeto: 1222 - História: #9972 - Ivo Sousa (12/04/2012)
    If obj.numeroConhecimentoOld = 0 Then
        Set objFrete = Carregar(obj.numeroConhecimento, obj.TipoRegistro, obj.codigoTransportadora)
    Else
        Set objFrete = Carregar(obj.numeroConhecimentoOld, obj.TipoRegistro, obj.codigoTransportadora)
    End If
    
    If objFrete.PermiteAlteracao Then
        If objFrete.notasFiscais.registroEntrada Then
'            If objFrete.ApagaMovimento Then
                If Excluir(objFrete, objAplicacao, dtDataEntrada) Then
                    Atualizar = persistir(obj, objAplicacao, dtDataEntrada)
                    If Not obj.MovimentaEstoque Then
                        MsgBox "Não foi possivel movimentar o estoque.", vbInformation
                    End If
                Else
                    Atualizar = False
                End If
'            Else
'                If Excluir(objFrete, objAplicacao, dtDataEntrada) Then
'                    Atualizar = persistir(obj, objAplicacao)
'                    If obj.rateiaValorProdutos Then
'                        If Not obj.MovimentaEstoque Then
'                            MsgBox "Não foi possivel movimentar o estoque., vbInformation"
'                        End If
'                    End If
'                Else
'                    Atualizar = False
'                End If
'            End If
        Else
            If Excluir(objFrete, objAplicacao, dtDataEntrada) Then
                Atualizar = persistir(obj, objAplicacao, dtDataEntrada)
            Else
                Atualizar = False
            End If
        End If
    Else
        Dim daoTitulo As New cTituloDAO
        
        Atualizar = AtualizaNumeroConhecimento(obj, objAplicacao)
                 
        '/Atualiza os dados das Duplicatas a pagar emitidas
        daoTitulo.numeroConhecimento = obj.numeroConhecimento
        
        daoTitulo.tipoConhecimento = obj.TipoRegistro
        daoTitulo.PagRec = "P"
        'pt. 82395 - Dulcino Júnior
        daoTitulo.OperacaoContabil = obj.OperacaoContabil
        'pt. 86013 - Ivo Sousa(20/05/2008)
        daoTitulo.Transportadora = obj.codigoTransportadora
        Atualizar = Atualizar + daoTitulo.Alterar(obj.Titulo, objAplicacao, obj.numeroConhecimentoOld)
        Set daoTitulo = Nothing
    End If
    Exit Function

erro_atualizando:
    Atualizar = False
    Resume
    Call Throw(err) 'repasso o erro
End Function

Public Function AtualizaNumeroConhecimento(ByVal obj As cFretePagar, ByVal objAplicacao As IApplication) As Boolean
    Dim cmd As IDBUpdateCommand
    Dim rdResult As IDBReader
    'Dim frete As New cFretePagar
    Dim daoNotaFiscal As New cFretePagarNotaFiscalDAO
    Dim daoTitulo As New cTituloDAO
    Dim bolGravou As Boolean
    Dim lngNumeroConhecimento As Long
    Dim oNatOper As New CNaturezasdeOperacao
    
On Error GoTo erro_atualizando
    'Aplicacao.Connect
    Set cmd = Aplicacao.CreateUpdateCommand
    cmd.Table = NomeTabela
    
    
    If obj.numeroConhecimentoOld <> 0 Then
        lngNumeroConhecimento = obj.numeroConhecimentoOld
    Else
        lngNumeroConhecimento = obj.numeroConhecimento
    End If
    
    Call cmd.Filter.Append("nr_conhecimento = @pNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", lngNumeroConhecimento, dbFieldTypeLong))
        
    Call cmd.Filter.Append("tp_registro = @pTpRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistro", obj.TipoRegistro, dbFieldTypeString))
    
    Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", obj.codigoTransportadora, dbFieldTypeLong))
    
    Call cmd.AddValue("nr_conhecimento", "@pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", obj.numeroConhecimento, dbFieldTypeLong))
        
    bolGravou = Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd)
  
    bolGravou = bolGravou + daoNotaFiscal.AtualizaNumeroConhecimeto(lngNumeroConhecimento, obj.TipoRegistro, obj.codigoTransportadora, _
                                                                    obj.numeroConhecimento, objAplicacao)
    
    daoTitulo.Tabela = "FreteEntradaDuplicata"
    bolGravou = bolGravou + daoTitulo.AtualizaNumeroConhecimeto(lngNumeroConhecimento, obj.TipoRegistro, obj.codigoTransportadora, _
                                                                obj.numeroConhecimento, objAplicacao)
           
    If oNatOper.NaturezaOperacaoMovEst(obj.codigoCfop, obj.codigoCfopVar) Then
        bolGravou = bolGravou + AtualizaNrDocNoEstoque(lngNumeroConhecimento, obj.dataEmissao, _
                                                       obj.numeroConhecimento, objAplicacao)
    End If
    
    AtualizaNumeroConhecimento = bolGravou
    Exit Function
erro_atualizando:
    AtualizaNumeroConhecimento = False
End Function

Private Function AtualizaNrDocNoEstoque(ByVal lngNumeroConhecimento As Long, ByVal dteDataMov As Date, ByVal lngNumeroConhecimentoNovo As Long, objApp As IApplication) As Boolean
    Dim cmd As IDBUpdateCommand
    Dim rdResult As IDBReader
    Dim rdItens As IDBReader
    Dim EnumOriMov                  As New EST_ORIGEM_MOV_ENUM
    Dim enumEntSai                  As New EST_MOV_ENUM
    
On Error GoTo erro_atualizando
    Set cmd = objApp.CreateUpdateCommand
    cmd.Table = "ESTMOVIMENTO"
    
    'Filtros
   
    Call cmd.Filter.Append("DATMOV = @pDtMov")
    Call cmd.Parameters.add(cmd.CreateParameter("@pDtMov", dteDataMov, dbFieldTypeDate))
   
    Call cmd.Filter.Append("NRODOC = @pNrDoc")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrDoc", lngNumeroConhecimento, dbFieldTypeLong))
    
    Call cmd.Filter.Append("ENTSAI = @pEntSai")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEntSai", "E", dbFieldTypeString))

    Call cmd.Filter.Append("ORIMOV = @pOriMov")
    Call cmd.Parameters.add(cmd.CreateParameter("@pOriMov", "CTRC", dbFieldTypeString))

    'Novo Número
    
    Call cmd.AddValue("NRODOC", "@pNovoNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNovoNumero", lngNumeroConhecimentoNovo, dbFieldTypeLong))
         
    AtualizaNrDocNoEstoque = objApp.ExecuteUpdate(objApp.GetInternalAuthorization, cmd)
    Exit Function
    
erro_atualizando:
    AtualizaNrDocNoEstoque = False
End Function

Public Function Excluir(ByVal obj As cFretePagar, ByVal objAplicacao As IApplication, Optional dtDataEntrada As Date) As Boolean
    Dim cmd                As IDBDeleteCommand
    Dim objNotasFiscaisDAO As New cFretePagarNotaFiscalDAO
    Dim objTituloDAO       As New cTituloDAO
    Dim strTipoData        As String
    
On Error GoTo erro_excluindo
    Set cmd = objAplicacao.CreateDeleteCommand
    cmd.Table = NomeTabela
    Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", obj.numeroConhecimento, dbFieldTypeLong))
    'Projeto: 1222 - História: #9972 - Ivo Sousa (13/04/2012)
    Call cmd.Filter.Append("tp_registro = @pTipoRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipoRegistro", obj.TipoRegistro, dbFieldTypeString, 20))
    Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", obj.codigoTransportadora, dbFieldTypeLong))
    objTituloDAO.numeroConhecimento = obj.numeroConhecimento
    objTituloDAO.tipoConhecimento = obj.TipoRegistro
    objTituloDAO.PagRec = "P"
    objTituloDAO.Tabela = "FreteEntradaDuplicata"
    objTituloDAO.Transportadora = obj.codigoTransportadora
    'pt. 86678 - Ivo Sousa(26/05/2008)
    If ValidaDatasDiasUteis(0, dtDataEntrada, , , False, strTipoData, , ID_MODULO_FINANCEIRO) Or strTipoData <> "X" Then
        If Not objTituloDAO.Excluir(obj.Titulo, objAplicacao, "CTe") Then
            Excluir = False
            Exit Function
        End If
    Else
        MsgBox "O Modulo financeiro esta com o movimento conferido para a data de entrada informada.", vbOKOnly + vbInformation, NomeModulo
    End If
    Set objTituloDAO = Nothing
    objNotasFiscaisDAO.numeroConhecimento = obj.numeroConhecimento
    objNotasFiscaisDAO.tipoConhecimento = obj.TipoRegistro
    If obj.notasFiscais.Count > 0 Then
        If Not objNotasFiscaisDAO.Excluir(obj.notasFiscais, objAplicacao) Then
            Excluir = False
            Exit Function
        End If
    End If
    Set objNotasFiscaisDAO = Nothing
    Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
    Excluir = True
    Set cmd = Nothing
    Exit Function
erro_excluindo:
    Excluir = False
    Throw err
End Function

Private Sub prepareCommand(ByVal cmd As Object, ByVal obj As cFretePagar)
    With cmd
        Call .AddValue("dt_emissao", "@pDataEmissao")
        Call .Parameters.add(.CreateParameter("@pDataEmissao", obj.dataEmissao, dbFieldTypeDate))
        
        Call .AddValue("dt_entrada", "@pDataEntrada")
        Call .Parameters.add(.CreateParameter("@pDataEntrada", obj.dataEntrada, dbFieldTypeDate))
        
        Call .AddValue("cd_remetente", "@pRemetente")
        Call .Parameters.add(.CreateParameter("@pRemetente", obj.codigoRemetente, dbFieldTypeString, 15))
        
        Call .AddValue("cd_destinatario", "@pDestinatario")
        Call .Parameters.add(.CreateParameter("@pDestinatario", obj.codigoDestinatario, dbFieldTypeString, 15))
        
        Call .AddValue("cd_consignatario", "@pConsignatario")
        Call .Parameters.add(.CreateParameter("@pConsignatario", obj.codigoConsignatario, dbFieldTypeString, 15))
        
        Call .AddValue("cd_redespacho", "@pRedespacho")
        Call .Parameters.add(.CreateParameter("@pRedespacho", obj.codigoRedespacho, dbFieldTypeLong))
        
        Call .AddValue("cd_cfop", "@pCodigoCfop")
        Call .Parameters.add(.CreateParameter("@pCodigoCfop", obj.codigoCfop, dbFieldTypeString, 4))
        
        Call .AddValue("cd_cfopVar", "@pCfopVar")
        Call .Parameters.add(.CreateParameter("@pCfopVar", obj.codigoCfopVar, dbFieldTypeString, 1))
        
        Call .AddValue("distancia", "@pDistancia")
        Call .Parameters.add(.CreateParameter("@pDistancia", obj.distancia, dbFieldTypeDouble))
        
        Call .AddValue("cd_operacao_contabil", "@pOperacaoContabil")
        Call .Parameters.add(.CreateParameter("@pOperacaoContabil", obj.OperacaoContabil, dbFieldTypeLong))
        
        Call .AddValue("tp_frete", "@pTipoFrete")
        Call .Parameters.add(.CreateParameter("@pTipoFrete", obj.tipoFrete, dbFieldTypeString, 1))
        
        Call .AddValue("qt_produtos", "@pQtProdutos")
        Call .Parameters.add(.CreateParameter("@pQtProdutos", obj.volume, dbFieldTypeDouble))
        
        Call .AddValue("pr_tarifa", "@pPrTarifa")
        Call .Parameters.add(.CreateParameter("@pPrTarifa", obj.porcentagemTarifa, dbFieldTypeDouble))
        
        Call .AddValue("vl_pedagio", "@pVlPedagio")
        Call .Parameters.add(.CreateParameter("@pVlPedagio", obj.valorPedagio, dbFieldTypeDouble))
        
        Call .AddValue("vl_seguro", "@pVlSeguro")
        Call .Parameters.add(.CreateParameter("@pVlSeguro", obj.ValorSeguro, dbFieldTypeDouble))
        
        Call .AddValue("vl_outros", "@pVlOutros")
        Call .Parameters.add(.CreateParameter("@pVlOutros", obj.ValorOutros, dbFieldTypeDouble))
        
        Call .AddValue("vl_acrescimo", "@pVlAcrescimo")
        Call .Parameters.add(.CreateParameter("@pVlAcrescimo", obj.valorAcrescimo, dbFieldTypeDouble))
        
        Call .AddValue("vl_desconto", "@pVlDesconto")
        Call .Parameters.add(.CreateParameter("@pVlDesconto", obj.ValorDesconto, dbFieldTypeDouble))
        
        Call .AddValue("vl_isentas", "@pVlIsentas")
        Call .Parameters.add(.CreateParameter("@pVlIsentas", obj.valorIsentas, dbFieldTypeDouble))
        
        Call .AddValue("vl_conhecimento", "@pVlConhecimento")
        Call .Parameters.add(.CreateParameter("@pVlConhecimento", obj.valorConhecimento, dbFieldTypeDouble))
        
        Call .AddValue("vl_base_icms", "@pVlBaseIcms")
        Call .Parameters.add(.CreateParameter("@pVlBaseIcms", obj.valorBaseICMS, dbFieldTypeDouble))
        
        Call .AddValue("pr_icms", "@pPrIcms")
        Call .Parameters.add(.CreateParameter("@pPrIcms", obj.porcentagemICMS, dbFieldTypeDouble))
        
        Call .AddValue("vl_icms", "@pVlIcms")
        Call .Parameters.add(.CreateParameter("@pVlIcms", obj.ValorICMS, dbFieldTypeDouble))
        
        Call .AddValue("situacao", "@pSituacao")
        Call .Parameters.add(.CreateParameter("@pSituacao", obj.situacao, dbFieldTypeString, 1))
        
        Call .AddValue("serie_ctrc", "@pSerieCtrc")
        Call .Parameters.add(.CreateParameter("@pSerieCtrc", obj.SerieCTRC, dbFieldTypeString, 3))
        
        Call .AddValue("obs", "@pObs")
        Call .Parameters.add(.CreateParameter("@pObs", obj.Observacao, dbFieldTypeString, 250))
        
        Call .AddValue("rateio", "@pRateio")
        Call .Parameters.add(.CreateParameter("@pRateio", obj.rateiaValorProdutos, dbFieldTypeBool))
        
        Call .AddValue("vl_frete", "@pVlFrete")
        Call .Parameters.add(.CreateParameter("@pVlFrete", obj.ValorFrete, dbFieldTypeDouble))
        
        'pt. 92345 - Ivo Sousa (16/04/2009)
        Call .AddValue("centro_custo", "@pCentroCusto")
        Call .Parameters.add(.CreateParameter("@pCentroCusto", obj.CentroCusto, dbFieldTypeLong))
        
        Call .AddValue("conta_financeira", "@pContaFinanceira")
        Call .Parameters.add(.CreateParameter("@pContaFinanceira", obj.ContaFinanceira, dbFieldTypeLong))
        
        Call .AddValue("chave_acesso", "@pChaveAcesso")
        Call .Parameters.add(.CreateParameter("@pChaveAcesso", obj.ChaveAcesso, dbFieldTypeString))
    End With
End Sub

Private Sub Class_Initialize()
    mintNrGravacoes = 0
    bGeraDup = True
End Sub
