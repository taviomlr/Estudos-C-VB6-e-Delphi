VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cFretePagar"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Implementation of the  Class cFretePagar
''  Generated by Enterprise Architect
''  Created on:      14-set-2006 08:43:36
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private mlngNumeroConhecimento As Long
Private mstrTipoRegistro As String
Private mlngCodigoTransportadora As Long
Private mdatDataEmissao As Date
Private mdatDataEntrada As Date
Private mstrCodigoRemetente As String
Private mstrCodigoDestinatario As String
Private mstrCodigoConsignatario As String
Private mintCodigoRedespacho As Long
Private mstrCodigoCfop As String
Private mstrCodigoCfopVar As String
Private mdblDistancia As Double
Private mstrTipoFrete As String
Private mdblPorcentagemTarifa As Double
Private mdblValorPedagio As Double
Private mdblValorSeguro As Double
Private mdblValorOutros As Double
Private mdblValorAcrescimo As Double
Private mdblValorDesconto As Double
Private mdblValorIsentas As Double
Private mdblValorConhecimento As Double
Private mdblValorBaseICMS As Double
Private mdblPorcentagemICMS As Double
Private mstrChaveAcesso As String
Private mdblValorICMS As Double
Private mstrSituacao As String
Private mstrSerieCTRC As String
Private mstrObservacao As String
Private mdblVolume As Double
Private mobjNotasFiscais As cColecaoNotaFiscal
Private mlngCodigoRedespacho As Long
Private mobjTitulo As cTitulo
Private mbooPermiteAlteracao As Boolean
Private mbooRateiaValorProdutos As Boolean
Private mdblRateio As Double
Private mdblValorFrete As Double
Private mlngCodigoOperacao As Long
'pt. 92345 - Ivo Sousa (16/04/2009)
Private mlngContaFinanceira As Long
Private mlngCentroCusto As Long
'Projeto: #1153 - História: #7450 - Desenvolvimento#7554 - Moacir Pfau(14/10/2011)
Private mdblValorAcumuladoItens As Double
Private mlngQtdeAcumuladoItens As Long
'Ivo Sousa(21/08/2012) - Alteração para armazenar o nr do Conhecimento de Frete Anterior
Private mlngNumeroConhecimentoOld As Long
'Private mlngNumeroConhecimentoNew As Long

Private Sub Class_Initialize()
    Set mobjNotasFiscais = New cColecaoNotaFiscal
    Set mobjTitulo = New cTitulo
    mbooPermiteAlteracao = True
    mdblValorAcumuladoItens = 0
    mlngQtdeAcumuladoItens = 0
End Sub

Public Property Let codigoCfop(ByVal NewVal As String)
    mstrCodigoCfop = NewVal
End Property

Public Property Get codigoCfop() As String
    codigoCfop = mstrCodigoCfop
End Property

Public Property Let codigoCfopVar(ByVal NewVal As String)
    mstrCodigoCfopVar = NewVal
End Property

Public Property Get codigoCfopVar() As String
    codigoCfopVar = mstrCodigoCfopVar
End Property

Public Property Get codigoConsignatario() As String
    codigoConsignatario = mstrCodigoConsignatario
End Property

Public Property Let codigoConsignatario(ByVal NewVal As String)
    mstrCodigoConsignatario = NewVal
End Property

Public Property Get codigoDestinatario() As String
    codigoDestinatario = mstrCodigoDestinatario
End Property

Public Property Let codigoDestinatario(ByVal NewVal As String)
    mstrCodigoDestinatario = NewVal
End Property
Public Property Get ChaveAcesso() As String
    ChaveAcesso = mstrChaveAcesso
End Property

Public Property Let ChaveAcesso(ByVal NewVal As String)
    mstrChaveAcesso = NewVal
End Property

Public Property Get codigoRemetente() As String
    codigoRemetente = mstrCodigoRemetente
End Property

Public Property Let codigoRemetente(ByVal NewVal As String)
    mstrCodigoRemetente = NewVal
End Property

Public Property Get codigoTransportadora() As Long
    codigoTransportadora = mlngCodigoTransportadora
End Property

Public Property Let codigoTransportadora(ByVal NewVal As Long)
    mlngCodigoTransportadora = NewVal
End Property

Public Property Get dataEmissao() As Date
    dataEmissao = mdatDataEmissao
End Property

Public Property Let dataEmissao(ByVal NewVal As Date)
    mdatDataEmissao = NewVal
End Property

Public Property Get DataEntrada() As Date
    DataEntrada = mdatDataEntrada
End Property

Public Property Let DataEntrada(ByVal NewVal As Date)
    mdatDataEntrada = NewVal
End Property

Public Property Get distancia() As Double
    distancia = mdblDistancia
End Property

Public Property Let distancia(ByVal NewVal As Double)
    mdblDistancia = NewVal
End Property

Public Property Get notasFiscais() As cColecaoNotaFiscal
    Set notasFiscais = mobjNotasFiscais
End Property

Public Property Let notasFiscais(ByVal NewVal As cColecaoNotaFiscal)
    Set mobjNotasFiscais = NewVal
End Property

Public Property Get numeroConhecimento() As Long
    numeroConhecimento = mlngNumeroConhecimento
End Property

Public Property Let numeroConhecimento(ByVal NewVal As Long)
    mlngNumeroConhecimento = NewVal
End Property

Public Property Get numeroConhecimentoOld() As Long
    numeroConhecimentoOld = mlngNumeroConhecimentoOld
End Property

Public Property Let numeroConhecimentoOld(ByVal NewVal As Long)
    mlngNumeroConhecimentoOld = NewVal
End Property

'Public Property Get NumeroConhecimentoNew() As Long
'    NumeroConhecimentoNew = mlngNumeroConhecimentoNew
'End Property
'
'Public Property Let NumeroConhecimentoNew(ByVal NewVal As Long)
'    mlngNumeroConhecimentoNew = NewVal
'End Property

Public Property Get Observacao() As String
    Observacao = mstrObservacao
End Property

Public Property Let Observacao(ByVal NewVal As String)
    mstrObservacao = NewVal
End Property

Public Property Get porcentagemICMS() As Double
    porcentagemICMS = mdblPorcentagemICMS
End Property

Public Property Let porcentagemICMS(ByVal NewVal As Double)
    mdblPorcentagemICMS = NewVal
End Property

Public Property Get porcentagemTarifa() As Double
    porcentagemTarifa = mdblPorcentagemTarifa
End Property

Public Property Let porcentagemTarifa(ByVal NewVal As Double)
    mdblPorcentagemTarifa = NewVal
End Property

Public Property Let Situacao(ByVal NewVal As String)
    mstrSituacao = NewVal
End Property

Public Property Get Situacao() As String
    Situacao = mstrSituacao
End Property

Public Property Let SerieCTRC(ByVal NewVal As String)
    mstrSerieCTRC = NewVal
End Property

Public Property Get SerieCTRC() As String
    SerieCTRC = mstrSerieCTRC
End Property


Public Property Get tipoFrete() As String
    tipoFrete = mstrTipoFrete
End Property

Public Property Let tipoFrete(ByVal NewVal As String)
    mstrTipoFrete = NewVal
End Property

Public Property Let TipoRegistro(ByVal NewVal As String)
    mstrTipoRegistro = NewVal
End Property

Public Property Get TipoRegistro() As String
    TipoRegistro = mstrTipoRegistro
End Property

Public Property Let valorAcrescimo(ByVal NewVal As Double)
    mdblValorAcrescimo = NewVal
End Property

Public Property Get valorAcrescimo() As Double
    valorAcrescimo = mdblValorAcrescimo
End Property

Public Property Get valorBaseICMS() As Double
    valorBaseICMS = mdblValorBaseICMS
End Property

Public Property Let valorBaseICMS(ByVal NewVal As Double)
    mdblValorBaseICMS = NewVal
End Property

Public Property Get valorConhecimento() As Double
    valorConhecimento = mdblValorConhecimento
End Property

Public Property Let valorConhecimento(ByVal NewVal As Double)
    mdblValorConhecimento = NewVal
End Property

Public Property Let ValorDesconto(ByVal NewVal As Double)
    mdblValorDesconto = NewVal
End Property

Public Property Get ValorDesconto() As Double
    ValorDesconto = mdblValorDesconto
End Property

Public Property Get ValorICMS() As Double
    ValorICMS = mdblValorICMS
End Property

Public Property Let ValorICMS(ByVal NewVal As Double)
    mdblValorICMS = NewVal
End Property

Public Property Get valorIsentas() As Double
    valorIsentas = mdblValorIsentas
End Property

Public Property Let valorIsentas(ByVal NewVal As Double)
    mdblValorIsentas = NewVal
End Property

Public Property Let ValorOutros(ByVal NewVal As Double)
    mdblValorOutros = NewVal
End Property

Public Property Get ValorOutros() As Double
    ValorOutros = mdblValorOutros
End Property

Public Property Get valorPedagio() As Double
    valorPedagio = mdblValorPedagio
End Property

Public Property Let valorPedagio(ByVal NewVal As Double)
    mdblValorPedagio = NewVal
End Property

Public Property Let ValorSeguro(ByVal NewVal As Double)
    mdblValorSeguro = NewVal
End Property

Public Property Get ValorSeguro() As Double
    ValorSeguro = mdblValorSeguro
End Property

Public Property Get Titulo() As cTitulo
    Set Titulo = mobjTitulo
End Property

Public Property Let Titulo(ByVal NewVal As cTitulo)
    Set mobjTitulo = NewVal
End Property

Public Property Get codigoRedespacho() As Long
    codigoRedespacho = mlngCodigoRedespacho
End Property

Public Property Let codigoRedespacho(ByVal NewVal As Long)
    mlngCodigoRedespacho = NewVal
End Property

Public Property Get volume() As Double
    volume = mdblVolume
End Property

Public Property Let volume(ByVal NewVal As Double)
    mdblVolume = NewVal
End Property

Public Property Get PermiteAlteracao() As Boolean
    PermiteAlteracao = mbooPermiteAlteracao
End Property

Public Property Let PermiteAlteracao(ByVal NewVal As Boolean)
    mbooPermiteAlteracao = NewVal
End Property

Public Property Get rateiaValorProdutos() As Boolean
    rateiaValorProdutos = mbooRateiaValorProdutos
End Property

Public Property Let rateiaValorProdutos(ByVal NewVal As Boolean)
    mbooRateiaValorProdutos = NewVal
End Property

Public Property Let ValorFrete(ByVal NewVal As Double)
        mdblValorFrete = NewVal
End Property

Public Property Get ValorFrete() As Double
        ValorFrete = mdblValorFrete
End Property

Public Property Get OperacaoContabil() As Long
    OperacaoContabil = mlngCodigoOperacao
End Property

Public Property Let OperacaoContabil(ByVal NewVal As Long)
    mlngCodigoOperacao = NewVal
End Property

'pt. 92345 - Ivo Sousa (16/04/2009)
Public Property Get ContaFinanceira() As Long
    ContaFinanceira = mlngContaFinanceira
End Property

Public Property Let ContaFinanceira(ByVal NewVal As Long)
    mlngContaFinanceira = NewVal
End Property

Public Property Get CentroCusto() As Long
    CentroCusto = mlngCentroCusto
End Property

Public Property Let CentroCusto(ByVal NewVal As Long)
    mlngCentroCusto = NewVal
End Property

Public Function CriarObjeto(rd As IDBReader) As cFretePagar
    Dim daoNotaFiscal As New cFretePagarNotaFiscalDAO
    Dim daoTitulo As New cTituloDAO
    
    With rd
        mlngNumeroConhecimento = .GetLong("nr_conhecimento")
        mstrSerieCTRC = .GetString("serie_ctrc")
        mstrTipoRegistro = .GetString("tp_registro")
        mlngCodigoTransportadora = .GetLong("cd_transportadora")
        mdatDataEmissao = .GetDate("dt_emissao")
        mdatDataEntrada = .GetDate("dt_entrada")
        mstrCodigoRemetente = .GetString("cd_remetente")
        mstrCodigoDestinatario = .GetString("cd_destinatario")
        mstrCodigoConsignatario = .GetString("cd_consignatario")
        mlngCodigoRedespacho = .GetLong("cd_redespacho")
        mstrCodigoCfop = .GetString("cd_cfop")
        mstrCodigoCfopVar = .GetString("cd_cfopVar")
        mdblDistancia = .GetDouble("distancia")
        mlngCodigoOperacao = .GetLong("cd_operacao_contabil")
        mstrTipoFrete = .GetString("tp_frete")
        mdblVolume = .GetDouble("qt_produtos")
        mdblPorcentagemTarifa = .GetDouble("pr_tarifa")
        mdblValorPedagio = .GetDouble("vl_pedagio")
        mdblValorSeguro = .GetDouble("vl_seguro")
        mdblValorOutros = .GetDouble("vl_outros")
        mdblValorAcrescimo = .GetDouble("vl_acrescimo")
        mdblValorDesconto = .GetDouble("vl_desconto")
        mdblValorIsentas = .GetDouble("vl_isentas")
        mdblValorConhecimento = .GetDouble("vl_conhecimento")
        mdblValorBaseICMS = .GetDouble("vl_base_icms")
        mdblPorcentagemICMS = .GetDouble("pr_icms")
        mdblValorICMS = .GetDouble("vl_icms")
        mstrSituacao = .GetString("situacao")
        mstrObservacao = .GetString("obs")
        mbooRateiaValorProdutos = .GetBoolean("rateio")
        mdblValorFrete = .GetDouble("vl_frete")
        mstrChaveAcesso = .GetString("chave_acesso")
        'pt. 92345 - Ivo Sousa (16/04/2009)
        mlngCentroCusto = .GetDouble("centro_custo")
        mlngContaFinanceira = .GetDouble("conta_financeira")
        daoNotaFiscal.numeroConhecimento = mlngNumeroConhecimento
        daoNotaFiscal.tipoConhecimento = mstrTipoRegistro
        Set mobjNotasFiscais = daoNotaFiscal.Carregar(mlngCodigoTransportadora)
        daoTitulo.numeroConhecimento = mlngNumeroConhecimento
        daoTitulo.PagRec = "P"
        daoTitulo.tipoConhecimento = mstrTipoRegistro
        daoTitulo.Tabela = "FreteEntradaDuplicata"
        Set mobjTitulo = daoTitulo.carrega(mlngCodigoTransportadora)
        mbooPermiteAlteracao = daoTitulo.podeAlterar(mobjTitulo)
        Set CriarObjeto = Me
    End With
End Function

Public Function equals(obj As Object) As Boolean
    equals = False
    If Not obj Is Nothing Then
        Dim temp As cFretePagar
        Set temp = obj
        equals = equals Or (mlngNumeroConhecimento = temp.numeroConhecimento)
        equals = equals And (mstrTipoRegistro = temp.TipoRegistro)
        equals = equals And (mlngCodigoTransportadora = temp.codigoTransportadora)
    End If
End Function

Public Function MovimentaEstoque() As Boolean
    'Variavel responsavel para acumular os valores, para auxiliar o calculo do ultimo item.
    Dim dblValorAcumulado           As Double
    'Variavel responsavel para acumular os itens processados, para auxiliar o calculo do ultimo item.
    Dim lngItemAcumulado            As Long
    Dim getValorTotalItens          As Double
    Dim getQtdeTotalItens           As Long
    
On Error GoTo erro_movimentando
    getValorTotalItens = 0
    getQtdeTotalItens = 0
    mdblValorAcumuladoItens = 0
    mlngQtdeAcumuladoItens = 0
    
    'Projeto: #1153 - História: #7450 - Desenvolvimento#7554 - Moacir Pfau(17/10/2011)
    If ConfigKiC.Ratear_valor_movimento_frete = "Quantidade" Then
        mdblRateio = rateiaConhecimento
    ElseIf ConfigKiC.Ratear_valor_movimento_frete = "Valor" Then
        Call retornaTotalItens(getValorTotalItens, getQtdeTotalItens)
    End If
    
    MovimentaEstoque = True
    If NatOperacaoMovEst(mstrCodigoCfop, mstrCodigoCfopVar) Then
        With mobjNotasFiscais
            .MoveFirst
            While Not .EOF
                If movimentaNota(.CurrentObject.Nota, .CurrentObject.Tipo, .CurrentObject.Apel, getValorTotalItens, getQtdeTotalItens) Then
                    .MoveNext
                Else
                    MovimentaEstoque = False
                    Exit Function
                End If
            Wend
        End With
    End If
    Exit Function
erro_movimentando:
    MovimentaEstoque = False
    'Throw Err
End Function

Private Function getReaderItens(lngNumero As Long, strTipo As String, strFornecedor As String) As IDBReader
    Dim cmd As IDBSelectCommand
    
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = "[Itens de Notas Fiscais de Entrada]"
    cmd.SelectClause = "Produto, [Centro de Custo], Quantidade, CODLOC, Item, Fornecedor,[Número], [Natureza de Operação], [Complemento da Natureza], [Valor Líquido]"
    Call cmd.Filter.Append("[Número] = @pNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", lngNumero, dbFieldTypeLong))
    Call cmd.Filter.Append("[Tipo de Registro] = @pTipoRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipoRegistro", strTipo, dbFieldTypeString))
    Call cmd.Filter.Append("[Fornecedor] = @pFornec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pFornec", strFornecedor, dbFieldTypeString, 15))
    cmd.Filter.Append ("Situação <> 'Cancelado'")
    Set getReaderItens = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    Set cmd = Nothing
End Function

Private Function movimentaNota(lngNumero As Long, strTipo As String, strFornecedor As String, Optional ByVal getValorTotalItens As Double, Optional ByVal getQtdeTotalItens As Long) As Boolean

    Dim rdItens As IDBReader

On Error GoTo erro_movimentando_nota
    Aplicacao.Connect
    movimentaNota = True
    Set rdItens = getReaderItens(lngNumero, strTipo, strFornecedor)
    With rdItens
        .MoveFirst
        While Not .EOF
            If NatOperacaoMovEst(.GetString("Natureza de Operação"), .GetString("Complemento da Natureza")) Then
                
                'Projeto: #1153 - História: #7450 - Desenvolvimento#7554 - Moacir Pfau(17/10/2011)
                If ConfigKiC.Ratear_valor_movimento_frete = "Valor" Then
                    mlngQtdeAcumuladoItens = mlngQtdeAcumuladoItens + 1
                    Dim temp As Double
                    temp = fRateioValores(getValorTotalItens, .GetDouble("Valor Líquido"), mdblValorConhecimento, mdblValorAcumuladoItens, getQtdeTotalItens, CInt(mlngQtdeAcumuladoItens))
                    mdblValorAcumuladoItens = mdblValorAcumuladoItens + temp
                End If
                
                If movimentaItem(.GetString("CODLOC"), .GetString("Produto"), .GetLong("Item"), .GetDouble("Quantidade"), temp) Then
                    .MoveNext
                Else
                    Aplicacao.Disconnect
                    movimentaNota = False
                    Exit Function
                End If
            Else
                .MoveNext
            End If
        Wend
    End With
    Aplicacao.Disconnect
    Exit Function
erro_movimentando_nota:
    movimentaNota = False
    Aplicacao.Disconnect
    'Throw Err
End Function

Private Function movimentaItem(strCodLoc As String, strCodPro As String, lngItem As Long, dblQuant As Double, Optional dblValor As Double) As Boolean
    Dim oMovEst                     As CEstMovimento
    Dim oMovEstGer                  As New CEstoqueServ
    Dim EnumOriMov                  As New EST_ORIGEM_MOV_ENUM
    Dim enumEntSai                  As New EST_MOV_ENUM
    'Projeto: #1153 - História: #7450 - Desenvolvimento#7555 - Moacir Pfau(08/11/2011)
    Dim dblValorMov                 As Double
    Dim o As CEstMovimentoCol
    Dim idb As New IDBReader
    
On Error GoTo erro_movimento
    oMovEstGer.init Aplicacao
    Set oMovEst = oMovEstGer.CriaMovimento
    oMovEst.init Aplicacao
    'Projeto: #1332 - História: #1272 - Desenvolvimento#1802 - Moacir Pfau(29/10/2012)
    'Projeto: #0 - História: #18917 - Desenvolvimento#18948 - Moacir Pfau(10/12/2012)
    If mlngNumeroConhecimentoOld = 0 Then
        Set oMovEst = oMovEstGer.CriaMovimento
    Else
        Set idb = oMovEst.CarregaMovimentoFrete(Aplicacao.GetInternalAuthorization, EnumOriMov.ConhecimentoFrete, mlngNumeroConhecimentoOld, CInt(lngItem), strCodPro)
        If idb.Recordcount = 0 Then
            Set oMovEst = oMovEstGer.CriaMovimento
        Else
            Set oMovEst = oMovEstGer.CriaMovimento(idb)
        End If
    End If
    
    movimentaItem = True
    
    oMovEst.DataMov = mdatDataEntrada
    oMovEst.HoraMov = oMovEst.HoraMov.GetNow
    oMovEst.CodLoc = strCodLoc
    oMovEst.CodPro = strCodPro
    oMovEst.NroDocFrete = mlngNumeroConhecimento
    oMovEst.TIPREG = mstrTipoRegistro
    oMovEst.SEQITE = lngItem
    oMovEst.CODFOR = mlngCodigoTransportadora
    oMovEst.ENTSAI = enumEntSai.entrada
    oMovEst.ORIMOV = EnumOriMov.ConhecimentoFrete
    'Projeto: #1153 - História: #7450 - Desenvolvimento#7554 - Moacir Pfau(17/10/2011)
    If ConfigKiC.Ratear_valor_movimento_frete = "Quantidade" Then
        dblValorMov = (mdblRateio * dblQuant)
    ElseIf ConfigKiC.Ratear_valor_movimento_frete = "Valor" Then
        dblValorMov = dblValor
    End If
   
    'Projeto: #1153 - História: #7450 - Desenvolvimento#7555 - Moacir Pfau(08/11/2011)
    oMovEst.VLRMOV = deduzirImposto(dblValorMov)
    
    Call oMovEst.persiste(Aplicacao.GetInternalAuthorization)
    Exit Function
erro_movimento:
    'Throw Err
    movimentaItem = False
End Function

Private Function rateiaConhecimento() As Double
    Dim strNotas As String
    Dim strFornecedores As String
    Dim strTipo As String
    Dim dblQtdTotal As Double
    
    With mobjNotasFiscais
        .MoveFirst
        While Not .EOF
            strTipo = .CurrentObject.Tipo
            If strNotas <> "" Then
                strNotas = strNotas & ", " & .CurrentObject.Nota
            Else
                strNotas = .CurrentObject.Nota
            End If
            If strFornecedores <> "" Then
                strFornecedores = strFornecedores & ", '" & .CurrentObject.Apel & "'"
            Else
                strFornecedores = "'" & .CurrentObject.Apel & "'"
            End If
            .MoveNext
        Wend
    End With
    rateiaConhecimento = Round(mdblValorConhecimento / somaNotas(strNotas, strTipo, strFornecedores), 10)
End Function

Private Sub retornaTotalItens(ByRef getValorTotalItens As Double, ByRef getQtdeTotalItens As Long)
    Dim strNotas As String
    Dim strFornecedores As String
    Dim strTipo As String
    Dim dblQtdTotal As Double
    
    With mobjNotasFiscais
        .MoveFirst
        While Not .EOF
            strTipo = .CurrentObject.Tipo
            If strNotas <> "" Then
                strNotas = strNotas & ", " & .CurrentObject.Nota
            Else
                strNotas = .CurrentObject.Nota
            End If
            If strFornecedores <> "" Then
                strFornecedores = strFornecedores & ", '" & .CurrentObject.Apel & "'"
            Else
                strFornecedores = "'" & .CurrentObject.Apel & "'"
            End If
            .MoveNext
        Wend
    End With
    getValorTotalItens = Round(somaNotasValoresItens(strNotas, strTipo, strFornecedores), 4)
    getQtdeTotalItens = contaNotasValoresItens(strNotas, strTipo, strFornecedores)
End Sub

'Soma de todas as pela a QUANTIDADE.
Private Function somaNotas(strNotas As String, strTipo As String, strFornecedores As String) As Double
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = "[Itens de Notas Fiscais de Entrada]"
    cmd.SelectClause = "SUM(Quantidade) AS qtd"
    Call cmd.Filter.Append("[Número] IN(" & strNotas & ")")
    Call cmd.Filter.Append("[Tipo de Registro] = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString, 20))
    Call cmd.Filter.Append("Fornecedor IN(" & strFornecedores & ")")
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        somaNotas = rdResult.GetDouble("qtd")
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
End Function

'Soma todos os valores liquidos dos itens das notas fiscais.
Private Function somaNotasValoresItens(strNotas As String, strTipo As String, strFornecedores As String) As Double
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = "[Itens de Notas Fiscais de Entrada]"
    cmd.SelectClause = "SUM([Valor Líquido]) AS vlrLiquido"
    Call cmd.Filter.Append("[Número] IN(" & strNotas & ")")
    Call cmd.Filter.Append("[Tipo de Registro] = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString, 20))
    Call cmd.Filter.Append("Fornecedor IN(" & strFornecedores & ")")
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        somaNotasValoresItens = rdResult.GetDouble("vlrLiquido")
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
End Function

Private Function contaNotasValoresItens(strNotas As String, strTipo As String, strFornecedores As String) As Double
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = "[Itens de Notas Fiscais de Entrada]"
    cmd.SelectClause = "count([Número]) AS contaItens"
    Call cmd.Filter.Append("[Número] IN(" & strNotas & ")")
    Call cmd.Filter.Append("[Tipo de Registro] = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipo, dbFieldTypeString, 20))
    Call cmd.Filter.Append("Fornecedor IN(" & strFornecedores & ")")
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        contaNotasValoresItens = rdResult.GetDouble("contaItens")
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
End Function

Private Function NatOperacaoMovEst(pNatOpe As String, pNatOpeCompl As String)
    Dim oNatOper As CNaturezasdeOperacao
    
    Set oNatOper = New CNaturezasdeOperacao
    NatOperacaoMovEst = oNatOper.NaturezaOperacaoMovEst(pNatOpe, pNatOpeCompl)
    Set oNatOper = Nothing
End Function

Public Function ApagaMovimento() As Boolean

On Error GoTo erro_movimentando
    ApagaMovimento = True
    If NatOperacaoMovEst(mstrCodigoCfop, mstrCodigoCfopVar) Then
        With mobjNotasFiscais
            .MoveFirst
            While Not .EOF
                If apagaMovimentoNota(.CurrentObject.Nota, .CurrentObject.Tipo, .CurrentObject.Apel) Then
                    .MoveNext
                Else
                    ApagaMovimento = False
                    Exit Function
                End If
            Wend
        End With
    End If
    Exit Function
erro_movimentando:
    ApagaMovimento = False
    Throw err
End Function

Private Function apagaMovimentoNota(lngNumero As Long, strTipo As String, strFornecedor As String) As Boolean
    Dim rdItens As IDBReader

On Error GoTo erro_Apagando_movimento
    Aplicacao.Connect
    apagaMovimentoNota = True
    Set rdItens = getReaderItens(lngNumero, strTipo, strFornecedor)
    With rdItens
        .MoveFirst
        While Not .EOF
            If NatOperacaoMovEst(.GetString("Natureza de Operação"), .GetString("Complemento da Natureza")) Then
                If apagaMovimentoItem(.GetString("Produto"), .GetLong("Item")) Then
                    .MoveNext
                Else
                    Aplicacao.Disconnect
                    apagaMovimentoNota = False
                    Exit Function
                End If
            Else
                .MoveNext
            End If
        Wend
    End With
    Aplicacao.Disconnect
    Exit Function
erro_Apagando_movimento:
    apagaMovimentoNota = False
    Throw err
End Function

Private Function apagaMovimentoItem(strCodPro As String, lngNumeroItem As Long) As Boolean
    Dim oMovEst As CEstMovimento
    Dim oMovEstGer As New CEstoqueServ
    Dim EnumOriMov As New EST_ORIGEM_MOV_ENUM
    Dim enumEntSai As New EST_MOV_ENUM

On Error GoTo erro_movimento
    oMovEstGer.init Aplicacao
    apagaMovimentoItem = True
    Set oMovEst = oMovEstGer.carregaMovimento(Aplicacao.GetInternalAuthorization, EnumOriMov.ConhecimentoFrete, _
                  mlngNumeroConhecimento, mstrTipoRegistro, CStr(mlngCodigoTransportadora), pSeqItem:=CInt(lngNumeroItem), pCodProd:=strCodPro)
    If Not oMovEst Is Nothing Then
        Call oMovEst.Apaga(Aplicacao.GetInternalAuthorization)
    Else
        apagaMovimentoItem = False
    End If
    Exit Function
erro_movimento:
    Throw err
    apagaMovimentoItem = False
End Function

'Data.....: 20/12/2006
'Autor....: Dulcino Júnior
'Descrição.: Metodo que retorna um objeto do tipo cNotaEntradaIntegra para
'               ser gravado no banco de integração.
Public Function Exportar() As cNotaEntradaIntegra
    Dim objNatureza             As CNaturezasdeOperacao
    Dim objControleSeqCTe       As clsControleSeqCTe
    Dim objControleSeqCTeADO    As New clsControleSeqCTeADO
    Dim objCentroCusto          As clsCentroCusto
    Dim intCont                 As Integer
    Dim objParc                 As cNotaEntradaParcIntegra
    
On Error GoTo err_Handler
    
    'Projeto: 1222 - História: #9972 - Ivo Sousa (23/04/2012)
    Aplicacao.Connect
    Set objControleSeqCTeADO.App = Aplicacao
    Set objControleSeqCTe = objControleSeqCTeADO.CarregaRegistro(mstrTipoRegistro)
    'O valor de isentas não será gravado no objeto, o sistema deve
    'calcular o mesmo para que não fique a divergencia no caso de
    'informação errada do usuário. ref. 82588
    Set Exportar = New cNotaEntradaIntegra
    With Exportar
        'Projeto: 1222 - História: #9972 - Ivo Sousa (23/04/2012)
        .TipoRegistro = mstrTipoRegistro
        .NumeroNota = mlngNumeroConhecimento
        .Fornecedor = mobjTitulo.Empresa
        'Projeto: 1239 - História: 15187 - Tarefa: 15189 - Fernando Paludo 26/06/2012
        .CdRemetente = mstrCodigoRemetente
        .CdConsignatario = mstrCodigoConsignatario
        '.Fornecedor = mstrCodigoDestinatario
        .especieDocumento = "CTRC"
        .codigoCfop = CInt(mstrCodigoCfop)
        'Correção para considerar a variação ao atualizar os impostos.
        .VariacaoCFOP = VariacaoCFOP(.codigoCfop, mstrCodigoCfopVar)
        .codigoTransp = mlngCodigoTransportadora
        .TipoDocumento = tp_conhecimento
        .dataEmissao = mdatDataEmissao
        .DATALANCAMENTO = mdatDataEntrada
        .codigoCfop = CInt(mstrCodigoCfop)
        .Cnpjcpf = cnpjCpfEmpresa(mobjTitulo.Empresa)
        'Projeto: 1239 - História: 15187 - Tarefa: Não Planejada - Fernando Paludo 27/06/2012
                
        .valorContabil = CCur(mdblValorConhecimento)
        .ValorBaseIcms1 = CCur(mdblValorBaseICMS)
        .valorAliquotaIcms1 = CCur(mdblPorcentagemICMS)
        .ValorIcms1 = CCur(mdblValorICMS)
        .especieDocumento = "CTRC"
        .origemDoc = "CTRC"
        If mobjTitulo.CondicaoPagamento.VendaaVista Then
            .vendaVista = "S"
        Else
            .vendaVista = "N"
        End If
        'Projeto: 1239 - História: 15187 - Tarefa: 15189 - Fernando Paludo 26/06/2012
        .CdRemetente = mstrCodigoRemetente
        .CdConsignatario = mstrCodigoConsignatario
              
        'Projeto: 1222 - História: #9972 - Ivo Sousa (23/04/2012)
        'pt. 114844 - Incluido correção do pt. para buscar a serie corretamente do cadastro de controle sequencial do CT-e
        If Not objControleSeqCTe Is Nothing Then
            .serie = objControleSeqCTe.serie
        Else
            .serie = IIf(Trim(mstrSerieCTRC) <> Empty, mstrSerieCTRC, serieCfop(.codigoCfop, mstrCodigoCfopVar))
        End If
        
        .Modelo = modeloCfop(.codigoCfop, mstrCodigoCfopVar)
        
        'Projeto: 1239 - História: 15187 - Tarefa: Não Planejada - Fernando Paludo 28/06/2012
        If mstrTipoFrete = "C" Then
            .frete = 1
        ElseIf mstrTipoFrete = "F" Then
            .frete = 2
        ElseIf mstrTipoFrete = "E" Then
            .frete = 3
        Else
            .frete = 4
        End If
        
        'Projeto: #9908 - História: #11167 - Desenvolvimento: #11168 - Ivo Sousa(08/08/2013)
        .CentroCusto = 0
        If Not mobjTitulo Is Nothing Then
            If mobjTitulo.CentroCusto > 0 Then
                If mobjCache Is Nothing Then
                    Set mobjCache = New clsCache
                End If
                Set objCentroCusto = mobjCache.GetCacheCentroCusto(mobjTitulo.CentroCusto)
                .CentroCusto = objCentroCusto.CodigoCRD
            End If
        End If
        
        If Not mobjTitulo.parcelas Is Nothing Then
            If mobjTitulo.parcelas.Count > 0 Then
                .ParcelasNota = New cColecaoNotaEntradaParcIntegra
                mobjTitulo.parcelas.MoveFirst
                For intCont = 0 To mobjTitulo.parcelas.Count - 1
                    Set objParc = New cNotaEntradaParcIntegra
                    With objParc
                        .TipoRegistro = mobjTitulo.Tipo
                        .NumeroNota = mobjTitulo.Nota
                        .valorParcela = mobjTitulo.parcelas.CurrentObject.Valor
                        .DataVencimento = mobjTitulo.parcelas.CurrentObject.vencimento
                        .TipoTitulo = "00"
                        .TipoParcela = "N"
                        .Empresa = mobjTitulo.Empresa
                        .numeroParcela = mobjTitulo.parcelas.CurrentObject.Parcela
                    End With
                    Call .ParcelasNota.add(objParc)
                    Set objParc = Nothing
                    mobjTitulo.parcelas.MoveNext
                Next
            End If
        End If
        
        .complementar = New cNotaEntradaCompIntegra
        With .complementar
            .TipoRegistro = Exportar.TipoRegistro
            .NumeroNota = mlngNumeroConhecimento
            .Fornecedor = Exportar.Fornecedor
            .codigoCfop = Exportar.codigoCfop
            .codigoTransp = Exportar.codigoTransp
            .TipoDocumento = Exportar.TipoDocumento
            .codigoCnpjRemetente = cnpjEmpresa(Me.codigoRemetente)
            
            'Adicionado por Vinicius - 13/10/2014 - PJ 44895 Hist #50497
            .ChaveAcesso = mstrChaveAcesso
            
            
            '.codigoCnpjTransporte = CnpjTransportadora
            'Ivo Sousa (11/05/2012) - Correção para emissão de chave de acesso do CT-e enviada a SEFAZ
'            strChaveAcesso = GetFieldValue("chave_acesso", "FVFTransmissaoCTe", "seq_conhecimento=" & mlngSeqConhecimento & " AND enterprise_id=" & EnterpriseId & " AND cd_estabelecimento=" & CdEstabelecimento & " AND nr_conhecimento=" & mlngNumeroConhecimento & " AND tp_registro='" & mstrTipoRegistro & "'", , Empty)
'            If strChaveAcesso <> Empty Then
'                .ChaveAcesso = strChaveAcesso
'            End If
            'Projeto: 1239 - História: 15187 - Tarefa: Não Planejada - Fernando Paludo 27/06/2012
            If Not Trim(Exportar.CdConsignatario) = Empty Then _
                .CnpjCpfConsignatario = cnpjCpfEmpresa(Exportar.CdConsignatario)
        End With
        
        
        'Projeto: 1239 - História: 15187 - Tarefa: Não Planejada - Fernando Paludo 27/06/2012
        'If Not Trim(Exportar.CdConsignatario) = Empty Then _
            '.CnpjCpfConsignatario = cnpjCpfEmpresa(Exportar.CdConsignatario)
        
        Call .AtualizaImpostos(Aplicacao, difCfop, 0)
        'pt. 86687 - Dulcino Júnior(24/04/2008)
        If EmpresaUsuaria.Industria Then
            Set objNatureza = New CNaturezasdeOperacao
            If objNatureza.CarregarRegistro(mstrCodigoCfop, mstrCodigoCfopVar) Then
                If UCase(objNatureza.DiferencaIpi) = UCase("Outras") Then
                    .valorOutrasIpi = .valorContabil
                ElseIf UCase(objNatureza.DiferencaIpi) = UCase("Isentas") Then
                    .valorIsentasIpi = .valorContabil
                End If
            End If
        End If
    End With
    Aplicacao.Disconnect
    Exit Function
err_Handler:
    Aplicacao.Disconnect
End Function

'Data.......: 20/12/2006
'Descrição..: Função utilizada para retornar o cnpj ou cpf da empresa.
'Parametros.: [strCodigo] Valor do tipo String referente ao apel da empresa.
'Retorno....: cnpj da empresa informada.
Private Function cnpjCpfEmpresa(strCodigo As String) As String
    Dim selCmd As IDBSelectCommand
    Dim rdResult As IDBReader
    
On Error GoTo erro_consultando
    Aplicacao.Connect
    Set selCmd = Aplicacao.CreateSelectCommand
    With selCmd
        .Table.TableName = "Empresas"
        Call .Filter.Append("Apel = @pApel")
        Call .Parameters.add(.CreateParameter("@pApel", strCodigo, dbFieldTypeString, 15))
    End With
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, selCmd)
    If Not rdResult.EOF Then
        cnpjCpfEmpresa = rdResult.GetString("CNPJ/CPF")
    Else
        cnpjCpfEmpresa = " "
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Aplicacao.Disconnect
    Set selCmd = Nothing
    Exit Function
erro_consultando:
    Call Throw(err)
    cnpjCpfEmpresa = " "
    FinallyConnection Aplicacao
End Function

'Passa o valor total e o valor do item para achar o percentual.
'Passa o valor para rateio, de acordo com o percentual encontrado.
'Passado o valor acumulado, total de itens e qual será o item a ser calculado,
'se o item for o ultimo o seu valor é o valor para rateio menos o acumulado.
Private Function fRateioValores(dblValorTotal As Double, dblValorItem As Double, dblValorRateio As Double, dblValorAcumulado As Double, lngTotalItens As Long, intItemAtual As Integer) As Double
    Dim dblPercentual                               As Double
    If lngTotalItens = intItemAtual Then
        fRateioValores = dblValorRateio - dblValorAcumulado
    Else
        dblPercentual = Round((dblValorItem / dblValorTotal * 100), 4)
        fRateioValores = Round(dblValorRateio * dblPercentual / 100, 2)
    End If
End Function

'Projeto: #1153 - História: #7450 - Desenvolvimento#7555 - Moacir Pfau(27/10/2011)
Private Function deduzirImposto(ByVal dblValorItem As Double) As Double
    Dim dblVlrDeduzir           As Double
    Dim dblVlrPIS               As Double
    Dim dblVlrCOFINS            As Double
    Dim dblVlrICMS              As Double
    
    dblVlrPIS = deduzirImpostoPIS(dblValorItem)
    dblVlrCOFINS = deduzirImpostoCOFINS(dblValorItem)
    dblVlrICMS = deduzirImpostoICMS(dblValorItem)
    
    deduzirImposto = (dblValorItem - (dblVlrPIS + dblVlrCOFINS + dblVlrICMS))
End Function

'Projeto: #1153 - História: #7450 - Desenvolvimento#7555 - Moacir Pfau(27/10/2011)
Private Function deduzirImpostoPIS(ByVal dblValorItem As Double) As Double
    Dim dblValorDeduzir     As Double
    
    If ConfigKiC.aliquota_pis_frete > 0 Then
        dblValorDeduzir = (dblValorItem * ConfigKiC.aliquota_pis_frete / 100)
    End If
    deduzirImpostoPIS = dblValorDeduzir
End Function

'Projeto: #1153 - História: #7450 - Desenvolvimento#7555 - Moacir Pfau(27/10/2011)
Private Function deduzirImpostoCOFINS(ByVal dblValorItem As Double) As Double
    Dim dblValorDeduzir     As Double
    
    If ConfigKiC.aliquota_COFINS_frete > 0 Then
        dblValorDeduzir = (dblValorItem * ConfigKiC.aliquota_COFINS_frete / 100)
    End If
    deduzirImpostoCOFINS = dblValorDeduzir
End Function

'Projeto: #1153 - História: #7450 - Desenvolvimento#7556 - Moacir Pfau(09/11/2011)
Private Function deduzirImpostoICMS(ByVal dblValorItem As Double) As Double
    Dim dblValorDeduzir     As Double
    
    If ConfigKiC.deduzir_icms_frete Then
        dblValorDeduzir = (dblValorItem * mdblPorcentagemICMS / 100)
    End If
    deduzirImpostoICMS = dblValorDeduzir
End Function

