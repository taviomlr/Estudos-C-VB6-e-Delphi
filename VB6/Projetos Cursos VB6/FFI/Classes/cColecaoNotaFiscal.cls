VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cColecaoNotaFiscal"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cColecaoNotaFiscal
''  Generated by Enterprise Architect
''  Created on:      12-set-2006 11:46:22
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Implements FXT.IIterator

Private mNotasFiscais As Collection
Private mintIndex As Integer
Private mdblValorTotal As Double
Private mlngTransportadora As Long
Private mbooRegistroEntrada As Boolean

Private Sub Class_Initialize()
    Set mNotasFiscais = New Collection
    mintIndex = 0
    mdblValorTotal = 0
End Sub

Public Property Get ValorTotal() As Double
    ValorTotal = mdblValorTotal
End Property

Public Property Get Transportadora() As Long
    Transportadora = mlngTransportadora
End Property

Public Property Let Transportadora(ByVal NewVal As Long)
    mlngTransportadora = NewVal
End Property

Public Property Get registroEntrada() As Boolean
    registroEntrada = mbooRegistroEntrada
End Property

Public Property Let registroEntrada(ByVal NewVal As Boolean)
    mbooRegistroEntrada = NewVal
End Property

Public Sub MoveNext(Optional ByVal bInterrompe As Boolean = False)
    Call IIterator_MoveNext(bInterrompe)
End Sub

Public Function EOF() As Boolean
    EOF = IIterator_EOF
End Function

Public Sub add(ByVal obj As Object)
    mdblValorTotal = mdblValorTotal + obj.Valor
    Call mNotasFiscais.add(obj)
End Sub

Public Function Find(ByVal obj As Object) As Integer
On Error GoTo sem_registro
    Dim i As Integer
    Dim Nota As Object
    
    For i = 1 To mNotasFiscais.Count
        Set Nota = mNotasFiscais.item(i)
        If Nota.equals(obj) Then
            Find = i
            Exit Function
        End If
    Next
    Exit Function
sem_registro:
    Find = 0
End Function

Public Sub Remove(ByVal obj As Object)
    Dim intIndex As Integer
    
    intIndex = Find(obj)
    If intIndex > 0 Then
        mdblValorTotal = mdblValorTotal - mNotasFiscais.item(intIndex).Valor
        Call mNotasFiscais.Remove(intIndex)
    End If
End Sub

Public Sub MoveFirst()
    mintIndex = 1
End Sub

Public Function Count() As Long
    Count = IIterator_Count
End Function

Public Function CurrentObject() As Object
    Set CurrentObject = IIterator_CurrentObject
End Function

Private Function IIterator_Count() As Long
    IIterator_Count = mNotasFiscais.Count
End Function

Private Property Get IIterator_CurrentObject() As Object
On Error GoTo SemObjeto
    Set IIterator_CurrentObject = mNotasFiscais.item(mintIndex)
    Exit Property
SemObjeto:
    Set IIterator_CurrentObject = Nothing
End Property

Private Function IIterator_EOF() As Boolean
On Error GoTo FimArquivo
    'Se não existe item na coleção é o fim do arquivo
    If mNotasFiscais.Count = 0 Then IIterator_EOF = True
    'Se o ponteiro estiver com uma quantidade maior do que a coleção
    'é o fim do arquivo
    If mintIndex > mNotasFiscais.Count Then IIterator_EOF = True
    Exit Function
FimArquivo:
    IIterator_EOF = True
End Function

Private Sub IIterator_MoveNext(bInterrompe As Boolean)
    mintIndex = mintIndex + 1
End Sub

Public Sub Clear()
    mdblValorTotal = 0
    mintIndex = 0
    Set mNotasFiscais = New Collection
End Sub
