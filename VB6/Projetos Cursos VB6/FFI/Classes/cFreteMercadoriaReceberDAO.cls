VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cFreteMercadoriaReceberDAO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Implementation of the  Class cFreteMercadoriaReceberDAO
''  Generated by Enterprise Architect
''  Created on:      28-ago-2006 16:35:17
''  Original author: Dulcino Júnior
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Private Const NomeTabela$ = "FreteSaidaMercadoria"
Private mlngCodigoFrete As Long
Private mstrTipoFrete As String
Private mintId As Integer
Private mlngSeqConhecimento As Long

Private Sub Class_Initialize()
    mintId = 1
End Sub

Public Property Let codigoFrete(ByVal NewVal As Long)
        mlngCodigoFrete = NewVal
End Property

Public Property Get codigoFrete() As Long
        codigoFrete = mlngCodigoFrete
End Property

Public Property Get tipoFrete() As String
    tipoFrete = mstrTipoFrete
End Property

Public Property Let tipoFrete(ByVal NewVal As String)
    mstrTipoFrete = NewVal
End Property

Public Property Get SeqConhecimento() As Long
    SeqConhecimento = mlngSeqConhecimento
End Property

Public Property Let SeqConhecimento(ByVal NewVal As Long)
    mlngSeqConhecimento = NewVal
End Property

Public Function persistir(ByVal obj As cFreteMercadoriaReceber, ByRef objAplicacao As IApplication) As Boolean
    Dim cmd As IDBInsertCommand
On Error GoTo erro_persistindo
    Set cmd = objAplicacao.CreateInsertCommand
    cmd.Table = NomeTabela
    Call cmd.AddValue("nr_conhecimento", "@pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngCodigoFrete, dbFieldTypeLong))
    Call cmd.AddValue("tp_registro", "@pTpRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistro", mstrTipoFrete, dbFieldTypeString, 20))
    Call cmd.AddValue("id_item", "@pIdItem")
    Call cmd.Parameters.add(cmd.CreateParameter("@pIdItem", mintId, dbFieldTypeInt))
    Call cmd.AddValue("seq_conhecimento", "@pSeqConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", mlngSeqConhecimento, dbFieldTypeLong))
    Call prepareCommand(obj, cmd)
    Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
    persistir = True
    mintId = mintId + 1
    Exit Function
erro_persistindo:
    err.clear
    persistir = False
End Function

Private Sub prepareCommand(ByVal obj As cFreteMercadoriaReceber, ByRef cmd As Object)
    With obj
        Call cmd.AddValue("carga", "@pCarga")
        Call cmd.Parameters.add(cmd.CreateParameter("@pCarga", .naturezaCarga, dbFieldTypeString, 60))
        
        Call cmd.AddValue("qt_quantidade", "@pQtQuantidade")
        Call cmd.Parameters.add(cmd.CreateParameter("@pQtQuantidade", .Quantidade, dbFieldTypeDouble))
        
        Call cmd.AddValue("unidade", "@pUnidade")
        Call cmd.Parameters.add(cmd.CreateParameter("@pUnidade", .Unidade, dbFieldTypeString))
        
        Call cmd.AddValue("especie", "@pEspecie")
        Call cmd.Parameters.add(cmd.CreateParameter("@pEspecie", .Especie, dbFieldTypeString, 10))
        
        Call cmd.AddValue("peso", "@pPeso")
        Call cmd.Parameters.add(cmd.CreateParameter("@pPeso", .Peso, dbFieldTypeDouble))
        
        Call cmd.AddValue("nr_nota", "@pNrNota")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNrNota", .NotaFiscal, dbFieldTypeLong))
        
        Call cmd.AddValue("dt_nota", "@pDtNota")
        Call cmd.Parameters.add(cmd.CreateParameter("@pDtNota", .dataNota, dbFieldTypeDate))
        
        Call cmd.AddValue("vl_carga", "@pVlCarga")
        Call cmd.Parameters.add(cmd.CreateParameter("@pVlCarga", .valorCarga, dbFieldTypeDouble))
        
        'pt. CT-e - Ivo Sousa (30/06/2010)
        Call cmd.AddValue("pin_nota_fiscal", "@pPINNotaFiscal")
        Call cmd.Parameters.add(cmd.CreateParameter("@pPINNotaFiscal", .PINNotaFiscal, dbFieldTypeString, 9))

        Call cmd.AddValue("chave_acesso", "@pChaveAcesso")
        Call cmd.Parameters.add(cmd.CreateParameter("@pChaveAcesso", .ChaveAcesso, dbFieldTypeString))

        Call cmd.AddValue("nr_romaneio", "@pNrRomaneio")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNrRomaneio", .NrRomaneio, dbFieldTypeString))

        Call cmd.AddValue("serie_nf", "@pSerieNF")
        Call cmd.Parameters.add(cmd.CreateParameter("@pSerieNF", .SerieNF, dbFieldTypeString))
        
        'Ivo Sousa (03/05/2012) - Correções para versão 1.04 do CT-e
        'Projeto: #7373 - História: #4211 - Desenvolvimento: #8237 - Ivo Sousa(22/05/2013)
        Call cmd.AddValue("modelo", "@pModelo")
        Call cmd.Parameters.add(cmd.CreateParameter("@pModelo", .ModeloNF, dbFieldTypeString))

        Call cmd.AddValue("base_icms", "@pBaseICMS")
        Call cmd.Parameters.add(cmd.CreateParameter("@pBaseICMS", .BaseICMS, dbFieldTypeDouble))

        Call cmd.AddValue("valor_icms", "@pValorICMS")
        Call cmd.Parameters.add(cmd.CreateParameter("@pValorICMS", .ValorICMS, dbFieldTypeDouble))

        Call cmd.AddValue("base_icms_st", "@pBsICMSST")
        Call cmd.Parameters.add(cmd.CreateParameter("@pBsICMSST", .BaseICMSST, dbFieldTypeDouble))

        Call cmd.AddValue("valor_icms_st", "@pVAlorICMSST")
        Call cmd.Parameters.add(cmd.CreateParameter("@pVAlorICMSST", .ValorICMSST, dbFieldTypeDouble))

        Call cmd.AddValue("total_mercadorias", "@pTotalMercadorias")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTotalMercadorias", .TotalMercadorias, dbFieldTypeDouble))

        Call cmd.AddValue("cfop", "@pCFOP")
        Call cmd.Parameters.add(cmd.CreateParameter("@pCFOP", .CFOP, dbFieldTypeString))
        
    End With
End Sub

Public Function Excluir(ByVal obj As cFreteMercadoriaReceber, ByRef objAplicacao As IApplication) As Boolean
    Dim cmd As IDBDeleteCommand
On Error GoTo erro_excluindo
    Excluir = True
    Set cmd = objAplicacao.CreateDeleteCommand
    cmd.Table = NomeTabela
    Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngCodigoFrete, dbFieldTypeLong))
    Call cmd.Filter.Append("tp_registro = @pTpConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpConhecimento", mstrTipoFrete, dbFieldTypeString, 20))
    Call cmd.Filter.Append("id_item = @pIdItem")
    Call cmd.Parameters.add(cmd.CreateParameter("@pIdItem", obj.sequencial, dbFieldTypeInt))
    Call cmd.Filter.Append("seq_conhecimento = @pSeqConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", mlngSeqConhecimento, dbFieldTypeLong))
    Call objAplicacao.ExecuteUpdate(objAplicacao.GetInternalAuthorization, cmd)
    Set cmd = Nothing
    Exit Function
erro_excluindo:
    err.clear
    Excluir = False

End Function

Public Function carregar_lista() As cColecaoFreteMercadoriaReceber
    Dim cmd As IDBSelectCommand
    Dim mercadoria As cFreteMercadoriaReceber
    Dim rdResult As IDBReader
On Error GoTo erro_carregando
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NomeTabela
    Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngCodigoFrete, dbFieldTypeLong))
    Call cmd.Filter.Append("tp_registro = @pTpRegistro")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistro", mstrTipoFrete, dbFieldTypeString, 20))
    Call cmd.Filter.Append("seq_conhecimento = @pSeqConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pSeqConhecimento", mlngSeqConhecimento, dbFieldTypeLong))
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        Set carregar_lista = New cColecaoFreteMercadoriaReceber
        While Not rdResult.EOF
            Set mercadoria = New cFreteMercadoriaReceber
            Call carregar_lista.add(mercadoria.CriarObjeto(rdResult))
            rdResult.MoveNext
        Wend
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function
erro_carregando:
    err.clear
    carregar_lista = Nothing
End Function
