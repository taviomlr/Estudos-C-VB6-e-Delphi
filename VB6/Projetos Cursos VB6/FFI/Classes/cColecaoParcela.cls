VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cColecaoParcela"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cColecaoParcela
''  Generated by Enterprise Architect
''  Created on:      25-ago-2006 16:51:35
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Implements IIterator

Private itens As Collection
Private iIndex As Integer
Private mdblTotal As Double

Private Sub Class_Initialize()
    Set itens = New Collection
    mdblTotal = 0
End Sub

Private Function IIterator_Count() As Long
    IIterator_Count = itens.Count
End Function

Private Property Get IIterator_CurrentObject() As Object
On Error GoTo SemObjeto
    Set IIterator_CurrentObject = itens.Item(iIndex)
    Exit Property

SemObjeto:
    Set IIterator_CurrentObject = Nothing
End Property

Private Function IIterator_EOF() As Boolean
On Error GoTo fimArquivo
    'Se não existe item na coleção é o fim do arquivo
    If itens.Count = 0 Then IIterator_EOF = True
    'Se o ponteiro estiver com uma quantidade maior do que a coleção
    'é o fim do arquivo
    If iIndex > itens.Count Then IIterator_EOF = True
    Exit Function

fimArquivo:
    IIterator_EOF = True
End Function

Private Sub IIterator_MoveNext(bInterrompe As Boolean)
    iIndex = iIndex + 1
End Sub

Public Sub add(ByVal obj As Object)
    Dim parc As cParcela
    If Not find(obj) Then
        Set parc = obj
        Call itens.add(parc)
        mdblTotal = mdblTotal + parc.Valor
    End If
    If itens.Count > 0 Then
        iIndex = 1
    End If
End Sub

Public Function find(ByVal obj As Object) As Integer
On Error GoTo SemRegistro
    Dim i As Integer
    Dim Registro As cParcela
    
    For i = 1 To itens.Count
        Set Registro = itens(i)
        If Registro.equals(obj) Then
            find = i
            Exit Function
        End If
    Next
    Exit Function
SemRegistro:
    find = 0
End Function

Public Sub remove(ByVal obj As Object)
    Dim i As Integer
    i = find(obj)
    If i > 0 Then
        Call itens.remove(i)
        mdblTotal = mdblTotal - obj.Valor
        If itens.Count > 0 Then
            iIndex = 1
        Else
            iIndex = 0
        End If
    End If
End Sub

Public Sub update(ByVal obj As Object)
    Dim i As Integer
    i = find(obj)
    If i > 0 Then
        itens.Item(i).Vencimento = obj.Vencimento
        mdblTotal = mdblTotal - itens.Item(i).Valor
        itens.Item(i).Valor = obj.Valor
        mdblTotal = mdblTotal + obj.Valor
    End If
End Sub

Public Function EOF() As Boolean
    EOF = IIterator_EOF
End Function

Public Function Count() As Long
    Count = IIterator_Count
End Function

Public Property Get CurrentObject() As Object
    Set CurrentObject = IIterator_CurrentObject
End Property

Public Sub MoveNext(Optional bInterrompe As Boolean = False)
    Call IIterator_MoveNext(bInterrompe)
End Sub

Public Sub MoveFirst()
    iIndex = 1
End Sub

Public Property Get ValorTotal() As Double
    ValorTotal = mdblTotal
End Property

'Data.......: 15/10/2008
'Autor......: Dulcino Júnior
'Descrição..: Função utilizada para duplicar o objeto que está carregado.
'Retorno....: [cColecaoParcela] Outro objeto com as mesmas caracteristicas.
'pt.........: 88289
Public Function Clone() As cColecaoParcela
    Dim intPosicao As Integer

    Set Clone = New cColecaoParcela
    intPosicao = iIndex
    With Clone
        Call MoveFirst
        While Not EOF
            Call .add(CurrentObject)
            Call MoveNext
        Wend
    End With
    iIndex = intPosicao
End Function
