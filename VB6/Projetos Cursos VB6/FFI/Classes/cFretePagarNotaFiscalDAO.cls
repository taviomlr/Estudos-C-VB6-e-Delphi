VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cFretePagarNotaFiscalDAO"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cFretePagarNotaFiscalDAO
''  Generated by Enterprise Architect
''  Created on:      18-set-2006 08:48:50
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private Const NomeTabela$ = "FreteEntradaNotaSaida"
Private mlngNumeroConhecimento As Long
Private mstrTipoConhecimento As String

Public Property Let numeroConhecimento(ByVal NewVal As Long)
        mlngNumeroConhecimento = NewVal
End Property

Public Property Get numeroConhecimento() As Long
        numeroConhecimento = mlngNumeroConhecimento
End Property

Public Property Let tipoConhecimento(ByVal NewVal As Variant)
        mstrTipoConhecimento = NewVal
End Property

Public Property Get tipoConhecimento() As Variant
        tipoConhecimento = mstrTipoConhecimento
End Property

Public Function persistir(ByVal notas As cColecaoNotaFiscal, ByVal objApp As IApplication) As Boolean
On Error GoTo erro_persistindo
    notas.MoveFirst
    While Not notas.EOF
        If persistirUm(notas.CurrentObject, objApp, notas.Transportadora, notas.registroEntrada) Then
            notas.MoveNext
            persistir = True
        Else
            persistir = False
            Exit Function
        End If
    Wend
    Exit Function
erro_persistindo:
    persistir = False
    Throw err
End Function

Public Function Excluir(ByVal notas As cColecaoNotaFiscal, ByVal objApp As IApplication) As Boolean

On Error GoTo erro_excluindo
    notas.MoveFirst
    While Not notas.EOF
        If excluirUm(notas.CurrentObject, objApp, notas.Transportadora, notas.registroEntrada) Then
            notas.MoveNext
            Excluir = True
        Else
            Excluir = False
            Exit Function
        End If
    Wend
    Exit Function
erro_excluindo:
    Excluir = False
    Throw err
End Function

Private Function persistirUm(ByVal obj As cFretePagarNotaFiscal, objApp As IApplication, lngCodigoTransportadora As Long, booRegistroEntrada As Boolean) As Boolean
    Dim cmd As IDBInsertCommand

On Error GoTo erro_persistindo
    Set cmd = objApp.CreateInsertCommand
    cmd.Table = NomeTabela
    Call cmd.AddValue("nr_conhecimento", "@pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngNumeroConhecimento, dbFieldTypeLong))
    Call cmd.AddValue("tp_registro", "@pTpRegistroConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistroConhecimento", mstrTipoConhecimento, dbFieldTypeString, 20))
    Call cmd.AddValue("cd_transportadora", "@pCdTransp")
    Call cmd.Parameters.add(cmd.CreateParameter("@pCdTransp", lngCodigoTransportadora, dbFieldTypeLong))
    Call cmd.AddValue("tp_registro_nf", "@pTpRegistroNf")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistroNf", obj.Tipo, dbFieldTypeString, 20))
    Call cmd.AddValue("nr_nota", "@pNrNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrNota", obj.Nota, dbFieldTypeLong))
    Call cmd.AddValue("empresa", "@pEmpresa")
    Call cmd.Parameters.add(cmd.CreateParameter("@pEmpresa", obj.Apel, dbFieldTypeString, 15))
    Call cmd.AddValue("registro_entrada", "@pRegistroEntrada")
    Call cmd.Parameters.add(cmd.CreateParameter("@pRegistroEntrada", booRegistroEntrada, dbFieldTypeBool))
    Call objApp.ExecuteUpdate(objApp.GetInternalAuthorization, cmd)
    persistirUm = True
    Set cmd = Nothing
    
    Exit Function
erro_persistindo:
    persistirUm = False
    Throw err
End Function

Public Function Carregar(Optional lngTranportadora As Long) As cColecaoNotaFiscal
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    Dim objFretePagar As cFretePagarNotaFiscal
    Dim objColecao As New cColecaoNotaFiscal

On Error GoTo erro_carregando
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    Call cmd.Filter.Append("nr_conhecimento = @pNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", mlngNumeroConhecimento, dbFieldTypeLong))
    Call cmd.Filter.Append("tp_registro = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", mstrTipoConhecimento, dbFieldTypeString, 20))
    'pt. 86013 - Ivo Sousa(15/05/2008)
    If lngTranportadora > 0 Then
        Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", lngTranportadora, dbFieldTypeLong))
    End If
    cmd.Table.TableName = NomeTabela
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    While Not rdResult.EOF
        Set objFretePagar = New cFretePagarNotaFiscal
        Call objColecao.add(objFretePagar.CriarObjeto(rdResult))
        rdResult.MoveNext
    Wend
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Set Carregar = objColecao
    Exit Function
erro_carregando:
    Carregar = New cColecaoNotaFiscal
End Function

Public Function AtualizaNumeroConhecimeto(ByVal lngNumeroConhecimento As Long, ByVal strTipoConhecimento As String, ByVal lngTranportadora As Long, ByVal lngNumeroConhecimentoNovo As Long, objApp As IApplication) As Boolean
    Dim cmd As IDBUpdateCommand
    Dim rdResult As IDBReader
    Dim bolAtualizaConhecimento As Boolean
    'Dim lngNumeroConhecimento As Long
    
On Error GoTo erro_atualizando
    Set cmd = objApp.CreateUpdateCommand
    cmd.Table = NomeTabela
       
    'Filtros
       
    Call cmd.Filter.Append("nr_conhecimento = @pNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumero", lngNumeroConhecimento, dbFieldTypeLong))
    
    Call cmd.Filter.Append("tp_registro = @pTipo")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipo", strTipoConhecimento, dbFieldTypeString, 20))
    
    Call cmd.Filter.Append("cd_transportadora = @pTransportadora")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTransportadora", lngTranportadora, dbFieldTypeLong))
 
    'Novo Número
    
    Call cmd.AddValue("nr_conhecimento", "@pNovoNumero")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNovoNumero", lngNumeroConhecimentoNovo, dbFieldTypeLong))
        
    AtualizaNumeroConhecimeto = objApp.ExecuteUpdate(objApp.GetInternalAuthorization, cmd)
    Exit Function

erro_atualizando:
    AtualizaNumeroConhecimeto = False
End Function

Private Function excluirUm(ByVal obj As cFretePagarNotaFiscal, ByVal objApp As IApplication, lngCodigoTransportadora As Long, booRegistroEntrada As Boolean) As Boolean
    Dim cmd As IDBDeleteCommand

On Error GoTo erro_excluindo
    Set cmd = objApp.CreateDeleteCommand
    cmd.Table = NomeTabela
    Call cmd.Filter.Append("nr_conhecimento = @pNrConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrConhecimento", mlngNumeroConhecimento, dbFieldTypeLong))
    Call cmd.Filter.Append("tp_registro = @pTpRegistroConhecimento")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTpRegistroConhecimento", mstrTipoConhecimento, dbFieldTypeString, 20))
    Call cmd.Filter.Append("cd_transportadora = @pCdTransp")
    Call cmd.Parameters.add(cmd.CreateParameter("@pCdTransp", lngCodigoTransportadora, dbFieldTypeLong))
    Call cmd.Filter.Append("tp_registro_nf = @pTipoNf")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipoNf", obj.Tipo, dbFieldTypeString, 20))
    Call cmd.Filter.Append("nr_nota = @pNrNota")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNrNota", obj.Nota, dbFieldTypeLong))
    Call objApp.ExecuteUpdate(objApp.GetInternalAuthorization, cmd)
    excluirUm = True
    Set cmd = Nothing
    
    Exit Function
erro_excluindo:
    excluirUm = False
    Throw err
End Function
