VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "cSinalNegocio"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_Ext_KEY = "SavedWithClassBuilder" ,"Yes"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''
''  Implementation of the  Class cSinalNegocio
''  Generated by Enterprise Architect
''  Created on:      15-ago-2006 10:47:33
''  Original author: Dulcino Júnior
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''Objeto utilizado para as funções de
''Sinal de Negócio

''Número do pedido
Private mlngNumPed As Long
Private mstrTipReg As String
Private mstrFornec As String
Private mintNumPar As Integer
Private mdatDatPar As Date
Private mdblVlrPar As Double
Private mstrMensagem As String
'Mauricio - 27/05/2015 - Projeto:#78205 Desenvolvimento:#78819
Private mlngCentroCusto As Long
Private Const NOMETABELA As String = "SinaisNegocio"


Public Property Get dataParcela() As Date
        dataParcela = mdatDatPar
End Property

Public Property Get Fornecedor() As String
        Fornecedor = mstrFornec
End Property

Public Property Get numeroParcela() As Integer
        numeroParcela = mintNumPar
End Property

Public Property Get numeroPedido() As Long
        numeroPedido = mlngNumPed
End Property

Public Property Get TipoRegistro() As String
        TipoRegistro = mstrTipReg
End Property

Public Property Get valorParcela() As Double
        valorParcela = mdblVlrPar
End Property

Public Property Let dataParcela(ByVal NewVal As Date)
        mdatDatPar = NewVal
End Property

Public Property Let Fornecedor(ByVal NewVal As String)
        mstrFornec = NewVal
End Property

Public Property Let valorParcela(ByVal NewVal As Double)
        mdblVlrPar = NewVal
End Property

Public Property Let numeroPedido(ByVal NewVal As Long)
        mlngNumPed = NewVal
End Property

Public Property Let TipoRegistro(ByVal NewVal As String)
        mstrTipReg = NewVal
End Property

Public Property Let numeroParcela(ByVal NewVal As Integer)
        mintNumPar = NewVal
End Property

Public Property Get mensagem() As String
        mensagem = mstrMensagem
End Property
Public Property Get CentroCusto() As Long
    CentroCusto = mlngCentroCusto
End Property
Public Property Let CentroCusto(ByVal lngCentroCusto As Long)
    mlngCentroCusto = lngCentroCusto
End Property

''Metodo utilizado para gravar o objeto
Public Function persistir() As Boolean
    Dim cmd As IDBInsertCommand

On Error GoTo erro_persistindo
    persistir = True
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateInsertCommand
    cmd.Table = NOMETABELA
    Call cmd.AddValue("NUMPED", "@pNumPed")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumPed", mlngNumPed, dbFieldTypeLong))
    Call cmd.AddValue("TIPREG", "@pTipReg")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipReg", mstrTipReg, dbFieldTypeString))
    If mintNumPar = 0 Then
        mintNumPar = proximaParcela * -1
    End If
    Call cmd.AddValue("NUMPAR", "@pNUMPAR")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNUMPAR", mintNumPar))
    Call PrepareCommand(cmd)
    Call Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd)
    Aplicacao.Disconnect
    Exit Function
erro_persistindo:
    err.Clear
    persistir = False
End Function

''Metodo utilizado para carregar os
''valores da tabela no objeto.
Public Function Carregar(ByVal lngNumPed As Long, ByVal strTipReg As String, ByVal intNumPar As Integer) As Boolean
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader

On Error GoTo erro_carregando
    Carregar = True
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NOMETABELA
    Call cmd.Filter.Append("NUMPED = @pNumPed")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumPed", lngNumPed, dbFieldTypeLong))
    Call cmd.Filter.Append("TIPREG = @pTipReg")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipReg", strTipReg, dbFieldTypeString))
'    Call cmd.Filter.Append("Fornec = @pFornec")
'    Call cmd.Parameters.add(cmd.CreateParameter("@pFornec", strFornec, dbFieldTypeString, 15))
    Call cmd.Filter.Append("NUMPAR = @pNUMPAR")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNUMPAR", intNumPar, dbFieldTypeInt))
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        mlngNumPed = rdResult.GetLong("NUMPED")
        mstrTipReg = rdResult.GetString("TIPREG")
        mstrFornec = rdResult.GetString("FORNEC")
        mintNumPar = rdResult.GetInteger("NUMPAR")
        mdatDatPar = rdResult.GetDate("DATPAR")
        mdblVlrPar = rdResult.GetDouble("VLRPAR")
        'Mauricio - 27/05/2015 - Projeto:#78205 Desenvolvimento:#78819
        mlngCentroCusto = rdResult.GetLong("centro_custo")
        Carregar = True
    Else
        Carregar = False
    End If
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function

erro_carregando:
    Carregar = False
End Function

''Consulta todos os sinais de um
''determinado pedido
Public Function Consultar(ByVal lngNumPed As Long, ByVal strTipReg As String, ByVal strFornec As String) As IDBReader
    Dim cmd As IDBSelectCommand

On Error GoTo erro_consultando
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NOMETABELA
    Call cmd.Filter.Append("NUMPED = @pNumPed")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumPed", lngNumPed, dbFieldTypeLong))
    Call cmd.Filter.Append("TIPREG = @pTipReg")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipReg", strTipReg, dbFieldTypeString))
    Call cmd.Filter.Append("Fornec = @pFornec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pFornec", strFornec, dbFieldTypeString, 15))
    Set Consultar = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    Set cmd = Nothing
    Aplicacao.Disconnect
    Exit Function
erro_consultando:
    err.Clear
    Consultar = Nothing
End Function

''Metodo utilizado para excluir o objeto
''do banco de dados.
Public Function Excluir(strGBL_Tipo As String, ByVal lngNumPed As Long, ByVal strTipReg As String, ByVal strFornec As String, ByVal intNumPar As Integer, strPagRec As String) As Boolean
    Dim cmd As IDBDeleteCommand
    Dim Duplicata As New CDuplicata
    Dim booPag As Boolean
    
On Error GoTo erro_excluindo
    Excluir = True
    Select Case strGBL_Tipo
        Case GBL_NFE, GBL_PDC
            booPag = True
        Case GBL_NFS, GBL_PDV
            booPag = False
    End Select
    If Duplicata.Excluir(booPag, lngNumPed, strFornec, strTipReg, intNumPar) Then
        Aplicacao.Connect
        Set cmd = Aplicacao.CreateDeleteCommand
        cmd.Table = NOMETABELA
        Call cmd.Filter.Append("NUMPED = @pNumPed")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNumPed", lngNumPed, dbFieldTypeLong))
        Call cmd.Filter.Append("TIPREG = @pTipReg")
        Call cmd.Parameters.add(cmd.CreateParameter("@pTipReg", strTipReg, dbFieldTypeString))
        Call cmd.Filter.Append("Fornec = @pFornec")
        Call cmd.Parameters.add(cmd.CreateParameter("@pFornec", strFornec, dbFieldTypeString, 15))
        Call cmd.Filter.Append("NUMPAR = @pNUMPAR")
        Call cmd.Parameters.add(cmd.CreateParameter("@pNUMPAR", intNumPar, dbFieldTypeInt))
        Call Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd)
        
        Set cmd = Nothing
        Aplicacao.Disconnect
    Else
        GoTo erro_excluindo
    End If
    Exit Function
erro_excluindo:
    mstrMensagem = "Erro ao excluir o sinal." & vbNewLine & Duplicata.MsgErro
    err.Clear
    Excluir = False
End Function

Private Sub PrepareCommand(ByRef cmd As Object)
    Call cmd.AddValue("FORNEC", "@pFORNEC")
    Call cmd.Parameters.add(cmd.CreateParameter("@pFORNEC", mstrFornec, dbFieldTypeString))
    Call cmd.AddValue("DATPAR", "@pDatPar")
    Call cmd.Parameters.add(cmd.CreateParameter("@pDatPar", mdatDatPar, dbFieldTypeDate))
    Call cmd.AddValue("VLRPAR", "@pVlrPar")
    Call cmd.Parameters.add(cmd.CreateParameter("@pVlrPar", mdblVlrPar, dbFieldTypeDouble))
    'Mauricio - 27/05/2015 - Projeto:#78205 Desenvolvimento:#78819
    Call cmd.AddValue("centro_custo", "@pCentroCusto")
    Call cmd.Parameters.add(cmd.CreateParameter("@pCentroCusto", mlngCentroCusto, dbFieldTypeLong))
       
End Sub

Public Function Alterar() As Boolean
    Dim cmd As IDBUpdateCommand
On Error GoTo erro_alterando
    Alterar = True
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateUpdateCommand
    cmd.Table = NOMETABELA

    Call cmd.Filter.Append("NUMPED = @pNUMPED")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNUMPED", mlngNumPed, dbFieldTypeLong))
    
    Call cmd.Filter.Append("TIPREG = @pTIPREG")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTIPREG", mstrTipReg, dbFieldTypeString))
       
    Call cmd.Filter.Append("NUMPAR = @pNUMPAR")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNUMPAR", mintNumPar, dbFieldTypeInt))
    
    Call PrepareCommand(cmd)
    
    Call Aplicacao.ExecuteUpdate(Aplicacao.GetInternalAuthorization, cmd)
    Aplicacao.Disconnect
    Exit Function
erro_alterando:
    err.Clear
    Alterar = False
End Function

Private Function proximaParcela() As Integer
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader

On Error GoTo erro_consulta
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.SelectClause = "MAX(NUMPAR) AS ultimo"
    cmd.Table.TableName = NOMETABELA
    Call cmd.Filter.Append("NUMPED = @pNumPed")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumPed", mlngNumPed, dbFieldTypeLong))
    Call cmd.Filter.Append("TIPREG = @pTipReg")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipReg", mstrTipReg, dbFieldTypeString, 20))
    Call cmd.Filter.Append("FORNEC = @pFornec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pFornec", mstrFornec, dbFieldTypeString, 20))
    
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    If Not rdResult.EOF Then
        proximaParcela = rdResult.GetInteger("ultimo") + 1
    Else
        proximaParcela = 1
    End If
    Aplicacao.Disconnect
    rdResult.CloseReader
    Set rdResult = Nothing
    Set cmd = Nothing
    
    Exit Function
erro_consulta:
    proximaParcela = 0
End Function

Private Sub organizaParcelas(ByVal lngNumPed As Long, ByVal strTipReg As String, ByVal strFornec As String, ByVal strPagRec As String)
    Dim cmd As IDBSelectCommand
    Dim rdResult As IDBReader
    Dim intAnterior As Integer
    Dim duplic As New CDuplicata
    Dim intNum As Integer

On Error GoTo erro_organizando
    Aplicacao.Connect
    Set cmd = Aplicacao.CreateSelectCommand
    cmd.Table.TableName = NOMETABELA
    Call cmd.Filter.Append("NUMPED = @pNumPed")
    Call cmd.Parameters.add(cmd.CreateParameter("@pNumPed", lngNumPed, dbFieldTypeLong))
    Call cmd.Filter.Append("TIPREG = @pTipReg")
    Call cmd.Parameters.add(cmd.CreateParameter("@pTipReg", strTipReg, dbFieldTypeString))
    Call cmd.Filter.Append("Fornec = @pFornec")
    Call cmd.Parameters.add(cmd.CreateParameter("@pFornec", strFornec))
    Set rdResult = Aplicacao.ExecuteReader(Aplicacao.GetInternalAuthorization, cmd)
    intAnterior = 0
    While Not rdResult.EOF
        If rdResult.GetInteger("NUMPAR") - 1 > intAnterior Then
            'Projeto: #4350 - História: #4345 - Problema#5919 - João Henrique(14/03/2013)
            If Carregar(lngNumPed, strTipReg, rdResult.GetInteger("NUMPAR")) Then
                intNum = mintNumPar * -1
                If Alterar Then
                    intAnterior = rdResult.GetInteger("NUMPAR") - 1
                Else
                    GoTo erro_organizando
                End If
            Else
                GoTo erro_organizando
            End If
        End If
        rdResult.MoveNext
    Wend
    Aplicacao.Disconnect
    Exit Sub
erro_organizando:
    err.Clear
    Exit Sub
End Sub

Public Function gerarDuplicata(strGBL_Tipo As String, strMoeda As String, _
Optional strBanco As String, Optional strConta As String, _
Optional strCentro As String, Optional datNota As Date = Empty) As Boolean
    Dim Duplicata As New CDuplicata
    Dim strPagRec As String
    Dim booInserir As Boolean
    Dim intParcela As Integer
    
On Error GoTo erro_duplicata
    gerarDuplicata = True
    With Duplicata
        Select Case strGBL_Tipo
            Case GBL_NFE, GBL_PDC
                strPagRec = "P"
            Case GBL_NFS, GBL_PDV
                strPagRec = "R"
        End Select
        .PagRec = strPagRec
        .Nota = mlngNumPed
        .Tipo = mstrTipReg
        'Verificado com o Sr. Adriano e foi convencionado que para sinais de negocio a parcela sempre é negativa.
        .Parcela = mintNumPar
        .Empresa = mstrFornec
        .vencimento = mdatDatPar
        .Liberacao = mdatDatPar
        'Mauricio - 27/05/2015 - Projeto:#78205 Desenvolvimento:#78819
        .Centro = mlngCentroCusto
        .ValorOriginal = CStr(mdblVlrPar)
        If strBanco <> "" Then .Banco = strBanco
        If strConta <> "" Then .Conta = strConta
        If strCentro <> "" Then .Centro = strCentro
        .Moeda = strMoeda
        If .persistir Then
            If Configuracao("Parcelas a Vista em " & IIf(strPagRec = "R", "Vendas", "Compras") & " devem ser gravadas como pagas", False, IIf(strPagRec = "R", "KIV", NUL)) Then
                If datNota <> Empty Then
                    If .vencimento = datNota Then
                        .quitar
                    End If
                End If
            End If
        End If
    End With
    Exit Function
erro_duplicata:
    err.Clear
    gerarDuplicata = False
End Function

'Autor.............: Maurício Fuhrmann Brum
'Data..............: 10/04/2015
'Projeto...........: #67649 Desenvolvimento: #73702
'Descrição.........: 'Mauricio - 10/04/2015 - Projeto:#67649 Problema:#73702
Public Function estaQuitada(ByVal strGBL_Tipo As String) As Boolean
    Dim Duplicata As New CDuplicata
    Dim strPagRec As String
    Dim blnPagamento As Boolean
    
On Error GoTo erro_duplicata
    With Duplicata
        Select Case strGBL_Tipo
            Case GBL_NFE, GBL_PDC
                strPagRec = "P"
                blnPagamento = True
            Case GBL_NFS, GBL_PDV
                strPagRec = "R"
                blnPagamento = False
        End Select
        
        estaQuitada = .isQuitada(blnPagamento, numeroPedido, Fornecedor, TipoRegistro, numeroParcela)
    End With
    Exit Function
    
erro_duplicata:
    err.Clear
    estaQuitada = False
End Function

Public Function atualizarDuplicata(ByVal strGBL_Tipo As String, strMoeda As String, strBanco As String, lngConta As Long) As Boolean
    Dim Duplicata As New CDuplicata
    Dim strPagRec As String
    Dim blnPagamento As Boolean
    
On Error GoTo erro_duplicata
    atualizarDuplicata = True
    With Duplicata
        Select Case strGBL_Tipo
            Case GBL_NFE, GBL_PDC
                strPagRec = "P"
                blnPagamento = True
            Case GBL_NFS, GBL_PDV
                strPagRec = "R"
                blnPagamento = False
        End Select
        .PagRec = strPagRec
        .vencimento = dataParcela
        .Liberacao = dataParcela
        .ValorOriginal = valorParcela
        If strBanco <> "" Then
            .Banco = strBanco
        End If
        .Conta = lngConta
        .Moeda = strMoeda
        'Mauricio - 27/05/2015 - Projeto:#78205 Desenvolvimento:#78819
        .Centro = mlngCentroCusto
        'Projeto: #4350 - História: #4345 - Desenvolvimento#5762 - João Henrique(13/03/2013)
        If .AlterarDuplicata(blnPagamento, numeroPedido, Fornecedor, TipoRegistro, numeroParcela) Then
            If Configuracao("Parcelas a Vista em " & IIf(strPagRec = "R", "Vendas", "Compras") & " devem ser gravadas como pagas", False, IIf(strPagRec = "R", "KIV", NUL)) Then
                If dataParcela <> Empty Then
                    If .vencimento = dataParcela Then
                        .quitar
                    End If
                End If
            End If
        End If
    End With
    Exit Function
    
erro_duplicata:
    err.Clear
    atualizarDuplicata = False
End Function

'Data.......: 01/06/2007
'Autor......: Dulcino Júnior
'Descrição..: Função utilizada para verificar se dois objetos são o mesmo.
'Retorno....: [Boolean] Retorna se o objeto passado é igual ao objeto carregado.
Public Function Equals(obj As Object) As Boolean
    Dim item As cSinalNegocio
    
    If TypeName(obj) <> TypeName(Me) Then
        Equals = False
        Exit Function
    Else
        Set item = obj
    End If
    Equals = True
    Equals = Equals And (Me.numeroPedido = item.numeroPedido)
    Equals = Equals And (Me.TipoRegistro = item.TipoRegistro)
    'Equals = Equals And (Me.Fornecedor = item.Fornecedor)
    Equals = Equals And (Me.numeroParcela = item.numeroParcela)
    Set item = Nothing
End Function

'Data.......: 05/06/2007
'Autor......: Dulcino Júnior
'Descrição..: Função utilizada para retornar uma nova instancia do objeto
'               sinal de negócio.
'Retorno....: [cSinalNegocio] Retorna uma nova instancia da classe sinal de
'               negócio com os mesmos valores.
Public Function Clone() As cSinalNegocio
    Set Clone = New cSinalNegocio
    With Clone
        .numeroPedido = Me.numeroPedido
        .TipoRegistro = Me.TipoRegistro
        .Fornecedor = Me.Fornecedor
        .numeroParcela = Me.numeroParcela
        .dataParcela = Me.dataParcela
        .valorParcela = Me.valorParcela
        .CentroCusto = Me.CentroCusto
    End With
End Function

Public Function validarAlteracao(strGBLTipo As String) As Boolean
    Dim objDuplicata As New CDuplicata
    Dim strPagRec    As String
    
    Select Case strGBLTipo
        Case GBL_NFE, GBL_PDC
            strPagRec = "P"
        Case GBL_NFS, GBL_PDV
            strPagRec = "R"
    End Select
    If objDuplicata.Carregar(strPagRec, numeroPedido, Fornecedor, TipoRegistro, numeroParcela) Then
        validarAlteracao = Not IsValidDate(objDuplicata.Pagamento)
    Else
        validarAlteracao = True
    End If
End Function

'Data.......: 05/03/2008
'Autor......: Ivo Sousa
'Descrição..: Procedimento utilizado para validar datas.
Private Function IsValidDate(strData As String) As Boolean
    If IsDate(strData) Then
        If Mid(strData, 4, 2) > 0 And Mid(strData, 4, 2) <= 12 Then
            IsValidDate = True
        Else
            IsValidDate = False
        End If
    Else
        IsValidDate = False
    End If
End Function
